{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "bond_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ReentrancyGuardReentrantCall",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "_AlreadyBurn",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "_AlreadyClaimed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "_CallerNotEOA",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "_Finished",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "param",
						"type": "string"
					}
				],
				"name": "_InvalidParams",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "_NotStarted",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "_NothingToBurn",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "_PermissionDenied",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "_Unfinished",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "_Unqualified",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "distributionId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Burned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "distributionId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Claimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "distributionId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "startTime",
						"type": "uint64"
					}
				],
				"name": "Created",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "bond",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bool",
								"name": "isDistribution",
								"type": "bool"
							},
							{
								"internalType": "uint40",
								"name": "distributionRatioKol",
								"type": "uint40"
							},
							{
								"internalType": "uint40",
								"name": "distributionRatioCommunity",
								"type": "uint40"
							},
							{
								"internalType": "uint40",
								"name": "walletCountKol",
								"type": "uint40"
							},
							{
								"internalType": "uint40",
								"name": "walletCountCommunity",
								"type": "uint40"
							},
							{
								"internalType": "bytes32",
								"name": "merkleRootKol",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "merkleRootCommunity",
								"type": "bytes32"
							}
						],
						"internalType": "struct I_Distributor.DistributionParams",
						"name": "dp",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "token",
								"type": "address"
							},
							{
								"internalType": "uint176",
								"name": "supply",
								"type": "uint176"
							},
							{
								"internalType": "uint64",
								"name": "startTime",
								"type": "uint64"
							},
							{
								"internalType": "bool",
								"name": "isKol",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "isCommunity",
								"type": "bool"
							}
						],
						"internalType": "struct I_Distributor.TokenParam",
						"name": "tp",
						"type": "tuple"
					}
				],
				"name": "createDistribution",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "distributions",
				"outputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint40",
						"name": "walletCountKOL",
						"type": "uint40"
					},
					{
						"internalType": "uint40",
						"name": "walletCountCommunity",
						"type": "uint40"
					},
					{
						"internalType": "uint40",
						"name": "claimedCountKOL",
						"type": "uint40"
					},
					{
						"internalType": "uint40",
						"name": "claimedCountCommunity",
						"type": "uint40"
					},
					{
						"internalType": "uint64",
						"name": "startTime",
						"type": "uint64"
					},
					{
						"internalType": "bool",
						"name": "isKOL",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "isCommunity",
						"type": "bool"
					},
					{
						"internalType": "uint176",
						"name": "amountPerClaimKOL",
						"type": "uint176"
					},
					{
						"internalType": "uint176",
						"name": "amountPerClaimCommunity",
						"type": "uint176"
					},
					{
						"internalType": "bytes32",
						"name": "merkleRootKOL",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "merkleRootCommunity",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "duration",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "distributionId",
						"type": "uint256"
					}
				],
				"name": "getAmountClaimed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "isBurn",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "distributionId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "wallet",
						"type": "address"
					}
				],
				"name": "isClaimedCommunity",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "distributionId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "wallet",
						"type": "address"
					}
				],
				"name": "isClaimedKOL",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "timeOfDuration",
						"type": "uint256"
					}
				],
				"name": "updateEndTime",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "A contract for distributing tokens to multiple addresses using a Merkle tree.",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"ReentrancyGuardReentrantCall()": [
					{
						"details": "Unauthorized reentrant call."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"createDistribution((bool,uint40,uint40,uint40,uint40,bytes32,bytes32),(address,uint176,uint64,bool,bool))": {
					"details": "Creates a new token distribution.",
					"params": {
						"dp": "The address of the token to be distributed.",
						"tp": "The token information."
					}
				},
				"getAmountClaimed(uint256)": {
					"details": "Returns the total amount claimed for a specific distribution.",
					"params": {
						"distributionId": "The ID of the distribution."
					},
					"returns": {
						"_0": "The total amount claimed for the distribution."
					}
				},
				"isClaimedCommunity(uint256,address)": {
					"details": "Checks if a specific wallet address has claimed the tokens for a given distribution ID.",
					"params": {
						"distributionId": "The ID of the distribution.",
						"wallet": "The wallet address to check."
					},
					"returns": {
						"_0": "A boolean indicating whether the wallet address has claimed the tokens or not."
					}
				},
				"isClaimedKOL(uint256,address)": {
					"details": "Checks if a specific wallet address has claimed the tokens for a given distribution ID.",
					"params": {
						"distributionId": "The ID of the distribution.",
						"wallet": "The wallet address to check."
					},
					"returns": {
						"_0": "A boolean indicating whether the wallet address has claimed the tokens or not."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "_Distributor.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/_Distributor.sol": "_Distributor"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"hardhat/console.sol": {
			"keccak256": "0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543",
			"license": "MIT",
			"urls": [
				"bzz-raw://a63166e036b040826baa513772451a79925daa304b38749100efb089ac07cdc2",
				"dweb:/ipfs/QmUtMTxUFKU6a5oFXsEJnTPvb3QPb7GDDmSv5yZ1jFHDwR"
			]
		},
		"lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
			"keccak256": "0x27c59ec88f0350d3d28d222a078e11bda664b955e012fe9a74962bf10c936209",
			"license": "MIT",
			"urls": [
				"bzz-raw://c3a300244e864b1362aea21080840ba1e4bc8dba7bcf21fe2dc4348b60d6b0d5",
				"dweb:/ipfs/QmV1L6ium91zyYCuxisumGnMVsQcNPQryaVp7t8aKgYGor"
			]
		},
		"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
			"keccak256": "0xa0bde69aaea348ad4b01f4813580bfd1739aae3e7d67bb8bfa1fa51158571f0a",
			"license": "MIT",
			"urls": [
				"bzz-raw://cd299bd27b8d00cf449eea4bbd60ffcba9d9611d997d6c9d069b20591331dddb",
				"dweb:/ipfs/QmbePywaV7342zrxgrjZcHuPU6CYBoqsb84KmpEpizCkrv"
			]
		},
		"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
			"keccak256": "0xaae7a768248603dde02c0d511ad19218c9ac597a6c29878bd4ff8d9004f39654",
			"license": "MIT",
			"urls": [
				"bzz-raw://56ee3ed6eb50573f5208bebc8293ddbb3ab5b978565967307f57a76d047d086a",
				"dweb:/ipfs/QmSMq5zmWLgMvuzKYUhLmYKCMRsHfjP5vjwu1cK7HqPodF"
			]
		},
		"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
			"keccak256": "0x75a6c32b80c199339bde8fcd7b88521453afb54e17cadb9b2d767bf1f0b80402",
			"license": "MIT",
			"urls": [
				"bzz-raw://85cb97a0c604aa1b7a1b391e65e0a403076802cfa81cd6cb9ec71605d8f40b6f",
				"dweb:/ipfs/QmPgYGonx8e7Xsbf6zSCHQmAqyR1G9mwZAVNgiHV8FL1cn"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x2a67691f431a6e5eeae9012a19c82ceef113b43cd68435911dec83da57b9d407",
			"license": "MIT",
			"urls": [
				"bzz-raw://29aae0becfbae61a9dd9452f989f58ce843060af89ef5aeb01e7122c4e8b7475",
				"dweb:/ipfs/QmPaGNM5zCMkJKGm2dKrivwEegwfN7kQw9E7RvMgKbxrqj"
			]
		},
		"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x56e551de3fa29049f4a0ff6a077330e72fde7811a32c273ea38481314be2147a",
			"license": "MIT",
			"urls": [
				"bzz-raw://a69517e31e8a9cc59cdf6d284d0acf44a0b751aca8d2cdaf6271935a229fbdbb",
				"dweb:/ipfs/QmdAwKLBUk2gvrT7X64oqGo4RTmxMwdj6Cjcz89Um8fzNN"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
			"keccak256": "0x5c0e25caa778f6c07b333f00e33e2ba4f0c152756c13a28594b26aa26671934a",
			"license": "MIT",
			"urls": [
				"bzz-raw://27f4942baf7bb37fdb14f15706c9082411f3485b0723a1934b609f43d6464e15",
				"dweb:/ipfs/QmVvCB6irqNrodWrB68rrBjMPtUdrXHQp3gpTgSVnYzc1m"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
			"keccak256": "0x3aa312348f02eb2c6f71dd936583ec09761a5d25e5f7448217e2cd7739f595df",
			"license": "MIT",
			"urls": [
				"bzz-raw://ff75375a8b4207936052eb480b280004619ea67e9b6d64c5dcc8b7adc0d67687",
				"dweb:/ipfs/QmeJiGKLGYeS1Yyr8KqySNow3ykHfvwJc9wx5J44s33J1A"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/Errors.sol": {
			"keccak256": "0x57ce794156a4dc5b78605b8cb93bee38dafd0e1f26daf24ef6467a683bfd94f6",
			"license": "MIT",
			"urls": [
				"bzz-raw://7b95cc5b6465e0ec147d12309dc2bc9c055d52ea5dd300bf5c494ee3a5585e4d",
				"dweb:/ipfs/QmQ2jTbwUgWi4WQTeTem6qLU91g7xZwLXvwHW7Hte2JVL8"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0x499cf5a15febd8db486e2993a5e62e6d01a0b819ed859b8cf7f820582f55458e",
			"license": "MIT",
			"urls": [
				"bzz-raw://9db7e29ba57d8c883587ca40369c1e25acf9e632d86894de1f65143c06c5a8e2",
				"dweb:/ipfs/QmUAmfpJq73vRDMm8hQJCHfpWq7AEuWjrF7V35QiX4mmeo"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
			"keccak256": "0xfaec0e1bcd941edd2583aee02deff2b0a67e3db774e1fa7c1e16516cac8be739",
			"license": "MIT",
			"urls": [
				"bzz-raw://6dc8f867ff4b17e2d70b9e29c60cf5ba79d127fc39f38472a7d27c45ce21ce0f",
				"dweb:/ipfs/QmWSdPtVCnN2cr4qPiJsF6mnm74cpGNHKbkeoBqd8dJDnS"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
			"keccak256": "0xf3f8afa475ddd3f09b38f882e43aa2c15fd9dda6541b8b4e7bdeb50a341f18e8",
			"license": "MIT",
			"urls": [
				"bzz-raw://9624c19a7932dffda07eefd2dfca19e0f834dfc52c36f97cf2283dcd2ead72ab",
				"dweb:/ipfs/QmUL57NqGvJYzUSGQTMT3LGijT9qpnF8UDfDz7PWcvg5tW"
			]
		},
		"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x0256a4ec2d817b06d957ec6aaf6db3e6dcc850fa08f01f50b5225d2dd3295ca3",
			"license": "MIT",
			"urls": [
				"bzz-raw://6cbbce88570f21ade526dc001d79ea2d0cf3577401b9a53d8c67d3c0b6632bf7",
				"dweb:/ipfs/Qmep6wMttm3S2WswA1wUiFMX6rw4Mt59daQdqpZosdmcYh"
			]
		},
		"src/_Distributor.sol": {
			"keccak256": "0x8d0986197366968e50945f5b1779700c422e0657bf4d4dc7e4dcac5a70fb5a57",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://8f19b15698cfe3967de92038e533d09f1cf74f8e601f5b37c9585b34d8f8892a",
				"dweb:/ipfs/QmVx85PwRypYL8jyGBjMXL8oSF6UW4JB6djckoPhcBDFdj"
			]
		},
		"src/interfaces/IERC20.sol": {
			"keccak256": "0x29b810492e893b40c64064490d4ef39a66649c6b968df34a5295ebba074ee700",
			"license": "MIT",
			"urls": [
				"bzz-raw://71b1217236e95b850930abc4651ddeb98327943ff962db444a11ea5531bd6417",
				"dweb:/ipfs/QmfLgaM9tRFkJYCNoefQd7YDbx7sdEdUmphgtw6nEg8VRs"
			]
		},
		"src/interfaces/I_Distributor.sol": {
			"keccak256": "0x4e7d1f99f05625916ef7a59d3ee0dd174d07c57447eeaf9de723544c9fbca9ad",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://c35b338493412c3687f9241f5dd0dd4fffae4e4a7e72f7168549b29b65afb6ec",
				"dweb:/ipfs/QmZ9VNmcH4pp7Vik9FvDz4yN31yxxBTVALiPmmjSAGHZq7"
			]
		}
	},
	"version": 1
}
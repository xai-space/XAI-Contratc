{
	"id": "df29a8ebd33f562b7355d25717b18220",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"src/_Recommend.sol": {
				"content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity 0.8.19;\r\n\r\nimport { Ownable } from \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\r\nimport { SafeTransferLib } from \"lib/solady-main/src/utils/SafeTransferLib.sol\";\r\nimport { ReentrancyGuard } from \"lib/solady-main/src/utils/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @title _Recommend.\r\n * @dev A contract that recommends relevant features.\r\n */\r\ncontract _Recommend is Ownable, ReentrancyGuard {\r\n    error _NoTokensToClaim();\r\n    error _NotSufficientFund();\r\n    error _CallerNotEOA();\r\n    error _IllegalValue();\r\n    error _NoOwner();\r\n\r\n    mapping(address => uint256) public obtainedAmount;\r\n    mapping(address => uint256) public alreadyClaimed;\r\n    mapping(address => bool) public isAdmin;\r\n    uint256 public recommendAmount = 2;\r\n\r\n    string public versions = \"1.0.0\";\r\n\r\n    event TokensSet(address indexed user, uint256 amount);\r\n    event TokensClaimed(address indexed user, uint256 amount);\r\n    event ContractDeploy(uint256 indexed flag, string version);\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        isAdmin[msg.sender] = true;\r\n        emit ContractDeploy(4, versions);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _checkOwner() internal view virtual override {\r\n        address sender = _msgSender();\r\n        if (owner() != sender && !isAdmin[sender]) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    function setAdmin(address _admin, bool _status) external {\r\n        if (msg.sender != owner()) revert _NoOwner();\r\n        isAdmin[_admin] = _status;\r\n    }\r\n\r\n    function rescueETH(address _to, uint256 _value) external {\r\n        if (msg.sender != owner()) revert _NoOwner();\r\n        SafeTransferLib.safeTransferETH(_to, _value);\r\n    }\r\n\r\n    /**\r\n     * @dev The referrer's algebra.\r\n     * @param _recommendAmount The reward is returned to the superior algebra.\r\n     */\r\n    function setRecommendAmount(uint256 _recommendAmount) external onlyOwner {\r\n        recommendAmount = _recommendAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Only bond contracts can set a record of tokens that can be claimed.\r\n     * @param referrer The referrer.\r\n     * @param amount The quantity that can be claimed.\r\n     */\r\n    function setClaimableTokens(address referrer, uint256 amount) external payable {\r\n        if (msg.value != amount || amount == 0) revert _IllegalValue();\r\n        obtainedAmount[referrer] += amount;\r\n\r\n        emit TokensSet(referrer, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Has been recorded can claim the corresponding referral reward.\r\n     */\r\n    function claimTokens() external nonReentrant {\r\n        if (tx.origin != msg.sender) revert _CallerNotEOA();\r\n        uint256 amount = obtainedAmount[msg.sender] - alreadyClaimed[msg.sender];\r\n        if (amount <= 0) revert _NoTokensToClaim();\r\n        if (address(this).balance < amount) revert _NotSufficientFund();\r\n\r\n        alreadyClaimed[msg.sender] += amount;\r\n        SafeTransferLib.safeTransferETH(msg.sender, amount);\r\n\r\n        emit TokensClaimed(msg.sender, amount);\r\n    }\r\n}"
			},
			"lib/solady-main/src/utils/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    uint256 private locked = 1;\n\n    modifier nonReentrant() virtual {\n        require(locked == 1, \"REENTRANCY\");\n\n        locked = 2;\n\n        _;\n\n        locked = 1;\n    }\n}"
			},
			"lib/solady-main/src/utils/SafeTransferLib.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { ERC20 } from \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument. Masking not required as it's a full 32 byte type.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument. Masking not required as it's a full 32 byte type.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument. Masking not required as it's a full 32 byte type.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}"
			},
			"lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity 0.8.19;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/ERC20.sol)\n\npragma solidity 0.8.19;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n    mapping(address account => mapping(address spender => uint256)) public _allowances;\n\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity 0.8.19;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity 0.8.19;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity 0.8.19;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity 0.8.19;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0x27c59ec88f0350d3d28d222a078e11bda664b955e012fe9a74962bf10c936209\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3a300244e864b1362aea21080840ba1e4bc8dba7bcf21fe2dc4348b60d6b0d5\",\"dweb:/ipfs/QmV1L6ium91zyYCuxisumGnMVsQcNPQryaVp7t8aKgYGor\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x3aa312348f02eb2c6f71dd936583ec09761a5d25e5f7448217e2cd7739f595df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff75375a8b4207936052eb480b280004619ea67e9b6d64c5dcc8b7adc0d67687\",\"dweb:/ipfs/QmeJiGKLGYeS1Yyr8KqySNow3ykHfvwJc9wx5J44s33J1A\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "lib/openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xdef64bb44aa222a632814704c59a6a5ceb4ea8ef5216749b17c73c3aa1cde00c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f27ae1402a37e955103e938d769d76339a6968acb482e0e80d455767e533edd6\",\"dweb:/ipfs/QmTWPEMKMP7MujrfsZTFBm2voSzxJ6zkV32S4GJM4iwvKi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xdef64bb44aa222a632814704c59a6a5ceb4ea8ef5216749b17c73c3aa1cde00c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f27ae1402a37e955103e938d769d76339a6968acb482e0e80d455767e533edd6\",\"dweb:/ipfs/QmTWPEMKMP7MujrfsZTFBm2voSzxJ6zkV32S4GJM4iwvKi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xdef64bb44aa222a632814704c59a6a5ceb4ea8ef5216749b17c73c3aa1cde00c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f27ae1402a37e955103e938d769d76339a6968acb482e0e80d455767e533edd6\",\"dweb:/ipfs/QmTWPEMKMP7MujrfsZTFBm2voSzxJ6zkV32S4GJM4iwvKi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "_allowances",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"_allowances(address,address)": "024c2ddd",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xdef64bb44aa222a632814704c59a6a5ceb4ea8ef5216749b17c73c3aa1cde00c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f27ae1402a37e955103e938d769d76339a6968acb482e0e80d455767e533edd6\",\"dweb:/ipfs/QmTWPEMKMP7MujrfsZTFBm2voSzxJ6zkV32S4GJM4iwvKi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xf758f03f984e2e493fa46454a553acd2f2f19e23beb7aeb77423a16548c7a127\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://354e6443e672cd37292756a5007c881f94d94c2436ef863c0678759b0488d2c1\",\"dweb:/ipfs/QmQuDQAePWXF3WCzZoXLMVoVPubuskc2fG3DbARs6dGJRn\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x2a67691f431a6e5eeae9012a19c82ceef113b43cd68435911dec83da57b9d407\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29aae0becfbae61a9dd9452f989f58ce843060af89ef5aeb01e7122c4e8b7475\",\"dweb:/ipfs/QmPaGNM5zCMkJKGm2dKrivwEegwfN7kQw9E7RvMgKbxrqj\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x7ec16fe73a675b22572684bfa0f108050eb259cec3110f556f0ae9edb69d7cd6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://810c3948142e0049c7a67b22220c976e266c782de2d2d4ca0a36d9041aaa15a4\",\"dweb:/ipfs/QmTLmHzCQhgdKrTyABwiLRHkKaAZMBi6oMzpAuxkqFnq2G\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x3aa312348f02eb2c6f71dd936583ec09761a5d25e5f7448217e2cd7739f595df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff75375a8b4207936052eb480b280004619ea67e9b6d64c5dcc8b7adc0d67687\",\"dweb:/ipfs/QmeJiGKLGYeS1Yyr8KqySNow3ykHfvwJc9wx5J44s33J1A\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 307,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 313,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 315,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 317,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 319,
								"contract": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x2a67691f431a6e5eeae9012a19c82ceef113b43cd68435911dec83da57b9d407\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29aae0becfbae61a9dd9452f989f58ce843060af89ef5aeb01e7122c4e8b7475\",\"dweb:/ipfs/QmPaGNM5zCMkJKGm2dKrivwEegwfN7kQw9E7RvMgKbxrqj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC-20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x2a67691f431a6e5eeae9012a19c82ceef113b43cd68435911dec83da57b9d407\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29aae0becfbae61a9dd9452f989f58ce843060af89ef5aeb01e7122c4e8b7475\",\"dweb:/ipfs/QmPaGNM5zCMkJKGm2dKrivwEegwfN7kQw9E7RvMgKbxrqj\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x7ec16fe73a675b22572684bfa0f108050eb259cec3110f556f0ae9edb69d7cd6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://810c3948142e0049c7a67b22220c976e266c782de2d2d4ca0a36d9041aaa15a4\",\"dweb:/ipfs/QmTLmHzCQhgdKrTyABwiLRHkKaAZMBi6oMzpAuxkqFnq2G\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x3aa312348f02eb2c6f71dd936583ec09761a5d25e5f7448217e2cd7739f595df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff75375a8b4207936052eb480b280004619ea67e9b6d64c5dcc8b7adc0d67687\",\"dweb:/ipfs/QmeJiGKLGYeS1Yyr8KqySNow3ykHfvwJc9wx5J44s33J1A\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/solady-main/src/utils/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"author": "Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Gas optimized reentrancy protection for smart contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/solady-main/src/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/solady-main/src/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x47c87df518aa91c1e645c2e695721fb9f18f071060c6af4e8c9a26171523ec7a\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0f446df9bb6b3e74373d13c21e5925d2d90f482964c2f1ecc004957686a3272b\",\"dweb:/ipfs/Qmb9tiTqLPFPAXeJHMMdFYaH1L5Mzuf7Rf7FFdQ1YQ338o\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 939,
								"contract": "lib/solady-main/src/utils/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "locked",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Gas optimized reentrancy protection for smart contracts.",
						"version": 1
					}
				}
			},
			"lib/solady-main/src/utils/SafeTransferLib.sol": {
				"SafeTransferLib": {
					"abi": [],
					"devdoc": {
						"author": "Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)",
						"details": "Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":627:6377  library SafeTransferLib {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":627:6377  library SafeTransferLib {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202e1b61ad431a8780c4f6ee600ea2315214453beb6325f7d83ab7620eb235267a64736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e1b61ad431a8780c4f6ee600ea2315214453beb6325f7d83ab7620eb235267a64736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E SHL PUSH2 0xAD43 BYTE DUP8 DUP1 0xC4 0xF6 0xEE PUSH1 0xE LOG2 BALANCE MSTORE EQ GASLIMIT EXTCODESIZE 0xEB PUSH4 0x25F7D83A 0xB7 PUSH3 0xEB235 0x26 PUSH27 0x64736F6C6343000813003300000000000000000000000000000000 ",
							"sourceMap": "627:5750:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202e1b61ad431a8780c4f6ee600ea2315214453beb6325f7d83ab7620eb235267a64736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E SHL PUSH2 0xAD43 BYTE DUP8 DUP1 0xC4 0xF6 0xEE PUSH1 0xE LOG2 BALANCE MSTORE EQ GASLIMIT EXTCODESIZE 0xEB PUSH4 0x25F7D83A 0xB7 PUSH3 0xEB235 0x26 PUSH27 0x64736F6C6343000813003300000000000000000000000000000000 ",
							"sourceMap": "627:5750:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"safeApprove(contract ERC20,address,uint256)": "infinite",
								"safeTransfer(contract ERC20,address,uint256)": "infinite",
								"safeTransferETH(address,uint256)": "infinite",
								"safeTransferFrom(contract ERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH",
									"source": 7,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 627,
									"end": 6377,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202e1b61ad431a8780c4f6ee600ea2315214453beb6325f7d83ab7620eb235267a64736f6c63430008130033",
									".code": [
										{
											"begin": 627,
											"end": 6377,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 627,
											"end": 6377,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 627,
											"end": 6377,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 627,
											"end": 6377,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 627,
											"end": 6377,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 627,
											"end": 6377,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 627,
											"end": 6377,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 627,
											"end": 6377,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 627,
											"end": 6377,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/solady-main/src/utils/ReentrancyGuard.sol",
								"lib/solady-main/src/utils/SafeTransferLib.sol",
								"src/_Recommend.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\",\"details\":\"Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Safe ETH and ERC20 transfer library that gracefully handles missing return values.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/solady-main/src/utils/SafeTransferLib.sol\":\"SafeTransferLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xdef64bb44aa222a632814704c59a6a5ceb4ea8ef5216749b17c73c3aa1cde00c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f27ae1402a37e955103e938d769d76339a6968acb482e0e80d455767e533edd6\",\"dweb:/ipfs/QmTWPEMKMP7MujrfsZTFBm2voSzxJ6zkV32S4GJM4iwvKi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xf758f03f984e2e493fa46454a553acd2f2f19e23beb7aeb77423a16548c7a127\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://354e6443e672cd37292756a5007c881f94d94c2436ef863c0678759b0488d2c1\",\"dweb:/ipfs/QmQuDQAePWXF3WCzZoXLMVoVPubuskc2fG3DbARs6dGJRn\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x2a67691f431a6e5eeae9012a19c82ceef113b43cd68435911dec83da57b9d407\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29aae0becfbae61a9dd9452f989f58ce843060af89ef5aeb01e7122c4e8b7475\",\"dweb:/ipfs/QmPaGNM5zCMkJKGm2dKrivwEegwfN7kQw9E7RvMgKbxrqj\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x7ec16fe73a675b22572684bfa0f108050eb259cec3110f556f0ae9edb69d7cd6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://810c3948142e0049c7a67b22220c976e266c782de2d2d4ca0a36d9041aaa15a4\",\"dweb:/ipfs/QmTLmHzCQhgdKrTyABwiLRHkKaAZMBi6oMzpAuxkqFnq2G\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x3aa312348f02eb2c6f71dd936583ec09761a5d25e5f7448217e2cd7739f595df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff75375a8b4207936052eb480b280004619ea67e9b6d64c5dcc8b7adc0d67687\",\"dweb:/ipfs/QmeJiGKLGYeS1Yyr8KqySNow3ykHfvwJc9wx5J44s33J1A\"]},\"lib/solady-main/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0xf972ba1ca050015699337f0d83e004ee09634d40a0d2f176bf45e09b3171cca2\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://d1e0e5790b9d376636a66cb8f3119d72e86cbb04e20131bcfdb9967d2a1f9295\",\"dweb:/ipfs/QmfZfoGsfBoTfwCXX6NwFUoXc2EiPf1HiNKGKH783L55oS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "Safe ETH and ERC20 transfer library that gracefully handles missing return values.",
						"version": 1
					}
				}
			},
			"src/_Recommend.sol": {
				"_Recommend": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "_CallerNotEOA",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "_IllegalValue",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "_NoOwner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "_NoTokensToClaim",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "_NotSufficientFund",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "flag",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "version",
									"type": "string"
								}
							],
							"name": "ContractDeploy",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokensClaimed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "TokensSet",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "alreadyClaimed",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "claimTokens",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "isAdmin",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "obtainedAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "recommendAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_value",
									"type": "uint256"
								}
							],
							"name": "rescueETH",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_admin",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_status",
									"type": "bool"
								}
							],
							"name": "setAdmin",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "referrer",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "setClaimableTokens",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_recommendAmount",
									"type": "uint256"
								}
							],
							"name": "setRecommendAmount",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "versions",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"details": "A contract that recommends relevant features.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"claimTokens()": {
								"details": "Has been recorded can claim the corresponding referral reward."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"setClaimableTokens(address,uint256)": {
								"details": "Only bond contracts can set a record of tokens that can be claimed.",
								"params": {
									"amount": "The quantity that can be claimed.",
									"referrer": "The referrer."
								}
							},
							"setRecommendAmount(uint256)": {
								"details": "The referrer's algebra.",
								"params": {
									"_recommendAmount": "The reward is returned to the superior algebra."
								}
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"title": "_Recommend.",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/_Recommend.sol\":405:3093  contract _Recommend is Ownable, ReentrancyGuard {... */\n  mstore(0x40, 0x80)\n    /* \"lib/solady-main/src/utils/ReentrancyGuard.sol\":454:455  1 */\n  0x01\n    /* \"lib/solady-main/src/utils/ReentrancyGuard.sol\":429:455  uint256 private locked = 1 */\n  dup1\n  sstore\n    /* \"src/_Recommend.sol\":796:797  2 */\n  0x02\n    /* \"src/_Recommend.sol\":763:797  uint256 public recommendAmount = 2 */\n  0x05\n  sstore\n    /* \"src/_Recommend.sol\":806:838  string public versions = \"1.0.0\" */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x05\n  dup2\n  mstore\n  0x20\n  add\n  0x312e302e30000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n  0x06\n  swap1\n  dup2\n  tag_1\n  swap2\n  swap1\n  tag_2\n  jump\t// in\ntag_1:\n  pop\n    /* \"src/_Recommend.sol\":1038:1160  constructor() Ownable(msg.sender) {... */\n  callvalue\n  dup1\n  iszero\n  tag_3\n  jumpi\n  0x00\n  dup1\n  revert\ntag_3:\n  pop\n    /* \"src/_Recommend.sol\":1060:1070  msg.sender */\n  caller\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1296:1297  0 */\n  0x00\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1272:1298  initialOwner == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1272:1284  initialOwner */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1272:1298  initialOwner == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1268:1363  if (initialOwner == address(0)) {... */\n  tag_7\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1349:1350  0 */\n  0x00\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1321:1352  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_8\n  swap2\n  swap1\n  tag_9\n  jump\t// in\ntag_8:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1268:1363  if (initialOwner == address(0)) {... */\ntag_7:\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1372:1404  _transferOwnership(initialOwner) */\n  tag_10\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1391:1403  initialOwner */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1372:1390  _transferOwnership */\n  shl(0x20, tag_11)\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1372:1404  _transferOwnership(initialOwner) */\n  0x20\n  shr\n  jump\t// in\ntag_10:\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1224:1411  constructor(address initialOwner) {... */\n  pop\n    /* \"src/_Recommend.sol\":1105:1109  true */\n  0x01\n    /* \"src/_Recommend.sol\":1083:1090  isAdmin */\n  0x04\n    /* \"src/_Recommend.sol\":1083:1102  isAdmin[msg.sender] */\n  0x00\n    /* \"src/_Recommend.sol\":1091:1101  msg.sender */\n  caller\n    /* \"src/_Recommend.sol\":1083:1102  isAdmin[msg.sender] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n  0x00\n    /* \"src/_Recommend.sol\":1083:1109  isAdmin[msg.sender] = true */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  iszero\n  iszero\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"src/_Recommend.sol\":1140:1141  4 */\n  0x04\n    /* \"src/_Recommend.sol\":1125:1152  ContractDeploy(4, versions) */\n  0x7b78ee99b011dff919ff5bd97f8a1b33b444782eb490dd7cd487fc963d63676f\n    /* \"src/_Recommend.sol\":1143:1151  versions */\n  0x06\n    /* \"src/_Recommend.sol\":1125:1152  ContractDeploy(4, versions) */\n  mload(0x40)\n  tag_13\n  swap2\n  swap1\n  tag_14\n  jump\t// in\ntag_13:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log2\n    /* \"src/_Recommend.sol\":405:3093  contract _Recommend is Ownable, ReentrancyGuard {... */\n  jump(tag_15)\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2911:3098  function _transferOwnership(address newOwner) internal virtual {... */\ntag_11:\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2984:3000  address oldOwner */\n  0x00\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3003:3009  _owner */\n  dup1\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2984:3009  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3028:3036  newOwner */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3019:3025  _owner */\n  0x00\n  dup1\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3019:3036  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3082:3090  newOwner */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3051:3091  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3072:3080  oldOwner */\n  dup2\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3051:3091  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2974:3098  {... */\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2911:3098  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7:106   */\ntag_17:\n    /* \"#utility.yul\":59:65   */\n  0x00\n    /* \"#utility.yul\":93:98   */\n  dup2\n    /* \"#utility.yul\":87:99   */\n  mload\n    /* \"#utility.yul\":77:99   */\n  swap1\n  pop\n    /* \"#utility.yul\":7:106   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":112:292   */\ntag_18:\n    /* \"#utility.yul\":160:237   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":157:158   */\n  0x00\n    /* \"#utility.yul\":150:238   */\n  mstore\n    /* \"#utility.yul\":257:261   */\n  0x41\n    /* \"#utility.yul\":254:255   */\n  0x04\n    /* \"#utility.yul\":247:262   */\n  mstore\n    /* \"#utility.yul\":281:285   */\n  0x24\n    /* \"#utility.yul\":278:279   */\n  0x00\n    /* \"#utility.yul\":271:286   */\n  revert\n    /* \"#utility.yul\":298:478   */\ntag_19:\n    /* \"#utility.yul\":346:423   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":343:344   */\n  0x00\n    /* \"#utility.yul\":336:424   */\n  mstore\n    /* \"#utility.yul\":443:447   */\n  0x22\n    /* \"#utility.yul\":440:441   */\n  0x04\n    /* \"#utility.yul\":433:448   */\n  mstore\n    /* \"#utility.yul\":467:471   */\n  0x24\n    /* \"#utility.yul\":464:465   */\n  0x00\n    /* \"#utility.yul\":457:472   */\n  revert\n    /* \"#utility.yul\":484:804   */\ntag_20:\n    /* \"#utility.yul\":528:534   */\n  0x00\n    /* \"#utility.yul\":565:566   */\n  0x02\n    /* \"#utility.yul\":559:563   */\n  dup3\n    /* \"#utility.yul\":555:567   */\n  div\n    /* \"#utility.yul\":545:567   */\n  swap1\n  pop\n    /* \"#utility.yul\":612:613   */\n  0x01\n    /* \"#utility.yul\":606:610   */\n  dup3\n    /* \"#utility.yul\":602:614   */\n  and\n    /* \"#utility.yul\":633:651   */\n  dup1\n    /* \"#utility.yul\":623:704   */\n  tag_47\n  jumpi\n    /* \"#utility.yul\":689:693   */\n  0x7f\n    /* \"#utility.yul\":681:687   */\n  dup3\n    /* \"#utility.yul\":677:694   */\n  and\n    /* \"#utility.yul\":667:694   */\n  swap2\n  pop\n    /* \"#utility.yul\":623:704   */\ntag_47:\n    /* \"#utility.yul\":751:753   */\n  0x20\n    /* \"#utility.yul\":743:749   */\n  dup3\n    /* \"#utility.yul\":740:754   */\n  lt\n    /* \"#utility.yul\":720:738   */\n  dup2\n    /* \"#utility.yul\":717:755   */\n  sub\n    /* \"#utility.yul\":714:798   */\n  tag_48\n  jumpi\n    /* \"#utility.yul\":770:788   */\n  tag_49\n  tag_19\n  jump\t// in\ntag_49:\n    /* \"#utility.yul\":714:798   */\ntag_48:\n    /* \"#utility.yul\":535:804   */\n  pop\n    /* \"#utility.yul\":484:804   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":810:951   */\ntag_21:\n    /* \"#utility.yul\":859:863   */\n  0x00\n    /* \"#utility.yul\":882:885   */\n  dup2\n    /* \"#utility.yul\":874:885   */\n  swap1\n  pop\n    /* \"#utility.yul\":905:908   */\n  dup2\n    /* \"#utility.yul\":902:903   */\n  0x00\n    /* \"#utility.yul\":895:909   */\n  mstore\n    /* \"#utility.yul\":939:943   */\n  0x20\n    /* \"#utility.yul\":936:937   */\n  0x00\n    /* \"#utility.yul\":926:944   */\n  keccak256\n    /* \"#utility.yul\":918:944   */\n  swap1\n  pop\n    /* \"#utility.yul\":810:951   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":957:1050   */\ntag_22:\n    /* \"#utility.yul\":994:1000   */\n  0x00\n    /* \"#utility.yul\":1041:1043   */\n  0x20\n    /* \"#utility.yul\":1036:1038   */\n  0x1f\n    /* \"#utility.yul\":1029:1034   */\n  dup4\n    /* \"#utility.yul\":1025:1039   */\n  add\n    /* \"#utility.yul\":1021:1044   */\n  div\n    /* \"#utility.yul\":1011:1044   */\n  swap1\n  pop\n    /* \"#utility.yul\":957:1050   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1056:1163   */\ntag_23:\n    /* \"#utility.yul\":1100:1108   */\n  0x00\n    /* \"#utility.yul\":1150:1155   */\n  dup3\n    /* \"#utility.yul\":1144:1148   */\n  dup3\n    /* \"#utility.yul\":1140:1156   */\n  shl\n    /* \"#utility.yul\":1119:1156   */\n  swap1\n  pop\n    /* \"#utility.yul\":1056:1163   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1169:1562   */\ntag_24:\n    /* \"#utility.yul\":1238:1244   */\n  0x00\n    /* \"#utility.yul\":1288:1289   */\n  0x08\n    /* \"#utility.yul\":1276:1286   */\n  dup4\n    /* \"#utility.yul\":1272:1290   */\n  mul\n    /* \"#utility.yul\":1311:1408   */\n  tag_54\n    /* \"#utility.yul\":1341:1407   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":1330:1339   */\n  dup3\n    /* \"#utility.yul\":1311:1408   */\n  tag_23\n  jump\t// in\ntag_54:\n    /* \"#utility.yul\":1429:1468   */\n  tag_55\n    /* \"#utility.yul\":1459:1467   */\n  dup7\n    /* \"#utility.yul\":1448:1457   */\n  dup4\n    /* \"#utility.yul\":1429:1468   */\n  tag_23\n  jump\t// in\ntag_55:\n    /* \"#utility.yul\":1417:1468   */\n  swap6\n  pop\n    /* \"#utility.yul\":1501:1505   */\n  dup1\n    /* \"#utility.yul\":1497:1506   */\n  not\n    /* \"#utility.yul\":1490:1495   */\n  dup5\n    /* \"#utility.yul\":1486:1507   */\n  and\n    /* \"#utility.yul\":1477:1507   */\n  swap4\n  pop\n    /* \"#utility.yul\":1550:1554   */\n  dup1\n    /* \"#utility.yul\":1540:1548   */\n  dup7\n    /* \"#utility.yul\":1536:1555   */\n  and\n    /* \"#utility.yul\":1529:1534   */\n  dup5\n    /* \"#utility.yul\":1526:1556   */\n  or\n    /* \"#utility.yul\":1516:1556   */\n  swap3\n  pop\n    /* \"#utility.yul\":1245:1562   */\n  pop\n  pop\n    /* \"#utility.yul\":1169:1562   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1568:1645   */\ntag_25:\n    /* \"#utility.yul\":1605:1612   */\n  0x00\n    /* \"#utility.yul\":1634:1639   */\n  dup2\n    /* \"#utility.yul\":1623:1639   */\n  swap1\n  pop\n    /* \"#utility.yul\":1568:1645   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1651:1711   */\ntag_26:\n    /* \"#utility.yul\":1679:1682   */\n  0x00\n    /* \"#utility.yul\":1700:1705   */\n  dup2\n    /* \"#utility.yul\":1693:1705   */\n  swap1\n  pop\n    /* \"#utility.yul\":1651:1711   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1717:1859   */\ntag_27:\n    /* \"#utility.yul\":1767:1776   */\n  0x00\n    /* \"#utility.yul\":1800:1853   */\n  tag_59\n    /* \"#utility.yul\":1818:1852   */\n  tag_60\n    /* \"#utility.yul\":1827:1851   */\n  tag_61\n    /* \"#utility.yul\":1845:1850   */\n  dup5\n    /* \"#utility.yul\":1827:1851   */\n  tag_25\n  jump\t// in\ntag_61:\n    /* \"#utility.yul\":1818:1852   */\n  tag_26\n  jump\t// in\ntag_60:\n    /* \"#utility.yul\":1800:1853   */\n  tag_25\n  jump\t// in\ntag_59:\n    /* \"#utility.yul\":1787:1853   */\n  swap1\n  pop\n    /* \"#utility.yul\":1717:1859   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1865:1940   */\ntag_28:\n    /* \"#utility.yul\":1908:1911   */\n  0x00\n    /* \"#utility.yul\":1929:1934   */\n  dup2\n    /* \"#utility.yul\":1922:1934   */\n  swap1\n  pop\n    /* \"#utility.yul\":1865:1940   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1946:2215   */\ntag_29:\n    /* \"#utility.yul\":2056:2095   */\n  tag_64\n    /* \"#utility.yul\":2087:2094   */\n  dup4\n    /* \"#utility.yul\":2056:2095   */\n  tag_27\n  jump\t// in\ntag_64:\n    /* \"#utility.yul\":2117:2208   */\n  tag_65\n    /* \"#utility.yul\":2166:2207   */\n  tag_66\n    /* \"#utility.yul\":2190:2206   */\n  dup3\n    /* \"#utility.yul\":2166:2207   */\n  tag_28\n  jump\t// in\ntag_66:\n    /* \"#utility.yul\":2158:2164   */\n  dup5\n    /* \"#utility.yul\":2151:2155   */\n  dup5\n    /* \"#utility.yul\":2145:2156   */\n  sload\n    /* \"#utility.yul\":2117:2208   */\n  tag_24\n  jump\t// in\ntag_65:\n    /* \"#utility.yul\":2111:2115   */\n  dup3\n    /* \"#utility.yul\":2104:2209   */\n  sstore\n    /* \"#utility.yul\":2022:2215   */\n  pop\n    /* \"#utility.yul\":1946:2215   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2221:2294   */\ntag_30:\n    /* \"#utility.yul\":2266:2269   */\n  0x00\n    /* \"#utility.yul\":2221:2294   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":2300:2489   */\ntag_31:\n    /* \"#utility.yul\":2377:2409   */\n  tag_69\n  tag_30\n  jump\t// in\ntag_69:\n    /* \"#utility.yul\":2418:2483   */\n  tag_70\n    /* \"#utility.yul\":2476:2482   */\n  dup2\n    /* \"#utility.yul\":2468:2474   */\n  dup5\n    /* \"#utility.yul\":2462:2466   */\n  dup5\n    /* \"#utility.yul\":2418:2483   */\n  tag_29\n  jump\t// in\ntag_70:\n    /* \"#utility.yul\":2353:2489   */\n  pop\n    /* \"#utility.yul\":2300:2489   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2495:2681   */\ntag_32:\n    /* \"#utility.yul\":2555:2675   */\ntag_72:\n    /* \"#utility.yul\":2572:2575   */\n  dup2\n    /* \"#utility.yul\":2565:2570   */\n  dup2\n    /* \"#utility.yul\":2562:2576   */\n  lt\n    /* \"#utility.yul\":2555:2675   */\n  iszero\n  tag_74\n  jumpi\n    /* \"#utility.yul\":2626:2665   */\n  tag_75\n    /* \"#utility.yul\":2663:2664   */\n  0x00\n    /* \"#utility.yul\":2656:2661   */\n  dup3\n    /* \"#utility.yul\":2626:2665   */\n  tag_31\n  jump\t// in\ntag_75:\n    /* \"#utility.yul\":2599:2600   */\n  0x01\n    /* \"#utility.yul\":2592:2597   */\n  dup2\n    /* \"#utility.yul\":2588:2601   */\n  add\n    /* \"#utility.yul\":2579:2601   */\n  swap1\n  pop\n    /* \"#utility.yul\":2555:2675   */\n  jump(tag_72)\ntag_74:\n    /* \"#utility.yul\":2495:2681   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2687:3230   */\ntag_33:\n    /* \"#utility.yul\":2788:2790   */\n  0x1f\n    /* \"#utility.yul\":2783:2786   */\n  dup3\n    /* \"#utility.yul\":2780:2791   */\n  gt\n    /* \"#utility.yul\":2777:3223   */\n  iszero\n  tag_77\n  jumpi\n    /* \"#utility.yul\":2822:2860   */\n  tag_78\n    /* \"#utility.yul\":2854:2859   */\n  dup2\n    /* \"#utility.yul\":2822:2860   */\n  tag_21\n  jump\t// in\ntag_78:\n    /* \"#utility.yul\":2906:2935   */\n  tag_79\n    /* \"#utility.yul\":2924:2934   */\n  dup5\n    /* \"#utility.yul\":2906:2935   */\n  tag_22\n  jump\t// in\ntag_79:\n    /* \"#utility.yul\":2896:2904   */\n  dup2\n    /* \"#utility.yul\":2892:2936   */\n  add\n    /* \"#utility.yul\":3089:3091   */\n  0x20\n    /* \"#utility.yul\":3077:3087   */\n  dup6\n    /* \"#utility.yul\":3074:3092   */\n  lt\n    /* \"#utility.yul\":3071:3120   */\n  iszero\n  tag_80\n  jumpi\n    /* \"#utility.yul\":3110:3118   */\n  dup2\n    /* \"#utility.yul\":3095:3118   */\n  swap1\n  pop\n    /* \"#utility.yul\":3071:3120   */\ntag_80:\n    /* \"#utility.yul\":3133:3213   */\n  tag_81\n    /* \"#utility.yul\":3189:3211   */\n  tag_82\n    /* \"#utility.yul\":3207:3210   */\n  dup6\n    /* \"#utility.yul\":3189:3211   */\n  tag_22\n  jump\t// in\ntag_82:\n    /* \"#utility.yul\":3179:3187   */\n  dup4\n    /* \"#utility.yul\":3175:3212   */\n  add\n    /* \"#utility.yul\":3162:3173   */\n  dup3\n    /* \"#utility.yul\":3133:3213   */\n  tag_32\n  jump\t// in\ntag_81:\n    /* \"#utility.yul\":2792:3223   */\n  pop\n  pop\n    /* \"#utility.yul\":2777:3223   */\ntag_77:\n    /* \"#utility.yul\":2687:3230   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3236:3353   */\ntag_34:\n    /* \"#utility.yul\":3290:3298   */\n  0x00\n    /* \"#utility.yul\":3340:3345   */\n  dup3\n    /* \"#utility.yul\":3334:3338   */\n  dup3\n    /* \"#utility.yul\":3330:3346   */\n  shr\n    /* \"#utility.yul\":3309:3346   */\n  swap1\n  pop\n    /* \"#utility.yul\":3236:3353   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3359:3528   */\ntag_35:\n    /* \"#utility.yul\":3403:3409   */\n  0x00\n    /* \"#utility.yul\":3436:3487   */\n  tag_85\n    /* \"#utility.yul\":3484:3485   */\n  0x00\n    /* \"#utility.yul\":3480:3486   */\n  not\n    /* \"#utility.yul\":3472:3477   */\n  dup5\n    /* \"#utility.yul\":3469:3470   */\n  0x08\n    /* \"#utility.yul\":3465:3478   */\n  mul\n    /* \"#utility.yul\":3436:3487   */\n  tag_34\n  jump\t// in\ntag_85:\n    /* \"#utility.yul\":3432:3488   */\n  not\n    /* \"#utility.yul\":3517:3521   */\n  dup1\n    /* \"#utility.yul\":3511:3515   */\n  dup4\n    /* \"#utility.yul\":3507:3522   */\n  and\n    /* \"#utility.yul\":3497:3522   */\n  swap2\n  pop\n    /* \"#utility.yul\":3410:3528   */\n  pop\n    /* \"#utility.yul\":3359:3528   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3533:3828   */\ntag_36:\n    /* \"#utility.yul\":3609:3613   */\n  0x00\n    /* \"#utility.yul\":3755:3784   */\n  tag_87\n    /* \"#utility.yul\":3780:3783   */\n  dup4\n    /* \"#utility.yul\":3774:3778   */\n  dup4\n    /* \"#utility.yul\":3755:3784   */\n  tag_35\n  jump\t// in\ntag_87:\n    /* \"#utility.yul\":3747:3784   */\n  swap2\n  pop\n    /* \"#utility.yul\":3817:3820   */\n  dup3\n    /* \"#utility.yul\":3814:3815   */\n  0x02\n    /* \"#utility.yul\":3810:3821   */\n  mul\n    /* \"#utility.yul\":3804:3808   */\n  dup3\n    /* \"#utility.yul\":3801:3822   */\n  or\n    /* \"#utility.yul\":3793:3822   */\n  swap1\n  pop\n    /* \"#utility.yul\":3533:3828   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3833:5228   */\ntag_2:\n    /* \"#utility.yul\":3950:3987   */\n  tag_89\n    /* \"#utility.yul\":3983:3986   */\n  dup3\n    /* \"#utility.yul\":3950:3987   */\n  tag_17\n  jump\t// in\ntag_89:\n    /* \"#utility.yul\":4052:4070   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":4044:4050   */\n  dup2\n    /* \"#utility.yul\":4041:4071   */\n  gt\n    /* \"#utility.yul\":4038:4094   */\n  iszero\n  tag_90\n  jumpi\n    /* \"#utility.yul\":4074:4092   */\n  tag_91\n  tag_18\n  jump\t// in\ntag_91:\n    /* \"#utility.yul\":4038:4094   */\ntag_90:\n    /* \"#utility.yul\":4118:4156   */\n  tag_92\n    /* \"#utility.yul\":4150:4154   */\n  dup3\n    /* \"#utility.yul\":4144:4155   */\n  sload\n    /* \"#utility.yul\":4118:4156   */\n  tag_20\n  jump\t// in\ntag_92:\n    /* \"#utility.yul\":4203:4270   */\n  tag_93\n    /* \"#utility.yul\":4263:4269   */\n  dup3\n    /* \"#utility.yul\":4255:4261   */\n  dup3\n    /* \"#utility.yul\":4249:4253   */\n  dup6\n    /* \"#utility.yul\":4203:4270   */\n  tag_33\n  jump\t// in\ntag_93:\n    /* \"#utility.yul\":4297:4298   */\n  0x00\n    /* \"#utility.yul\":4321:4325   */\n  0x20\n    /* \"#utility.yul\":4308:4325   */\n  swap1\n  pop\n    /* \"#utility.yul\":4353:4355   */\n  0x1f\n    /* \"#utility.yul\":4345:4351   */\n  dup4\n    /* \"#utility.yul\":4342:4356   */\n  gt\n    /* \"#utility.yul\":4370:4371   */\n  0x01\n    /* \"#utility.yul\":4365:4983   */\n  dup2\n  eq\n  tag_95\n  jumpi\n    /* \"#utility.yul\":5027:5028   */\n  0x00\n    /* \"#utility.yul\":5044:5050   */\n  dup5\n    /* \"#utility.yul\":5041:5118   */\n  iszero\n  tag_96\n  jumpi\n    /* \"#utility.yul\":5093:5102   */\n  dup3\n    /* \"#utility.yul\":5088:5091   */\n  dup8\n    /* \"#utility.yul\":5084:5103   */\n  add\n    /* \"#utility.yul\":5078:5104   */\n  mload\n    /* \"#utility.yul\":5069:5104   */\n  swap1\n  pop\n    /* \"#utility.yul\":5041:5118   */\ntag_96:\n    /* \"#utility.yul\":5144:5211   */\n  tag_97\n    /* \"#utility.yul\":5204:5210   */\n  dup6\n    /* \"#utility.yul\":5197:5202   */\n  dup3\n    /* \"#utility.yul\":5144:5211   */\n  tag_36\n  jump\t// in\ntag_97:\n    /* \"#utility.yul\":5138:5142   */\n  dup7\n    /* \"#utility.yul\":5131:5212   */\n  sstore\n    /* \"#utility.yul\":5000:5222   */\n  pop\n    /* \"#utility.yul\":4335:5222   */\n  jump(tag_94)\n    /* \"#utility.yul\":4365:4983   */\ntag_95:\n    /* \"#utility.yul\":4417:4421   */\n  0x1f\n    /* \"#utility.yul\":4413:4422   */\n  not\n    /* \"#utility.yul\":4405:4411   */\n  dup5\n    /* \"#utility.yul\":4401:4423   */\n  and\n    /* \"#utility.yul\":4451:4488   */\n  tag_98\n    /* \"#utility.yul\":4483:4487   */\n  dup7\n    /* \"#utility.yul\":4451:4488   */\n  tag_21\n  jump\t// in\ntag_98:\n    /* \"#utility.yul\":4510:4511   */\n  0x00\n    /* \"#utility.yul\":4524:4732   */\ntag_99:\n    /* \"#utility.yul\":4538:4545   */\n  dup3\n    /* \"#utility.yul\":4535:4536   */\n  dup2\n    /* \"#utility.yul\":4532:4546   */\n  lt\n    /* \"#utility.yul\":4524:4732   */\n  iszero\n  tag_101\n  jumpi\n    /* \"#utility.yul\":4617:4626   */\n  dup5\n    /* \"#utility.yul\":4612:4615   */\n  dup10\n    /* \"#utility.yul\":4608:4627   */\n  add\n    /* \"#utility.yul\":4602:4628   */\n  mload\n    /* \"#utility.yul\":4594:4600   */\n  dup3\n    /* \"#utility.yul\":4587:4629   */\n  sstore\n    /* \"#utility.yul\":4668:4669   */\n  0x01\n    /* \"#utility.yul\":4660:4666   */\n  dup3\n    /* \"#utility.yul\":4656:4670   */\n  add\n    /* \"#utility.yul\":4646:4670   */\n  swap2\n  pop\n    /* \"#utility.yul\":4715:4717   */\n  0x20\n    /* \"#utility.yul\":4704:4713   */\n  dup6\n    /* \"#utility.yul\":4700:4718   */\n  add\n    /* \"#utility.yul\":4687:4718   */\n  swap5\n  pop\n    /* \"#utility.yul\":4561:4565   */\n  0x20\n    /* \"#utility.yul\":4558:4559   */\n  dup2\n    /* \"#utility.yul\":4554:4566   */\n  add\n    /* \"#utility.yul\":4549:4566   */\n  swap1\n  pop\n    /* \"#utility.yul\":4524:4732   */\n  jump(tag_99)\ntag_101:\n    /* \"#utility.yul\":4760:4766   */\n  dup7\n    /* \"#utility.yul\":4751:4758   */\n  dup4\n    /* \"#utility.yul\":4748:4767   */\n  lt\n    /* \"#utility.yul\":4745:4924   */\n  iszero\n  tag_102\n  jumpi\n    /* \"#utility.yul\":4818:4827   */\n  dup5\n    /* \"#utility.yul\":4813:4816   */\n  dup10\n    /* \"#utility.yul\":4809:4828   */\n  add\n    /* \"#utility.yul\":4803:4829   */\n  mload\n    /* \"#utility.yul\":4861:4909   */\n  tag_103\n    /* \"#utility.yul\":4903:4907   */\n  0x1f\n    /* \"#utility.yul\":4895:4901   */\n  dup10\n    /* \"#utility.yul\":4891:4908   */\n  and\n    /* \"#utility.yul\":4880:4889   */\n  dup3\n    /* \"#utility.yul\":4861:4909   */\n  tag_35\n  jump\t// in\ntag_103:\n    /* \"#utility.yul\":4853:4859   */\n  dup4\n    /* \"#utility.yul\":4846:4910   */\n  sstore\n    /* \"#utility.yul\":4768:4924   */\n  pop\n    /* \"#utility.yul\":4745:4924   */\ntag_102:\n    /* \"#utility.yul\":4970:4971   */\n  0x01\n    /* \"#utility.yul\":4966:4967   */\n  0x02\n    /* \"#utility.yul\":4958:4964   */\n  dup9\n    /* \"#utility.yul\":4954:4968   */\n  mul\n    /* \"#utility.yul\":4950:4972   */\n  add\n    /* \"#utility.yul\":4944:4948   */\n  dup9\n    /* \"#utility.yul\":4937:4973   */\n  sstore\n    /* \"#utility.yul\":4372:4983   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":4335:5222   */\ntag_94:\n  pop\n    /* \"#utility.yul\":3925:5228   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":3833:5228   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5234:5360   */\ntag_37:\n    /* \"#utility.yul\":5271:5278   */\n  0x00\n    /* \"#utility.yul\":5311:5353   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":5304:5309   */\n  dup3\n    /* \"#utility.yul\":5300:5354   */\n  and\n    /* \"#utility.yul\":5289:5354   */\n  swap1\n  pop\n    /* \"#utility.yul\":5234:5360   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5366:5462   */\ntag_38:\n    /* \"#utility.yul\":5403:5410   */\n  0x00\n    /* \"#utility.yul\":5432:5456   */\n  tag_106\n    /* \"#utility.yul\":5450:5455   */\n  dup3\n    /* \"#utility.yul\":5432:5456   */\n  tag_37\n  jump\t// in\ntag_106:\n    /* \"#utility.yul\":5421:5456   */\n  swap1\n  pop\n    /* \"#utility.yul\":5366:5462   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5468:5586   */\ntag_39:\n    /* \"#utility.yul\":5555:5579   */\n  tag_108\n    /* \"#utility.yul\":5573:5578   */\n  dup2\n    /* \"#utility.yul\":5555:5579   */\n  tag_38\n  jump\t// in\ntag_108:\n    /* \"#utility.yul\":5550:5553   */\n  dup3\n    /* \"#utility.yul\":5543:5580   */\n  mstore\n    /* \"#utility.yul\":5468:5586   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5592:5814   */\ntag_9:\n    /* \"#utility.yul\":5685:5689   */\n  0x00\n    /* \"#utility.yul\":5723:5725   */\n  0x20\n    /* \"#utility.yul\":5712:5721   */\n  dup3\n    /* \"#utility.yul\":5708:5726   */\n  add\n    /* \"#utility.yul\":5700:5726   */\n  swap1\n  pop\n    /* \"#utility.yul\":5736:5807   */\n  tag_110\n    /* \"#utility.yul\":5804:5805   */\n  0x00\n    /* \"#utility.yul\":5793:5802   */\n  dup4\n    /* \"#utility.yul\":5789:5806   */\n  add\n    /* \"#utility.yul\":5780:5786   */\n  dup5\n    /* \"#utility.yul\":5736:5807   */\n  tag_39\n  jump\t// in\ntag_110:\n    /* \"#utility.yul\":5592:5814   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5820:5989   */\ntag_40:\n    /* \"#utility.yul\":5904:5915   */\n  0x00\n    /* \"#utility.yul\":5938:5944   */\n  dup3\n    /* \"#utility.yul\":5933:5936   */\n  dup3\n    /* \"#utility.yul\":5926:5945   */\n  mstore\n    /* \"#utility.yul\":5978:5982   */\n  0x20\n    /* \"#utility.yul\":5973:5976   */\n  dup3\n    /* \"#utility.yul\":5969:5983   */\n  add\n    /* \"#utility.yul\":5954:5983   */\n  swap1\n  pop\n    /* \"#utility.yul\":5820:5989   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6019:6850   */\ntag_41:\n    /* \"#utility.yul\":6104:6107   */\n  0x00\n    /* \"#utility.yul\":6141:6146   */\n  dup2\n    /* \"#utility.yul\":6135:6147   */\n  sload\n    /* \"#utility.yul\":6170:6206   */\n  tag_113\n    /* \"#utility.yul\":6196:6205   */\n  dup2\n    /* \"#utility.yul\":6170:6206   */\n  tag_20\n  jump\t// in\ntag_113:\n    /* \"#utility.yul\":6222:6293   */\n  tag_114\n    /* \"#utility.yul\":6286:6292   */\n  dup2\n    /* \"#utility.yul\":6281:6284   */\n  dup7\n    /* \"#utility.yul\":6222:6293   */\n  tag_40\n  jump\t// in\ntag_114:\n    /* \"#utility.yul\":6215:6293   */\n  swap5\n  pop\n    /* \"#utility.yul\":6324:6325   */\n  0x01\n    /* \"#utility.yul\":6313:6322   */\n  dup3\n    /* \"#utility.yul\":6309:6326   */\n  and\n    /* \"#utility.yul\":6340:6341   */\n  0x00\n    /* \"#utility.yul\":6335:6499   */\n  dup2\n  eq\n  tag_116\n  jumpi\n    /* \"#utility.yul\":6513:6514   */\n  0x01\n    /* \"#utility.yul\":6508:6844   */\n  dup2\n  eq\n  tag_117\n  jumpi\n    /* \"#utility.yul\":6302:6844   */\n  jump(tag_115)\n    /* \"#utility.yul\":6335:6499   */\ntag_116:\n    /* \"#utility.yul\":6419:6423   */\n  0xff\n    /* \"#utility.yul\":6415:6424   */\n  not\n    /* \"#utility.yul\":6404:6413   */\n  dup4\n    /* \"#utility.yul\":6400:6425   */\n  and\n    /* \"#utility.yul\":6395:6398   */\n  dup7\n    /* \"#utility.yul\":6388:6426   */\n  mstore\n    /* \"#utility.yul\":6479:6485   */\n  dup2\n    /* \"#utility.yul\":6472:6486   */\n  iszero\n    /* \"#utility.yul\":6465:6487   */\n  iszero\n    /* \"#utility.yul\":6459:6463   */\n  0x20\n    /* \"#utility.yul\":6455:6488   */\n  mul\n    /* \"#utility.yul\":6450:6453   */\n  dup7\n    /* \"#utility.yul\":6446:6489   */\n  add\n    /* \"#utility.yul\":6439:6489   */\n  swap4\n  pop\n    /* \"#utility.yul\":6335:6499   */\n  jump(tag_115)\n    /* \"#utility.yul\":6508:6844   */\ntag_117:\n    /* \"#utility.yul\":6575:6613   */\n  tag_118\n    /* \"#utility.yul\":6607:6612   */\n  dup6\n    /* \"#utility.yul\":6575:6613   */\n  tag_21\n  jump\t// in\ntag_118:\n    /* \"#utility.yul\":6635:6636   */\n  0x00\n    /* \"#utility.yul\":6649:6803   */\ntag_119:\n    /* \"#utility.yul\":6663:6669   */\n  dup4\n    /* \"#utility.yul\":6660:6661   */\n  dup2\n    /* \"#utility.yul\":6657:6670   */\n  lt\n    /* \"#utility.yul\":6649:6803   */\n  iszero\n  tag_121\n  jumpi\n    /* \"#utility.yul\":6737:6744   */\n  dup2\n    /* \"#utility.yul\":6731:6745   */\n  sload\n    /* \"#utility.yul\":6727:6728   */\n  dup2\n    /* \"#utility.yul\":6722:6725   */\n  dup10\n    /* \"#utility.yul\":6718:6729   */\n  add\n    /* \"#utility.yul\":6711:6746   */\n  mstore\n    /* \"#utility.yul\":6787:6788   */\n  0x01\n    /* \"#utility.yul\":6778:6785   */\n  dup3\n    /* \"#utility.yul\":6774:6789   */\n  add\n    /* \"#utility.yul\":6763:6789   */\n  swap2\n  pop\n    /* \"#utility.yul\":6685:6689   */\n  0x20\n    /* \"#utility.yul\":6682:6683   */\n  dup2\n    /* \"#utility.yul\":6678:6690   */\n  add\n    /* \"#utility.yul\":6673:6690   */\n  swap1\n  pop\n    /* \"#utility.yul\":6649:6803   */\n  jump(tag_119)\ntag_121:\n    /* \"#utility.yul\":6832:6833   */\n  dup1\n    /* \"#utility.yul\":6827:6830   */\n  dup9\n    /* \"#utility.yul\":6823:6834   */\n  add\n    /* \"#utility.yul\":6816:6834   */\n  swap6\n  pop\n    /* \"#utility.yul\":6515:6844   */\n  pop\n  pop\n    /* \"#utility.yul\":6302:6844   */\ntag_115:\n  pop\n    /* \"#utility.yul\":6108:6850   */\n  pop\n  pop\n    /* \"#utility.yul\":6019:6850   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6856:7163   */\ntag_14:\n    /* \"#utility.yul\":6966:6970   */\n  0x00\n    /* \"#utility.yul\":7004:7006   */\n  0x20\n    /* \"#utility.yul\":6993:7002   */\n  dup3\n    /* \"#utility.yul\":6989:7007   */\n  add\n    /* \"#utility.yul\":6981:7007   */\n  swap1\n  pop\n    /* \"#utility.yul\":7053:7062   */\n  dup2\n    /* \"#utility.yul\":7047:7051   */\n  dup2\n    /* \"#utility.yul\":7043:7063   */\n  sub\n    /* \"#utility.yul\":7039:7040   */\n  0x00\n    /* \"#utility.yul\":7028:7037   */\n  dup4\n    /* \"#utility.yul\":7024:7041   */\n  add\n    /* \"#utility.yul\":7017:7064   */\n  mstore\n    /* \"#utility.yul\":7081:7156   */\n  tag_123\n    /* \"#utility.yul\":7151:7155   */\n  dup2\n    /* \"#utility.yul\":7142:7148   */\n  dup5\n    /* \"#utility.yul\":7081:7156   */\n  tag_41\n  jump\t// in\ntag_123:\n    /* \"#utility.yul\":7073:7156   */\n  swap1\n  pop\n    /* \"#utility.yul\":6856:7163   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"src/_Recommend.sol\":405:3093  contract _Recommend is Ownable, ReentrancyGuard {... */\ntag_15:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/_Recommend.sol\":405:3093  contract _Recommend is Ownable, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8da5cb5b\n      gt\n      tag_16\n      jumpi\n      dup1\n      0xe44cec7c\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xe44cec7c\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xf54b893b\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xf8b1cb3c\n      eq\n      tag_15\n      jumpi\n      jump(tag_2)\n    tag_17:\n      dup1\n      0x8da5cb5b\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xb43e6a53\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xdf0f0951\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_16:\n      dup1\n      0x099a04e5\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x24d7806c\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x30710d04\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x48c54b9d\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x4b0bddd2\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_8\n      jumpi\n      jump(tag_2)\n    tag_1:\n      jumpi(tag_2, calldatasize)\n      stop\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"src/_Recommend.sol\":1606:1781  function rescueETH(address _to, uint256 _value) external {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      pop\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n      tag_24\n      jump\t// in\n    tag_21:\n      stop\n        /* \"src/_Recommend.sol\":717:756  mapping(address => bool) public isAdmin */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      pop\n      tag_26\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      tag_29\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/_Recommend.sol\":1924:2050  function setRecommendAmount(uint256 _recommendAmount) external onlyOwner {... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      pop\n      tag_33\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_34\n      swap2\n      swap1\n      tag_35\n      jump\t// in\n    tag_34:\n      tag_36\n      jump\t// in\n    tag_33:\n      stop\n        /* \"src/_Recommend.sol\":2603:3090  function claimTokens() external nonReentrant {... */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_37\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_37:\n      pop\n      tag_38\n      tag_39\n      jump\t// in\n    tag_38:\n      stop\n        /* \"src/_Recommend.sol\":1442:1598  function setAdmin(address _admin, bool _status) external {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_40\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_40:\n      pop\n      tag_41\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_42\n      swap2\n      swap1\n      tag_43\n      jump\t// in\n    tag_42:\n      tag_44\n      jump\t// in\n    tag_41:\n      stop\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2292:2393  function renounceOwnership() public virtual onlyOwner {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_45\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_45:\n      pop\n      tag_46\n      tag_47\n      jump\t// in\n    tag_46:\n      stop\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1637:1722  function owner() public view virtual returns (address) {... */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_48\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_48:\n      pop\n      tag_49\n      tag_50\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      tag_51\n      swap2\n      swap1\n      tag_52\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/_Recommend.sol\":2251:2501  function setClaimableTokens(address referrer, uint256 amount) external payable {... */\n    tag_10:\n      tag_53\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_54\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_54:\n      tag_55\n      jump\t// in\n    tag_53:\n      stop\n        /* \"src/_Recommend.sol\":605:654  mapping(address => uint256) public obtainedAmount */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_56\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_56:\n      pop\n      tag_57\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_58\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_58:\n      tag_59\n      jump\t// in\n    tag_57:\n      mload(0x40)\n      tag_60\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_60:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/_Recommend.sol\":763:797  uint256 public recommendAmount = 2 */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_62\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_62:\n      pop\n      tag_63\n      tag_64\n      jump\t// in\n    tag_63:\n      mload(0x40)\n      tag_65\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_65:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2542:2757  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_66\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_66:\n      pop\n      tag_67\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_68\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_68:\n      tag_69\n      jump\t// in\n    tag_67:\n      stop\n        /* \"src/_Recommend.sol\":661:710  mapping(address => uint256) public alreadyClaimed */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_70\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_70:\n      pop\n      tag_71\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_72\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_72:\n      tag_73\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      tag_74\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_74:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/_Recommend.sol\":806:838  string public versions = \"1.0.0\" */\n    tag_15:\n      callvalue\n      dup1\n      iszero\n      tag_75\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_75:\n      pop\n      tag_76\n      tag_77\n      jump\t// in\n    tag_76:\n      mload(0x40)\n      tag_78\n      swap2\n      swap1\n      tag_79\n      jump\t// in\n    tag_78:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/_Recommend.sol\":1606:1781  function rescueETH(address _to, uint256 _value) external {... */\n    tag_24:\n        /* \"src/_Recommend.sol\":1692:1699  owner() */\n      tag_81\n        /* \"src/_Recommend.sol\":1692:1697  owner */\n      tag_50\n        /* \"src/_Recommend.sol\":1692:1699  owner() */\n      jump\t// in\n    tag_81:\n        /* \"src/_Recommend.sol\":1678:1699  msg.sender != owner() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/_Recommend.sol\":1678:1688  msg.sender */\n      caller\n        /* \"src/_Recommend.sol\":1678:1699  msg.sender != owner() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"src/_Recommend.sol\":1674:1718  if (msg.sender != owner()) revert _NoOwner() */\n      tag_82\n      jumpi\n        /* \"src/_Recommend.sol\":1708:1718  _NoOwner() */\n      mload(0x40)\n      0xad9cd75900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/_Recommend.sol\":1674:1718  if (msg.sender != owner()) revert _NoOwner() */\n    tag_82:\n        /* \"src/_Recommend.sol\":1729:1773  SafeTransferLib.safeTransferETH(_to, _value) */\n      tag_83\n        /* \"src/_Recommend.sol\":1761:1764  _to */\n      dup3\n        /* \"src/_Recommend.sol\":1766:1772  _value */\n      dup3\n        /* \"src/_Recommend.sol\":1729:1760  SafeTransferLib.safeTransferETH */\n      tag_84\n        /* \"src/_Recommend.sol\":1729:1773  SafeTransferLib.safeTransferETH(_to, _value) */\n      jump\t// in\n    tag_83:\n        /* \"src/_Recommend.sol\":1606:1781  function rescueETH(address _to, uint256 _value) external {... */\n      pop\n      pop\n      jump\t// out\n        /* \"src/_Recommend.sol\":717:756  mapping(address => bool) public isAdmin */\n    tag_29:\n      mstore(0x20, 0x04)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"src/_Recommend.sol\":1924:2050  function setRecommendAmount(uint256 _recommendAmount) external onlyOwner {... */\n    tag_36:\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1530:1543  _checkOwner() */\n      tag_86\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1530:1541  _checkOwner */\n      tag_87\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1530:1543  _checkOwner() */\n      jump\t// in\n    tag_86:\n        /* \"src/_Recommend.sol\":2026:2042  _recommendAmount */\n      dup1\n        /* \"src/_Recommend.sol\":2008:2023  recommendAmount */\n      0x05\n        /* \"src/_Recommend.sol\":2008:2042  recommendAmount = _recommendAmount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"src/_Recommend.sol\":1924:2050  function setRecommendAmount(uint256 _recommendAmount) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"src/_Recommend.sol\":2603:3090  function claimTokens() external nonReentrant {... */\n    tag_39:\n        /* \"lib/solady-main/src/utils/ReentrancyGuard.sol\":522:523  1 */\n      0x01\n        /* \"lib/solady-main/src/utils/ReentrancyGuard.sol\":512:518  locked */\n      dup1\n      sload\n        /* \"lib/solady-main/src/utils/ReentrancyGuard.sol\":512:523  locked == 1 */\n      eq\n        /* \"lib/solady-main/src/utils/ReentrancyGuard.sol\":504:538  require(locked == 1, \"REENTRANCY\") */\n      tag_90\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_91\n      swap1\n      tag_92\n      jump\t// in\n    tag_91:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_90:\n        /* \"lib/solady-main/src/utils/ReentrancyGuard.sol\":558:559  2 */\n      0x02\n        /* \"lib/solady-main/src/utils/ReentrancyGuard.sol\":549:555  locked */\n      0x01\n        /* \"lib/solady-main/src/utils/ReentrancyGuard.sol\":549:559  locked = 2 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"src/_Recommend.sol\":2676:2686  msg.sender */\n      caller\n        /* \"src/_Recommend.sol\":2663:2686  tx.origin != msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/_Recommend.sol\":2663:2672  tx.origin */\n      origin\n        /* \"src/_Recommend.sol\":2663:2686  tx.origin != msg.sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"src/_Recommend.sol\":2659:2710  if (tx.origin != msg.sender) revert _CallerNotEOA() */\n      tag_94\n      jumpi\n        /* \"src/_Recommend.sol\":2695:2710  _CallerNotEOA() */\n      mload(0x40)\n      0x3691d20a00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/_Recommend.sol\":2659:2710  if (tx.origin != msg.sender) revert _CallerNotEOA() */\n    tag_94:\n        /* \"src/_Recommend.sol\":2721:2735  uint256 amount */\n      0x00\n        /* \"src/_Recommend.sol\":2767:2781  alreadyClaimed */\n      0x03\n        /* \"src/_Recommend.sol\":2767:2793  alreadyClaimed[msg.sender] */\n      0x00\n        /* \"src/_Recommend.sol\":2782:2792  msg.sender */\n      caller\n        /* \"src/_Recommend.sol\":2767:2793  alreadyClaimed[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"src/_Recommend.sol\":2738:2752  obtainedAmount */\n      0x02\n        /* \"src/_Recommend.sol\":2738:2764  obtainedAmount[msg.sender] */\n      0x00\n        /* \"src/_Recommend.sol\":2753:2763  msg.sender */\n      caller\n        /* \"src/_Recommend.sol\":2738:2764  obtainedAmount[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"src/_Recommend.sol\":2738:2793  obtainedAmount[msg.sender] - alreadyClaimed[msg.sender] */\n      tag_95\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_95:\n        /* \"src/_Recommend.sol\":2721:2793  uint256 amount = obtainedAmount[msg.sender] - alreadyClaimed[msg.sender] */\n      swap1\n      pop\n        /* \"src/_Recommend.sol\":2818:2819  0 */\n      0x00\n        /* \"src/_Recommend.sol\":2808:2814  amount */\n      dup2\n        /* \"src/_Recommend.sol\":2808:2819  amount <= 0 */\n      gt\n        /* \"src/_Recommend.sol\":2804:2846  if (amount <= 0) revert _NoTokensToClaim() */\n      tag_97\n      jumpi\n        /* \"src/_Recommend.sol\":2828:2846  _NoTokensToClaim() */\n      mload(0x40)\n      0x6f9c7fcf00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/_Recommend.sol\":2804:2846  if (amount <= 0) revert _NoTokensToClaim() */\n    tag_97:\n        /* \"src/_Recommend.sol\":2885:2891  amount */\n      dup1\n        /* \"src/_Recommend.sol\":2861:2882  address(this).balance */\n      selfbalance\n        /* \"src/_Recommend.sol\":2861:2891  address(this).balance < amount */\n      lt\n        /* \"src/_Recommend.sol\":2857:2920  if (address(this).balance < amount) revert _NotSufficientFund() */\n      iszero\n      tag_98\n      jumpi\n        /* \"src/_Recommend.sol\":2900:2920  _NotSufficientFund() */\n      mload(0x40)\n      0xabf01a0800000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/_Recommend.sol\":2857:2920  if (address(this).balance < amount) revert _NotSufficientFund() */\n    tag_98:\n        /* \"src/_Recommend.sol\":2963:2969  amount */\n      dup1\n        /* \"src/_Recommend.sol\":2933:2947  alreadyClaimed */\n      0x03\n        /* \"src/_Recommend.sol\":2933:2959  alreadyClaimed[msg.sender] */\n      0x00\n        /* \"src/_Recommend.sol\":2948:2958  msg.sender */\n      caller\n        /* \"src/_Recommend.sol\":2933:2959  alreadyClaimed[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"src/_Recommend.sol\":2933:2969  alreadyClaimed[msg.sender] += amount */\n      dup3\n      dup3\n      sload\n      tag_99\n      swap2\n      swap1\n      tag_100\n      jump\t// in\n    tag_99:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"src/_Recommend.sol\":2980:3031  SafeTransferLib.safeTransferETH(msg.sender, amount) */\n      tag_101\n        /* \"src/_Recommend.sol\":3012:3022  msg.sender */\n      caller\n        /* \"src/_Recommend.sol\":3024:3030  amount */\n      dup3\n        /* \"src/_Recommend.sol\":2980:3011  SafeTransferLib.safeTransferETH */\n      tag_84\n        /* \"src/_Recommend.sol\":2980:3031  SafeTransferLib.safeTransferETH(msg.sender, amount) */\n      jump\t// in\n    tag_101:\n        /* \"src/_Recommend.sol\":3063:3073  msg.sender */\n      caller\n        /* \"src/_Recommend.sol\":3049:3082  TokensClaimed(msg.sender, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e430\n        /* \"src/_Recommend.sol\":3075:3081  amount */\n      dup3\n        /* \"src/_Recommend.sol\":3049:3082  TokensClaimed(msg.sender, amount) */\n      mload(0x40)\n      tag_102\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_102:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"src/_Recommend.sol\":2648:3090  {... */\n      pop\n        /* \"lib/solady-main/src/utils/ReentrancyGuard.sol\":591:592  1 */\n      0x01\n        /* \"lib/solady-main/src/utils/ReentrancyGuard.sol\":582:588  locked */\n      dup1\n        /* \"lib/solady-main/src/utils/ReentrancyGuard.sol\":582:592  locked = 1 */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"src/_Recommend.sol\":2603:3090  function claimTokens() external nonReentrant {... */\n      jump\t// out\n        /* \"src/_Recommend.sol\":1442:1598  function setAdmin(address _admin, bool _status) external {... */\n    tag_44:\n        /* \"src/_Recommend.sol\":1528:1535  owner() */\n      tag_104\n        /* \"src/_Recommend.sol\":1528:1533  owner */\n      tag_50\n        /* \"src/_Recommend.sol\":1528:1535  owner() */\n      jump\t// in\n    tag_104:\n        /* \"src/_Recommend.sol\":1514:1535  msg.sender != owner() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/_Recommend.sol\":1514:1524  msg.sender */\n      caller\n        /* \"src/_Recommend.sol\":1514:1535  msg.sender != owner() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"src/_Recommend.sol\":1510:1554  if (msg.sender != owner()) revert _NoOwner() */\n      tag_105\n      jumpi\n        /* \"src/_Recommend.sol\":1544:1554  _NoOwner() */\n      mload(0x40)\n      0xad9cd75900000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/_Recommend.sol\":1510:1554  if (msg.sender != owner()) revert _NoOwner() */\n    tag_105:\n        /* \"src/_Recommend.sol\":1583:1590  _status */\n      dup1\n        /* \"src/_Recommend.sol\":1565:1572  isAdmin */\n      0x04\n        /* \"src/_Recommend.sol\":1565:1580  isAdmin[_admin] */\n      0x00\n        /* \"src/_Recommend.sol\":1573:1579  _admin */\n      dup5\n        /* \"src/_Recommend.sol\":1565:1580  isAdmin[_admin] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"src/_Recommend.sol\":1565:1590  isAdmin[_admin] = _status */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"src/_Recommend.sol\":1442:1598  function setAdmin(address _admin, bool _status) external {... */\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2292:2393  function renounceOwnership() public virtual onlyOwner {... */\n    tag_47:\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1530:1543  _checkOwner() */\n      tag_107\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1530:1541  _checkOwner */\n      tag_87\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1530:1543  _checkOwner() */\n      jump\t// in\n    tag_107:\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2356:2386  _transferOwnership(address(0)) */\n      tag_109\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2383:2384  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2356:2374  _transferOwnership */\n      tag_110\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2356:2386  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_109:\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2292:2393  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1637:1722  function owner() public view virtual returns (address) {... */\n    tag_50:\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1683:1690  address */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1709:1715  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1702:1715  return _owner */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1637:1722  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"src/_Recommend.sol\":2251:2501  function setClaimableTokens(address referrer, uint256 amount) external payable {... */\n    tag_55:\n        /* \"src/_Recommend.sol\":2358:2364  amount */\n      dup1\n        /* \"src/_Recommend.sol\":2345:2354  msg.value */\n      callvalue\n        /* \"src/_Recommend.sol\":2345:2364  msg.value != amount */\n      eq\n      iszero\n        /* \"src/_Recommend.sol\":2345:2379  msg.value != amount || amount == 0 */\n      dup1\n      tag_113\n      jumpi\n      pop\n        /* \"src/_Recommend.sol\":2378:2379  0 */\n      0x00\n        /* \"src/_Recommend.sol\":2368:2374  amount */\n      dup2\n        /* \"src/_Recommend.sol\":2368:2379  amount == 0 */\n      eq\n        /* \"src/_Recommend.sol\":2345:2379  msg.value != amount || amount == 0 */\n    tag_113:\n        /* \"src/_Recommend.sol\":2341:2403  if (msg.value != amount || amount == 0) revert _IllegalValue() */\n      iszero\n      tag_114\n      jumpi\n        /* \"src/_Recommend.sol\":2388:2403  _IllegalValue() */\n      mload(0x40)\n      0x2a2bb09200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/_Recommend.sol\":2341:2403  if (msg.value != amount || amount == 0) revert _IllegalValue() */\n    tag_114:\n        /* \"src/_Recommend.sol\":2442:2448  amount */\n      dup1\n        /* \"src/_Recommend.sol\":2414:2428  obtainedAmount */\n      0x02\n        /* \"src/_Recommend.sol\":2414:2438  obtainedAmount[referrer] */\n      0x00\n        /* \"src/_Recommend.sol\":2429:2437  referrer */\n      dup5\n        /* \"src/_Recommend.sol\":2414:2438  obtainedAmount[referrer] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"src/_Recommend.sol\":2414:2448  obtainedAmount[referrer] += amount */\n      dup3\n      dup3\n      sload\n      tag_115\n      swap2\n      swap1\n      tag_100\n      jump\t// in\n    tag_115:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"src/_Recommend.sol\":2476:2484  referrer */\n      dup2\n        /* \"src/_Recommend.sol\":2466:2493  TokensSet(referrer, amount) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xf3cbbad58a635fe73557a2824874af183b5ac83978ae25d57ea4a2011c4df859\n        /* \"src/_Recommend.sol\":2486:2492  amount */\n      dup3\n        /* \"src/_Recommend.sol\":2466:2493  TokensSet(referrer, amount) */\n      mload(0x40)\n      tag_116\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_116:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"src/_Recommend.sol\":2251:2501  function setClaimableTokens(address referrer, uint256 amount) external payable {... */\n      pop\n      pop\n      jump\t// out\n        /* \"src/_Recommend.sol\":605:654  mapping(address => uint256) public obtainedAmount */\n    tag_59:\n      mstore(0x20, 0x02)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"src/_Recommend.sol\":763:797  uint256 public recommendAmount = 2 */\n    tag_64:\n      sload(0x05)\n      dup2\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2542:2757  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_69:\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1530:1543  _checkOwner() */\n      tag_118\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1530:1541  _checkOwner */\n      tag_87\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":1530:1543  _checkOwner() */\n      jump\t// in\n    tag_118:\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2646:2647  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2626:2648  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2626:2634  newOwner */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2626:2648  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2622:2713  if (newOwner == address(0)) {... */\n      tag_120\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2699:2700  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2671:2702  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_121\n      swap2\n      swap1\n      tag_52\n      jump\t// in\n    tag_121:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2622:2713  if (newOwner == address(0)) {... */\n    tag_120:\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2722:2750  _transferOwnership(newOwner) */\n      tag_122\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2741:2749  newOwner */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2722:2740  _transferOwnership */\n      tag_110\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2722:2750  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_122:\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2542:2757  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"src/_Recommend.sol\":661:710  mapping(address => uint256) public alreadyClaimed */\n    tag_73:\n      mstore(0x20, 0x03)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"src/_Recommend.sol\":806:838  string public versions = \"1.0.0\" */\n    tag_77:\n      0x06\n      dup1\n      sload\n      tag_123\n      swap1\n      tag_124\n      jump\t// in\n    tag_123:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_125\n      swap1\n      tag_124\n      jump\t// in\n    tag_125:\n      dup1\n      iszero\n      tag_126\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_127\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_126)\n    tag_127:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_128:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_128\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_126:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      jump\t// out\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":840:1179  function safeTransferETH(address to, uint256 amount) internal {... */\n    tag_84:\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":912:924  bool success */\n      0x00\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":1111:1112  0 */\n      dup1\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":1108:1109  0 */\n      0x00\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":1105:1106  0 */\n      dup1\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":1102:1103  0 */\n      0x00\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":1094:1100  amount */\n      dup6\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":1090:1092  to */\n      dup8\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":1083:1088  gas() */\n      gas\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":1078:1113  call(gas(), to, amount, 0, 0, 0, 0) */\n      call\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":1067:1113  success := call(gas(), to, amount, 0, 0, 0, 0) */\n      swap1\n      pop\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":1141:1148  success */\n      dup1\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":1133:1172  require(success, \"ETH_TRANSFER_FAILED\") */\n      tag_130\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_131\n      swap1\n      tag_132\n      jump\t// in\n    tag_131:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_130:\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":902:1179  {... */\n      pop\n        /* \"lib/solady-main/src/utils/SafeTransferLib.sol\":840:1179  function safeTransferETH(address to, uint256 amount) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"src/_Recommend.sol\":1205:1434  function _checkOwner() internal view virtual override {... */\n    tag_87:\n        /* \"src/_Recommend.sol\":1270:1284  address sender */\n      0x00\n        /* \"src/_Recommend.sol\":1287:1299  _msgSender() */\n      tag_134\n        /* \"src/_Recommend.sol\":1287:1297  _msgSender */\n      tag_135\n        /* \"src/_Recommend.sol\":1287:1299  _msgSender() */\n      jump\t// in\n    tag_134:\n        /* \"src/_Recommend.sol\":1270:1299  address sender = _msgSender() */\n      swap1\n      pop\n        /* \"src/_Recommend.sol\":1325:1331  sender */\n      dup1\n        /* \"src/_Recommend.sol\":1314:1331  owner() != sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"src/_Recommend.sol\":1314:1321  owner() */\n      tag_136\n        /* \"src/_Recommend.sol\":1314:1319  owner */\n      tag_50\n        /* \"src/_Recommend.sol\":1314:1321  owner() */\n      jump\t// in\n    tag_136:\n        /* \"src/_Recommend.sol\":1314:1331  owner() != sender */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"src/_Recommend.sol\":1314:1351  owner() != sender && !isAdmin[sender] */\n      dup1\n      iszero\n      tag_137\n      jumpi\n      pop\n        /* \"src/_Recommend.sol\":1336:1343  isAdmin */\n      0x04\n        /* \"src/_Recommend.sol\":1336:1351  isAdmin[sender] */\n      0x00\n        /* \"src/_Recommend.sol\":1344:1350  sender */\n      dup3\n        /* \"src/_Recommend.sol\":1336:1351  isAdmin[sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"src/_Recommend.sol\":1335:1351  !isAdmin[sender] */\n      iszero\n        /* \"src/_Recommend.sol\":1314:1351  owner() != sender && !isAdmin[sender] */\n    tag_137:\n        /* \"src/_Recommend.sol\":1310:1427  if (owner() != sender && !isAdmin[sender]) {... */\n      iszero\n      tag_138\n      jumpi\n        /* \"src/_Recommend.sol\":1402:1414  _msgSender() */\n      tag_139\n        /* \"src/_Recommend.sol\":1402:1412  _msgSender */\n      tag_135\n        /* \"src/_Recommend.sol\":1402:1414  _msgSender() */\n      jump\t// in\n    tag_139:\n        /* \"src/_Recommend.sol\":1375:1415  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      0x118cdaa700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_140\n      swap2\n      swap1\n      tag_52\n      jump\t// in\n    tag_140:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"src/_Recommend.sol\":1310:1427  if (owner() != sender && !isAdmin[sender]) {... */\n    tag_138:\n        /* \"src/_Recommend.sol\":1259:1434  {... */\n      pop\n        /* \"src/_Recommend.sol\":1205:1434  function _checkOwner() internal view virtual override {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2911:3098  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_110:\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2984:3000  address oldOwner */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3003:3009  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2984:3009  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3028:3036  newOwner */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3019:3025  _owner */\n      0x00\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3019:3036  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3082:3090  newOwner */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3051:3091  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3072:3080  oldOwner */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":3051:3091  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2974:3098  {... */\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":2911:3098  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/Context.sol\":655:751  function _msgSender() internal view virtual returns (address) {... */\n    tag_135:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Context.sol\":708:715  address */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/Context.sol\":734:744  msg.sender */\n      caller\n        /* \"lib/openzeppelin-contracts/contracts/utils/Context.sol\":727:744  return msg.sender */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/Context.sol\":655:751  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_144:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":334:460   */\n    tag_146:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":411:453   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":404:409   */\n      dup3\n        /* \"#utility.yul\":400:454   */\n      and\n        /* \"#utility.yul\":389:454   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:460   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":466:562   */\n    tag_147:\n        /* \"#utility.yul\":503:510   */\n      0x00\n        /* \"#utility.yul\":532:556   */\n      tag_176\n        /* \"#utility.yul\":550:555   */\n      dup3\n        /* \"#utility.yul\":532:556   */\n      tag_146\n      jump\t// in\n    tag_176:\n        /* \"#utility.yul\":521:556   */\n      swap1\n      pop\n        /* \"#utility.yul\":466:562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:690   */\n    tag_148:\n        /* \"#utility.yul\":641:665   */\n      tag_178\n        /* \"#utility.yul\":659:664   */\n      dup2\n        /* \"#utility.yul\":641:665   */\n      tag_147\n      jump\t// in\n    tag_178:\n        /* \"#utility.yul\":634:639   */\n      dup2\n        /* \"#utility.yul\":631:666   */\n      eq\n        /* \"#utility.yul\":621:684   */\n      tag_179\n      jumpi\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":677:678   */\n      dup1\n        /* \"#utility.yul\":670:682   */\n      revert\n        /* \"#utility.yul\":621:684   */\n    tag_179:\n        /* \"#utility.yul\":568:690   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":696:835   */\n    tag_149:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":780:786   */\n      dup2\n        /* \"#utility.yul\":767:787   */\n      calldataload\n        /* \"#utility.yul\":758:787   */\n      swap1\n      pop\n        /* \"#utility.yul\":796:829   */\n      tag_181\n        /* \"#utility.yul\":823:828   */\n      dup2\n        /* \"#utility.yul\":796:829   */\n      tag_148\n      jump\t// in\n    tag_181:\n        /* \"#utility.yul\":696:835   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":841:918   */\n    tag_150:\n        /* \"#utility.yul\":878:885   */\n      0x00\n        /* \"#utility.yul\":907:912   */\n      dup2\n        /* \"#utility.yul\":896:912   */\n      swap1\n      pop\n        /* \"#utility.yul\":841:918   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":924:1046   */\n    tag_151:\n        /* \"#utility.yul\":997:1021   */\n      tag_184\n        /* \"#utility.yul\":1015:1020   */\n      dup2\n        /* \"#utility.yul\":997:1021   */\n      tag_150\n      jump\t// in\n    tag_184:\n        /* \"#utility.yul\":990:995   */\n      dup2\n        /* \"#utility.yul\":987:1022   */\n      eq\n        /* \"#utility.yul\":977:1040   */\n      tag_185\n      jumpi\n        /* \"#utility.yul\":1036:1037   */\n      0x00\n        /* \"#utility.yul\":1033:1034   */\n      dup1\n        /* \"#utility.yul\":1026:1038   */\n      revert\n        /* \"#utility.yul\":977:1040   */\n    tag_185:\n        /* \"#utility.yul\":924:1046   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1052:1191   */\n    tag_152:\n        /* \"#utility.yul\":1098:1103   */\n      0x00\n        /* \"#utility.yul\":1136:1142   */\n      dup2\n        /* \"#utility.yul\":1123:1143   */\n      calldataload\n        /* \"#utility.yul\":1114:1143   */\n      swap1\n      pop\n        /* \"#utility.yul\":1152:1185   */\n      tag_187\n        /* \"#utility.yul\":1179:1184   */\n      dup2\n        /* \"#utility.yul\":1152:1185   */\n      tag_151\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":1052:1191   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1197:1671   */\n    tag_23:\n        /* \"#utility.yul\":1265:1271   */\n      0x00\n        /* \"#utility.yul\":1273:1279   */\n      dup1\n        /* \"#utility.yul\":1322:1324   */\n      0x40\n        /* \"#utility.yul\":1310:1319   */\n      dup4\n        /* \"#utility.yul\":1301:1308   */\n      dup6\n        /* \"#utility.yul\":1297:1320   */\n      sub\n        /* \"#utility.yul\":1293:1325   */\n      slt\n        /* \"#utility.yul\":1290:1409   */\n      iszero\n      tag_189\n      jumpi\n        /* \"#utility.yul\":1328:1407   */\n      tag_190\n      tag_144\n      jump\t// in\n    tag_190:\n        /* \"#utility.yul\":1290:1409   */\n    tag_189:\n        /* \"#utility.yul\":1448:1449   */\n      0x00\n        /* \"#utility.yul\":1473:1526   */\n      tag_191\n        /* \"#utility.yul\":1518:1525   */\n      dup6\n        /* \"#utility.yul\":1509:1515   */\n      dup3\n        /* \"#utility.yul\":1498:1507   */\n      dup7\n        /* \"#utility.yul\":1494:1516   */\n      add\n        /* \"#utility.yul\":1473:1526   */\n      tag_149\n      jump\t// in\n    tag_191:\n        /* \"#utility.yul\":1463:1526   */\n      swap3\n      pop\n        /* \"#utility.yul\":1419:1536   */\n      pop\n        /* \"#utility.yul\":1575:1577   */\n      0x20\n        /* \"#utility.yul\":1601:1654   */\n      tag_192\n        /* \"#utility.yul\":1646:1653   */\n      dup6\n        /* \"#utility.yul\":1637:1643   */\n      dup3\n        /* \"#utility.yul\":1626:1635   */\n      dup7\n        /* \"#utility.yul\":1622:1644   */\n      add\n        /* \"#utility.yul\":1601:1654   */\n      tag_152\n      jump\t// in\n    tag_192:\n        /* \"#utility.yul\":1591:1654   */\n      swap2\n      pop\n        /* \"#utility.yul\":1546:1664   */\n      pop\n        /* \"#utility.yul\":1197:1671   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1677:2006   */\n    tag_28:\n        /* \"#utility.yul\":1736:1742   */\n      0x00\n        /* \"#utility.yul\":1785:1787   */\n      0x20\n        /* \"#utility.yul\":1773:1782   */\n      dup3\n        /* \"#utility.yul\":1764:1771   */\n      dup5\n        /* \"#utility.yul\":1760:1783   */\n      sub\n        /* \"#utility.yul\":1756:1788   */\n      slt\n        /* \"#utility.yul\":1753:1872   */\n      iszero\n      tag_194\n      jumpi\n        /* \"#utility.yul\":1791:1870   */\n      tag_195\n      tag_144\n      jump\t// in\n    tag_195:\n        /* \"#utility.yul\":1753:1872   */\n    tag_194:\n        /* \"#utility.yul\":1911:1912   */\n      0x00\n        /* \"#utility.yul\":1936:1989   */\n      tag_196\n        /* \"#utility.yul\":1981:1988   */\n      dup5\n        /* \"#utility.yul\":1972:1978   */\n      dup3\n        /* \"#utility.yul\":1961:1970   */\n      dup6\n        /* \"#utility.yul\":1957:1979   */\n      add\n        /* \"#utility.yul\":1936:1989   */\n      tag_149\n      jump\t// in\n    tag_196:\n        /* \"#utility.yul\":1926:1989   */\n      swap2\n      pop\n        /* \"#utility.yul\":1882:1999   */\n      pop\n        /* \"#utility.yul\":1677:2006   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2012:2102   */\n    tag_153:\n        /* \"#utility.yul\":2046:2053   */\n      0x00\n        /* \"#utility.yul\":2089:2094   */\n      dup2\n        /* \"#utility.yul\":2082:2095   */\n      iszero\n        /* \"#utility.yul\":2075:2096   */\n      iszero\n        /* \"#utility.yul\":2064:2096   */\n      swap1\n      pop\n        /* \"#utility.yul\":2012:2102   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2108:2217   */\n    tag_154:\n        /* \"#utility.yul\":2189:2210   */\n      tag_199\n        /* \"#utility.yul\":2204:2209   */\n      dup2\n        /* \"#utility.yul\":2189:2210   */\n      tag_153\n      jump\t// in\n    tag_199:\n        /* \"#utility.yul\":2184:2187   */\n      dup3\n        /* \"#utility.yul\":2177:2211   */\n      mstore\n        /* \"#utility.yul\":2108:2217   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2223:2433   */\n    tag_31:\n        /* \"#utility.yul\":2310:2314   */\n      0x00\n        /* \"#utility.yul\":2348:2350   */\n      0x20\n        /* \"#utility.yul\":2337:2346   */\n      dup3\n        /* \"#utility.yul\":2333:2351   */\n      add\n        /* \"#utility.yul\":2325:2351   */\n      swap1\n      pop\n        /* \"#utility.yul\":2361:2426   */\n      tag_201\n        /* \"#utility.yul\":2423:2424   */\n      0x00\n        /* \"#utility.yul\":2412:2421   */\n      dup4\n        /* \"#utility.yul\":2408:2425   */\n      add\n        /* \"#utility.yul\":2399:2405   */\n      dup5\n        /* \"#utility.yul\":2361:2426   */\n      tag_154\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":2223:2433   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2439:2768   */\n    tag_35:\n        /* \"#utility.yul\":2498:2504   */\n      0x00\n        /* \"#utility.yul\":2547:2549   */\n      0x20\n        /* \"#utility.yul\":2535:2544   */\n      dup3\n        /* \"#utility.yul\":2526:2533   */\n      dup5\n        /* \"#utility.yul\":2522:2545   */\n      sub\n        /* \"#utility.yul\":2518:2550   */\n      slt\n        /* \"#utility.yul\":2515:2634   */\n      iszero\n      tag_203\n      jumpi\n        /* \"#utility.yul\":2553:2632   */\n      tag_204\n      tag_144\n      jump\t// in\n    tag_204:\n        /* \"#utility.yul\":2515:2634   */\n    tag_203:\n        /* \"#utility.yul\":2673:2674   */\n      0x00\n        /* \"#utility.yul\":2698:2751   */\n      tag_205\n        /* \"#utility.yul\":2743:2750   */\n      dup5\n        /* \"#utility.yul\":2734:2740   */\n      dup3\n        /* \"#utility.yul\":2723:2732   */\n      dup6\n        /* \"#utility.yul\":2719:2741   */\n      add\n        /* \"#utility.yul\":2698:2751   */\n      tag_152\n      jump\t// in\n    tag_205:\n        /* \"#utility.yul\":2688:2751   */\n      swap2\n      pop\n        /* \"#utility.yul\":2644:2761   */\n      pop\n        /* \"#utility.yul\":2439:2768   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2774:2890   */\n    tag_155:\n        /* \"#utility.yul\":2844:2865   */\n      tag_207\n        /* \"#utility.yul\":2859:2864   */\n      dup2\n        /* \"#utility.yul\":2844:2865   */\n      tag_153\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":2837:2842   */\n      dup2\n        /* \"#utility.yul\":2834:2866   */\n      eq\n        /* \"#utility.yul\":2824:2884   */\n      tag_208\n      jumpi\n        /* \"#utility.yul\":2880:2881   */\n      0x00\n        /* \"#utility.yul\":2877:2878   */\n      dup1\n        /* \"#utility.yul\":2870:2882   */\n      revert\n        /* \"#utility.yul\":2824:2884   */\n    tag_208:\n        /* \"#utility.yul\":2774:2890   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2896:3029   */\n    tag_156:\n        /* \"#utility.yul\":2939:2944   */\n      0x00\n        /* \"#utility.yul\":2977:2983   */\n      dup2\n        /* \"#utility.yul\":2964:2984   */\n      calldataload\n        /* \"#utility.yul\":2955:2984   */\n      swap1\n      pop\n        /* \"#utility.yul\":2993:3023   */\n      tag_210\n        /* \"#utility.yul\":3017:3022   */\n      dup2\n        /* \"#utility.yul\":2993:3023   */\n      tag_155\n      jump\t// in\n    tag_210:\n        /* \"#utility.yul\":2896:3029   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3035:3503   */\n    tag_43:\n        /* \"#utility.yul\":3100:3106   */\n      0x00\n        /* \"#utility.yul\":3108:3114   */\n      dup1\n        /* \"#utility.yul\":3157:3159   */\n      0x40\n        /* \"#utility.yul\":3145:3154   */\n      dup4\n        /* \"#utility.yul\":3136:3143   */\n      dup6\n        /* \"#utility.yul\":3132:3155   */\n      sub\n        /* \"#utility.yul\":3128:3160   */\n      slt\n        /* \"#utility.yul\":3125:3244   */\n      iszero\n      tag_212\n      jumpi\n        /* \"#utility.yul\":3163:3242   */\n      tag_213\n      tag_144\n      jump\t// in\n    tag_213:\n        /* \"#utility.yul\":3125:3244   */\n    tag_212:\n        /* \"#utility.yul\":3283:3284   */\n      0x00\n        /* \"#utility.yul\":3308:3361   */\n      tag_214\n        /* \"#utility.yul\":3353:3360   */\n      dup6\n        /* \"#utility.yul\":3344:3350   */\n      dup3\n        /* \"#utility.yul\":3333:3342   */\n      dup7\n        /* \"#utility.yul\":3329:3351   */\n      add\n        /* \"#utility.yul\":3308:3361   */\n      tag_149\n      jump\t// in\n    tag_214:\n        /* \"#utility.yul\":3298:3361   */\n      swap3\n      pop\n        /* \"#utility.yul\":3254:3371   */\n      pop\n        /* \"#utility.yul\":3410:3412   */\n      0x20\n        /* \"#utility.yul\":3436:3486   */\n      tag_215\n        /* \"#utility.yul\":3478:3485   */\n      dup6\n        /* \"#utility.yul\":3469:3475   */\n      dup3\n        /* \"#utility.yul\":3458:3467   */\n      dup7\n        /* \"#utility.yul\":3454:3476   */\n      add\n        /* \"#utility.yul\":3436:3486   */\n      tag_156\n      jump\t// in\n    tag_215:\n        /* \"#utility.yul\":3426:3486   */\n      swap2\n      pop\n        /* \"#utility.yul\":3381:3496   */\n      pop\n        /* \"#utility.yul\":3035:3503   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3509:3627   */\n    tag_157:\n        /* \"#utility.yul\":3596:3620   */\n      tag_217\n        /* \"#utility.yul\":3614:3619   */\n      dup2\n        /* \"#utility.yul\":3596:3620   */\n      tag_147\n      jump\t// in\n    tag_217:\n        /* \"#utility.yul\":3591:3594   */\n      dup3\n        /* \"#utility.yul\":3584:3621   */\n      mstore\n        /* \"#utility.yul\":3509:3627   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3633:3855   */\n    tag_52:\n        /* \"#utility.yul\":3726:3730   */\n      0x00\n        /* \"#utility.yul\":3764:3766   */\n      0x20\n        /* \"#utility.yul\":3753:3762   */\n      dup3\n        /* \"#utility.yul\":3749:3767   */\n      add\n        /* \"#utility.yul\":3741:3767   */\n      swap1\n      pop\n        /* \"#utility.yul\":3777:3848   */\n      tag_219\n        /* \"#utility.yul\":3845:3846   */\n      0x00\n        /* \"#utility.yul\":3834:3843   */\n      dup4\n        /* \"#utility.yul\":3830:3847   */\n      add\n        /* \"#utility.yul\":3821:3827   */\n      dup5\n        /* \"#utility.yul\":3777:3848   */\n      tag_157\n      jump\t// in\n    tag_219:\n        /* \"#utility.yul\":3633:3855   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3861:3979   */\n    tag_158:\n        /* \"#utility.yul\":3948:3972   */\n      tag_221\n        /* \"#utility.yul\":3966:3971   */\n      dup2\n        /* \"#utility.yul\":3948:3972   */\n      tag_150\n      jump\t// in\n    tag_221:\n        /* \"#utility.yul\":3943:3946   */\n      dup3\n        /* \"#utility.yul\":3936:3973   */\n      mstore\n        /* \"#utility.yul\":3861:3979   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3985:4207   */\n    tag_61:\n        /* \"#utility.yul\":4078:4082   */\n      0x00\n        /* \"#utility.yul\":4116:4118   */\n      0x20\n        /* \"#utility.yul\":4105:4114   */\n      dup3\n        /* \"#utility.yul\":4101:4119   */\n      add\n        /* \"#utility.yul\":4093:4119   */\n      swap1\n      pop\n        /* \"#utility.yul\":4129:4200   */\n      tag_223\n        /* \"#utility.yul\":4197:4198   */\n      0x00\n        /* \"#utility.yul\":4186:4195   */\n      dup4\n        /* \"#utility.yul\":4182:4199   */\n      add\n        /* \"#utility.yul\":4173:4179   */\n      dup5\n        /* \"#utility.yul\":4129:4200   */\n      tag_158\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":3985:4207   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4213:4312   */\n    tag_159:\n        /* \"#utility.yul\":4265:4271   */\n      0x00\n        /* \"#utility.yul\":4299:4304   */\n      dup2\n        /* \"#utility.yul\":4293:4305   */\n      mload\n        /* \"#utility.yul\":4283:4305   */\n      swap1\n      pop\n        /* \"#utility.yul\":4213:4312   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4318:4487   */\n    tag_160:\n        /* \"#utility.yul\":4402:4413   */\n      0x00\n        /* \"#utility.yul\":4436:4442   */\n      dup3\n        /* \"#utility.yul\":4431:4434   */\n      dup3\n        /* \"#utility.yul\":4424:4443   */\n      mstore\n        /* \"#utility.yul\":4476:4480   */\n      0x20\n        /* \"#utility.yul\":4471:4474   */\n      dup3\n        /* \"#utility.yul\":4467:4481   */\n      add\n        /* \"#utility.yul\":4452:4481   */\n      swap1\n      pop\n        /* \"#utility.yul\":4318:4487   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4493:4739   */\n    tag_161:\n        /* \"#utility.yul\":4574:4575   */\n      0x00\n        /* \"#utility.yul\":4584:4697   */\n    tag_227:\n        /* \"#utility.yul\":4598:4604   */\n      dup4\n        /* \"#utility.yul\":4595:4596   */\n      dup2\n        /* \"#utility.yul\":4592:4605   */\n      lt\n        /* \"#utility.yul\":4584:4697   */\n      iszero\n      tag_229\n      jumpi\n        /* \"#utility.yul\":4683:4684   */\n      dup1\n        /* \"#utility.yul\":4678:4681   */\n      dup3\n        /* \"#utility.yul\":4674:4685   */\n      add\n        /* \"#utility.yul\":4668:4686   */\n      mload\n        /* \"#utility.yul\":4664:4665   */\n      dup2\n        /* \"#utility.yul\":4659:4662   */\n      dup5\n        /* \"#utility.yul\":4655:4666   */\n      add\n        /* \"#utility.yul\":4648:4687   */\n      mstore\n        /* \"#utility.yul\":4620:4622   */\n      0x20\n        /* \"#utility.yul\":4617:4618   */\n      dup2\n        /* \"#utility.yul\":4613:4623   */\n      add\n        /* \"#utility.yul\":4608:4623   */\n      swap1\n      pop\n        /* \"#utility.yul\":4584:4697   */\n      jump(tag_227)\n    tag_229:\n        /* \"#utility.yul\":4731:4732   */\n      0x00\n        /* \"#utility.yul\":4722:4728   */\n      dup5\n        /* \"#utility.yul\":4717:4720   */\n      dup5\n        /* \"#utility.yul\":4713:4729   */\n      add\n        /* \"#utility.yul\":4706:4733   */\n      mstore\n        /* \"#utility.yul\":4555:4739   */\n      pop\n        /* \"#utility.yul\":4493:4739   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4745:4847   */\n    tag_162:\n        /* \"#utility.yul\":4786:4792   */\n      0x00\n        /* \"#utility.yul\":4837:4839   */\n      0x1f\n        /* \"#utility.yul\":4833:4840   */\n      not\n        /* \"#utility.yul\":4828:4830   */\n      0x1f\n        /* \"#utility.yul\":4821:4826   */\n      dup4\n        /* \"#utility.yul\":4817:4831   */\n      add\n        /* \"#utility.yul\":4813:4841   */\n      and\n        /* \"#utility.yul\":4803:4841   */\n      swap1\n      pop\n        /* \"#utility.yul\":4745:4847   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4853:5230   */\n    tag_163:\n        /* \"#utility.yul\":4941:4944   */\n      0x00\n        /* \"#utility.yul\":4969:5008   */\n      tag_232\n        /* \"#utility.yul\":5002:5007   */\n      dup3\n        /* \"#utility.yul\":4969:5008   */\n      tag_159\n      jump\t// in\n    tag_232:\n        /* \"#utility.yul\":5024:5095   */\n      tag_233\n        /* \"#utility.yul\":5088:5094   */\n      dup2\n        /* \"#utility.yul\":5083:5086   */\n      dup6\n        /* \"#utility.yul\":5024:5095   */\n      tag_160\n      jump\t// in\n    tag_233:\n        /* \"#utility.yul\":5017:5095   */\n      swap4\n      pop\n        /* \"#utility.yul\":5104:5169   */\n      tag_234\n        /* \"#utility.yul\":5162:5168   */\n      dup2\n        /* \"#utility.yul\":5157:5160   */\n      dup6\n        /* \"#utility.yul\":5150:5154   */\n      0x20\n        /* \"#utility.yul\":5143:5148   */\n      dup7\n        /* \"#utility.yul\":5139:5155   */\n      add\n        /* \"#utility.yul\":5104:5169   */\n      tag_161\n      jump\t// in\n    tag_234:\n        /* \"#utility.yul\":5194:5223   */\n      tag_235\n        /* \"#utility.yul\":5216:5222   */\n      dup2\n        /* \"#utility.yul\":5194:5223   */\n      tag_162\n      jump\t// in\n    tag_235:\n        /* \"#utility.yul\":5189:5192   */\n      dup5\n        /* \"#utility.yul\":5185:5224   */\n      add\n        /* \"#utility.yul\":5178:5224   */\n      swap2\n      pop\n        /* \"#utility.yul\":4945:5230   */\n      pop\n        /* \"#utility.yul\":4853:5230   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5236:5549   */\n    tag_79:\n        /* \"#utility.yul\":5349:5353   */\n      0x00\n        /* \"#utility.yul\":5387:5389   */\n      0x20\n        /* \"#utility.yul\":5376:5385   */\n      dup3\n        /* \"#utility.yul\":5372:5390   */\n      add\n        /* \"#utility.yul\":5364:5390   */\n      swap1\n      pop\n        /* \"#utility.yul\":5436:5445   */\n      dup2\n        /* \"#utility.yul\":5430:5434   */\n      dup2\n        /* \"#utility.yul\":5426:5446   */\n      sub\n        /* \"#utility.yul\":5422:5423   */\n      0x00\n        /* \"#utility.yul\":5411:5420   */\n      dup4\n        /* \"#utility.yul\":5407:5424   */\n      add\n        /* \"#utility.yul\":5400:5447   */\n      mstore\n        /* \"#utility.yul\":5464:5542   */\n      tag_237\n        /* \"#utility.yul\":5537:5541   */\n      dup2\n        /* \"#utility.yul\":5528:5534   */\n      dup5\n        /* \"#utility.yul\":5464:5542   */\n      tag_163\n      jump\t// in\n    tag_237:\n        /* \"#utility.yul\":5456:5542   */\n      swap1\n      pop\n        /* \"#utility.yul\":5236:5549   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5555:5715   */\n    tag_164:\n        /* \"#utility.yul\":5695:5707   */\n      0x5245454e5452414e435900000000000000000000000000000000000000000000\n        /* \"#utility.yul\":5691:5692   */\n      0x00\n        /* \"#utility.yul\":5683:5689   */\n      dup3\n        /* \"#utility.yul\":5679:5693   */\n      add\n        /* \"#utility.yul\":5672:5708   */\n      mstore\n        /* \"#utility.yul\":5555:5715   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5721:6087   */\n    tag_165:\n        /* \"#utility.yul\":5863:5866   */\n      0x00\n        /* \"#utility.yul\":5884:5951   */\n      tag_240\n        /* \"#utility.yul\":5948:5950   */\n      0x0a\n        /* \"#utility.yul\":5943:5946   */\n      dup4\n        /* \"#utility.yul\":5884:5951   */\n      tag_160\n      jump\t// in\n    tag_240:\n        /* \"#utility.yul\":5877:5951   */\n      swap2\n      pop\n        /* \"#utility.yul\":5960:6053   */\n      tag_241\n        /* \"#utility.yul\":6049:6052   */\n      dup3\n        /* \"#utility.yul\":5960:6053   */\n      tag_164\n      jump\t// in\n    tag_241:\n        /* \"#utility.yul\":6078:6080   */\n      0x20\n        /* \"#utility.yul\":6073:6076   */\n      dup3\n        /* \"#utility.yul\":6069:6081   */\n      add\n        /* \"#utility.yul\":6062:6081   */\n      swap1\n      pop\n        /* \"#utility.yul\":5721:6087   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6093:6512   */\n    tag_92:\n        /* \"#utility.yul\":6259:6263   */\n      0x00\n        /* \"#utility.yul\":6297:6299   */\n      0x20\n        /* \"#utility.yul\":6286:6295   */\n      dup3\n        /* \"#utility.yul\":6282:6300   */\n      add\n        /* \"#utility.yul\":6274:6300   */\n      swap1\n      pop\n        /* \"#utility.yul\":6346:6355   */\n      dup2\n        /* \"#utility.yul\":6340:6344   */\n      dup2\n        /* \"#utility.yul\":6336:6356   */\n      sub\n        /* \"#utility.yul\":6332:6333   */\n      0x00\n        /* \"#utility.yul\":6321:6330   */\n      dup4\n        /* \"#utility.yul\":6317:6334   */\n      add\n        /* \"#utility.yul\":6310:6357   */\n      mstore\n        /* \"#utility.yul\":6374:6505   */\n      tag_243\n        /* \"#utility.yul\":6500:6504   */\n      dup2\n        /* \"#utility.yul\":6374:6505   */\n      tag_165\n      jump\t// in\n    tag_243:\n        /* \"#utility.yul\":6366:6505   */\n      swap1\n      pop\n        /* \"#utility.yul\":6093:6512   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6518:6698   */\n    tag_166:\n        /* \"#utility.yul\":6566:6643   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6563:6564   */\n      0x00\n        /* \"#utility.yul\":6556:6644   */\n      mstore\n        /* \"#utility.yul\":6663:6667   */\n      0x11\n        /* \"#utility.yul\":6660:6661   */\n      0x04\n        /* \"#utility.yul\":6653:6668   */\n      mstore\n        /* \"#utility.yul\":6687:6691   */\n      0x24\n        /* \"#utility.yul\":6684:6685   */\n      0x00\n        /* \"#utility.yul\":6677:6692   */\n      revert\n        /* \"#utility.yul\":6704:6898   */\n    tag_96:\n        /* \"#utility.yul\":6744:6748   */\n      0x00\n        /* \"#utility.yul\":6764:6784   */\n      tag_246\n        /* \"#utility.yul\":6782:6783   */\n      dup3\n        /* \"#utility.yul\":6764:6784   */\n      tag_150\n      jump\t// in\n    tag_246:\n        /* \"#utility.yul\":6759:6784   */\n      swap2\n      pop\n        /* \"#utility.yul\":6798:6818   */\n      tag_247\n        /* \"#utility.yul\":6816:6817   */\n      dup4\n        /* \"#utility.yul\":6798:6818   */\n      tag_150\n      jump\t// in\n    tag_247:\n        /* \"#utility.yul\":6793:6818   */\n      swap3\n      pop\n        /* \"#utility.yul\":6842:6843   */\n      dup3\n        /* \"#utility.yul\":6839:6840   */\n      dup3\n        /* \"#utility.yul\":6835:6844   */\n      sub\n        /* \"#utility.yul\":6827:6844   */\n      swap1\n      pop\n        /* \"#utility.yul\":6866:6867   */\n      dup2\n        /* \"#utility.yul\":6860:6864   */\n      dup2\n        /* \"#utility.yul\":6857:6868   */\n      gt\n        /* \"#utility.yul\":6854:6891   */\n      iszero\n      tag_248\n      jumpi\n        /* \"#utility.yul\":6871:6889   */\n      tag_249\n      tag_166\n      jump\t// in\n    tag_249:\n        /* \"#utility.yul\":6854:6891   */\n    tag_248:\n        /* \"#utility.yul\":6704:6898   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6904:7095   */\n    tag_100:\n        /* \"#utility.yul\":6944:6947   */\n      0x00\n        /* \"#utility.yul\":6963:6983   */\n      tag_251\n        /* \"#utility.yul\":6981:6982   */\n      dup3\n        /* \"#utility.yul\":6963:6983   */\n      tag_150\n      jump\t// in\n    tag_251:\n        /* \"#utility.yul\":6958:6983   */\n      swap2\n      pop\n        /* \"#utility.yul\":6997:7017   */\n      tag_252\n        /* \"#utility.yul\":7015:7016   */\n      dup4\n        /* \"#utility.yul\":6997:7017   */\n      tag_150\n      jump\t// in\n    tag_252:\n        /* \"#utility.yul\":6992:7017   */\n      swap3\n      pop\n        /* \"#utility.yul\":7040:7041   */\n      dup3\n        /* \"#utility.yul\":7037:7038   */\n      dup3\n        /* \"#utility.yul\":7033:7042   */\n      add\n        /* \"#utility.yul\":7026:7042   */\n      swap1\n      pop\n        /* \"#utility.yul\":7061:7064   */\n      dup1\n        /* \"#utility.yul\":7058:7059   */\n      dup3\n        /* \"#utility.yul\":7055:7065   */\n      gt\n        /* \"#utility.yul\":7052:7088   */\n      iszero\n      tag_253\n      jumpi\n        /* \"#utility.yul\":7068:7086   */\n      tag_254\n      tag_166\n      jump\t// in\n    tag_254:\n        /* \"#utility.yul\":7052:7088   */\n    tag_253:\n        /* \"#utility.yul\":6904:7095   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7101:7281   */\n    tag_167:\n        /* \"#utility.yul\":7149:7226   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":7146:7147   */\n      0x00\n        /* \"#utility.yul\":7139:7227   */\n      mstore\n        /* \"#utility.yul\":7246:7250   */\n      0x22\n        /* \"#utility.yul\":7243:7244   */\n      0x04\n        /* \"#utility.yul\":7236:7251   */\n      mstore\n        /* \"#utility.yul\":7270:7274   */\n      0x24\n        /* \"#utility.yul\":7267:7268   */\n      0x00\n        /* \"#utility.yul\":7260:7275   */\n      revert\n        /* \"#utility.yul\":7287:7607   */\n    tag_124:\n        /* \"#utility.yul\":7331:7337   */\n      0x00\n        /* \"#utility.yul\":7368:7369   */\n      0x02\n        /* \"#utility.yul\":7362:7366   */\n      dup3\n        /* \"#utility.yul\":7358:7370   */\n      div\n        /* \"#utility.yul\":7348:7370   */\n      swap1\n      pop\n        /* \"#utility.yul\":7415:7416   */\n      0x01\n        /* \"#utility.yul\":7409:7413   */\n      dup3\n        /* \"#utility.yul\":7405:7417   */\n      and\n        /* \"#utility.yul\":7436:7454   */\n      dup1\n        /* \"#utility.yul\":7426:7507   */\n      tag_257\n      jumpi\n        /* \"#utility.yul\":7492:7496   */\n      0x7f\n        /* \"#utility.yul\":7484:7490   */\n      dup3\n        /* \"#utility.yul\":7480:7497   */\n      and\n        /* \"#utility.yul\":7470:7497   */\n      swap2\n      pop\n        /* \"#utility.yul\":7426:7507   */\n    tag_257:\n        /* \"#utility.yul\":7554:7556   */\n      0x20\n        /* \"#utility.yul\":7546:7552   */\n      dup3\n        /* \"#utility.yul\":7543:7557   */\n      lt\n        /* \"#utility.yul\":7523:7541   */\n      dup2\n        /* \"#utility.yul\":7520:7558   */\n      sub\n        /* \"#utility.yul\":7517:7601   */\n      tag_258\n      jumpi\n        /* \"#utility.yul\":7573:7591   */\n      tag_259\n      tag_167\n      jump\t// in\n    tag_259:\n        /* \"#utility.yul\":7517:7601   */\n    tag_258:\n        /* \"#utility.yul\":7338:7607   */\n      pop\n        /* \"#utility.yul\":7287:7607   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7613:7782   */\n    tag_168:\n        /* \"#utility.yul\":7753:7774   */\n      0x4554485f5452414e534645525f4641494c454400000000000000000000000000\n        /* \"#utility.yul\":7749:7750   */\n      0x00\n        /* \"#utility.yul\":7741:7747   */\n      dup3\n        /* \"#utility.yul\":7737:7751   */\n      add\n        /* \"#utility.yul\":7730:7775   */\n      mstore\n        /* \"#utility.yul\":7613:7782   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7788:8154   */\n    tag_169:\n        /* \"#utility.yul\":7930:7933   */\n      0x00\n        /* \"#utility.yul\":7951:8018   */\n      tag_262\n        /* \"#utility.yul\":8015:8017   */\n      0x13\n        /* \"#utility.yul\":8010:8013   */\n      dup4\n        /* \"#utility.yul\":7951:8018   */\n      tag_160\n      jump\t// in\n    tag_262:\n        /* \"#utility.yul\":7944:8018   */\n      swap2\n      pop\n        /* \"#utility.yul\":8027:8120   */\n      tag_263\n        /* \"#utility.yul\":8116:8119   */\n      dup3\n        /* \"#utility.yul\":8027:8120   */\n      tag_168\n      jump\t// in\n    tag_263:\n        /* \"#utility.yul\":8145:8147   */\n      0x20\n        /* \"#utility.yul\":8140:8143   */\n      dup3\n        /* \"#utility.yul\":8136:8148   */\n      add\n        /* \"#utility.yul\":8129:8148   */\n      swap1\n      pop\n        /* \"#utility.yul\":7788:8154   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8160:8579   */\n    tag_132:\n        /* \"#utility.yul\":8326:8330   */\n      0x00\n        /* \"#utility.yul\":8364:8366   */\n      0x20\n        /* \"#utility.yul\":8353:8362   */\n      dup3\n        /* \"#utility.yul\":8349:8367   */\n      add\n        /* \"#utility.yul\":8341:8367   */\n      swap1\n      pop\n        /* \"#utility.yul\":8413:8422   */\n      dup2\n        /* \"#utility.yul\":8407:8411   */\n      dup2\n        /* \"#utility.yul\":8403:8423   */\n      sub\n        /* \"#utility.yul\":8399:8400   */\n      0x00\n        /* \"#utility.yul\":8388:8397   */\n      dup4\n        /* \"#utility.yul\":8384:8401   */\n      add\n        /* \"#utility.yul\":8377:8424   */\n      mstore\n        /* \"#utility.yul\":8441:8572   */\n      tag_265\n        /* \"#utility.yul\":8567:8571   */\n      dup2\n        /* \"#utility.yul\":8441:8572   */\n      tag_169\n      jump\t// in\n    tag_265:\n        /* \"#utility.yul\":8433:8572   */\n      swap1\n      pop\n        /* \"#utility.yul\":8160:8579   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220ded4d11dbcf99d66d0eff9399137ba33d09ca9ebd2ddf994758f286633e282ca64736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1123": {
									"entryPoint": null,
									"id": 1123,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_50": {
									"entryPoint": null,
									"id": 50,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 388,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 1501,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_storage_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 1564,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 1518,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1708,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 742,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 584,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 1547,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 1063,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_address": {
									"entryPoint": 1481,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 1449,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 878,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 1024,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 898,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1218,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 763,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 689,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 1188,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 888,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 1156,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x22": {
									"entryPoint": 642,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 595,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 938,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_left_dynamic": {
									"entryPoint": 779,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 1143,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 996,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 792,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 948,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 991,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:7166:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "66:40:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "77:22:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "93:5:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "87:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "87:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "77:6:9"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "49:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "59:6:9",
														"type": ""
													}
												],
												"src": "7:99:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "140:152:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "157:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "160:77:9",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "150:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "150:88:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "150:88:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "254:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "257:4:9",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "247:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "247:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "247:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "278:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "281:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "271:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "271:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "271:15:9"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "112:180:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "326:152:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "343:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "346:77:9",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "336:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "336:88:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "336:88:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "440:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "443:4:9",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "433:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "433:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "433:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "464:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "467:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "457:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "457:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "457:15:9"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "298:180:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "535:269:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "545:22:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "559:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "565:1:9",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "555:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "555:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "545:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "576:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "606:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "612:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "602:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "602:12:9"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "580:18:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "653:51:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "667:27:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "681:6:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "689:4:9",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "677:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "677:17:9"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "667:6:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "633:18:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "626:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "626:26:9"
															},
															"nodeType": "YulIf",
															"src": "623:81:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "756:42:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "770:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "770:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "770:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "720:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "743:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "751:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "740:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "740:14:9"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "717:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "717:38:9"
															},
															"nodeType": "YulIf",
															"src": "714:84:9"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "519:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "528:6:9",
														"type": ""
													}
												],
												"src": "484:320:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "864:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "874:11:9",
															"value": {
																"name": "ptr",
																"nodeType": "YulIdentifier",
																"src": "882:3:9"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "874:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "902:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "905:3:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "895:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "895:14:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "895:14:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "918:26:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "936:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "939:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "926:9:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "926:18:9"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "918:4:9"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "851:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "859:4:9",
														"type": ""
													}
												],
												"src": "810:141:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1001:49:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1011:33:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1029:5:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1036:2:9",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1025:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1025:14:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1041:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "1021:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1021:23:9"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "1011:6:9"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "984:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "994:6:9",
														"type": ""
													}
												],
												"src": "957:93:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1109:54:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1119:37:9",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nodeType": "YulIdentifier",
																		"src": "1144:4:9"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1150:5:9"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "1140:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1140:16:9"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "1119:8:9"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nodeType": "YulTypedName",
														"src": "1084:4:9",
														"type": ""
													},
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1090:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "1100:8:9",
														"type": ""
													}
												],
												"src": "1056:107:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1245:317:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1255:35:9",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nodeType": "YulIdentifier",
																		"src": "1276:10:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1288:1:9",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1272:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1272:18:9"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nodeType": "YulTypedName",
																	"src": "1259:9:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1299:109:9",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nodeType": "YulIdentifier",
																		"src": "1330:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1341:66:9",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "1311:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1311:97:9"
															},
															"variables": [
																{
																	"name": "mask",
																	"nodeType": "YulTypedName",
																	"src": "1303:4:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1417:51:9",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nodeType": "YulIdentifier",
																		"src": "1448:9:9"
																	},
																	{
																		"name": "toInsert",
																		"nodeType": "YulIdentifier",
																		"src": "1459:8:9"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "1429:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1429:39:9"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nodeType": "YulIdentifier",
																	"src": "1417:8:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1477:30:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1490:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nodeType": "YulIdentifier",
																				"src": "1501:4:9"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1497:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1497:9:9"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1486:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1486:21:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1477:5:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1516:40:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1529:5:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nodeType": "YulIdentifier",
																				"src": "1540:8:9"
																			},
																			{
																				"name": "mask",
																				"nodeType": "YulIdentifier",
																				"src": "1550:4:9"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1536:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1536:19:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1526:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1526:30:9"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "1516:6:9"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1206:5:9",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nodeType": "YulTypedName",
														"src": "1213:10:9",
														"type": ""
													},
													{
														"name": "toInsert",
														"nodeType": "YulTypedName",
														"src": "1225:8:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "1238:6:9",
														"type": ""
													}
												],
												"src": "1169:393:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1613:32:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1623:16:9",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1634:5:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1623:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1595:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1605:7:9",
														"type": ""
													}
												],
												"src": "1568:77:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1683:28:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1693:12:9",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1700:5:9"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "1693:3:9"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1669:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "1679:3:9",
														"type": ""
													}
												],
												"src": "1651:60:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1777:82:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1787:66:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1845:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "1827:17:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1827:24:9"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "1818:8:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1818:34:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1800:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1800:53:9"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "1787:9:9"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1757:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "1767:9:9",
														"type": ""
													}
												],
												"src": "1717:142:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1912:28:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1922:12:9",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1929:5:9"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "1922:3:9"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1898:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "1908:3:9",
														"type": ""
													}
												],
												"src": "1865:75:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2022:193:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2032:63:9",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nodeType": "YulIdentifier",
																		"src": "2087:7:9"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2056:30:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2056:39:9"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nodeType": "YulTypedName",
																	"src": "2036:16:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "2111:4:9"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "2151:4:9"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "2145:5:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2145:11:9"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "2158:6:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nodeType": "YulIdentifier",
																						"src": "2190:16:9"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "2166:23:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2166:41:9"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nodeType": "YulIdentifier",
																			"src": "2117:27:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2117:91:9"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nodeType": "YulIdentifier",
																	"src": "2104:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2104:105:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2104:105:9"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "1999:4:9",
														"type": ""
													},
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2005:6:9",
														"type": ""
													},
													{
														"name": "value_0",
														"nodeType": "YulTypedName",
														"src": "2013:7:9",
														"type": ""
													}
												],
												"src": "1946:269:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2270:24:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2280:8:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2287:1:9",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "2280:3:9"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "2266:3:9",
														"type": ""
													}
												],
												"src": "2221:73:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2353:136:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2363:46:9",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2377:30:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2377:32:9"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nodeType": "YulTypedName",
																	"src": "2367:6:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "2462:4:9"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2468:6:9"
																	},
																	{
																		"name": "zero_0",
																		"nodeType": "YulIdentifier",
																		"src": "2476:6:9"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2418:43:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2418:65:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2418:65:9"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "2339:4:9",
														"type": ""
													},
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2345:6:9",
														"type": ""
													}
												],
												"src": "2300:189:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2545:136:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2612:63:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "2656:5:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2663:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nodeType": "YulIdentifier",
																				"src": "2626:29:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2626:39:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2626:39:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nodeType": "YulIdentifier",
																		"src": "2565:5:9"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "2572:3:9"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2562:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2562:14:9"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "2577:26:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2579:22:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "2592:5:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2599:1:9",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2588:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2588:13:9"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nodeType": "YulIdentifier",
																				"src": "2579:5:9"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "2559:2:9",
																"statements": []
															},
															"src": "2555:120:9"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nodeType": "YulTypedName",
														"src": "2533:5:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2540:3:9",
														"type": ""
													}
												],
												"src": "2495:186:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2766:464:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2792:431:9",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2806:54:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "2854:5:9"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nodeType": "YulIdentifier",
																				"src": "2822:31:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2822:38:9"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nodeType": "YulTypedName",
																				"src": "2810:8:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2873:63:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nodeType": "YulIdentifier",
																					"src": "2896:8:9"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nodeType": "YulIdentifier",
																							"src": "2924:10:9"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nodeType": "YulIdentifier",
																						"src": "2906:17:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2906:29:9"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2892:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2892:44:9"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "2877:11:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "3093:27:9",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "3095:23:9",
																					"value": {
																						"name": "dataArea",
																						"nodeType": "YulIdentifier",
																						"src": "3110:8:9"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "3095:11:9"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "3077:10:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3089:2:9",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "3074:2:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3074:18:9"
																		},
																		"nodeType": "YulIf",
																		"src": "3071:49:9"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nodeType": "YulIdentifier",
																					"src": "3162:11:9"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nodeType": "YulIdentifier",
																							"src": "3179:8:9"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "3207:3:9"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nodeType": "YulIdentifier",
																								"src": "3189:17:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3189:22:9"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "3175:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3175:37:9"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nodeType": "YulIdentifier",
																				"src": "3133:28:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3133:80:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3133:80:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "2783:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2788:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2780:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2780:11:9"
															},
															"nodeType": "YulIf",
															"src": "2777:446:9"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "2742:5:9",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "2749:3:9",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "2754:10:9",
														"type": ""
													}
												],
												"src": "2687:543:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3299:54:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3309:37:9",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nodeType": "YulIdentifier",
																		"src": "3334:4:9"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3340:5:9"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "3330:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3330:16:9"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "3309:8:9"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nodeType": "YulTypedName",
														"src": "3274:4:9",
														"type": ""
													},
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3280:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "3290:8:9",
														"type": ""
													}
												],
												"src": "3236:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3410:118:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3420:68:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3469:1:9",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nodeType": "YulIdentifier",
																						"src": "3472:5:9"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nodeType": "YulIdentifier",
																					"src": "3465:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3465:13:9"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3484:1:9",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "3480:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3480:6:9"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nodeType": "YulIdentifier",
																			"src": "3436:28:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3436:51:9"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "3432:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3432:56:9"
															},
															"variables": [
																{
																	"name": "mask",
																	"nodeType": "YulTypedName",
																	"src": "3424:4:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3497:25:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "3511:4:9"
																	},
																	{
																		"name": "mask",
																		"nodeType": "YulIdentifier",
																		"src": "3517:4:9"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3507:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3507:15:9"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "3497:6:9"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "3387:4:9",
														"type": ""
													},
													{
														"name": "bytes",
														"nodeType": "YulTypedName",
														"src": "3393:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "3403:6:9",
														"type": ""
													}
												],
												"src": "3359:169:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3614:214:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3747:37:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "3774:4:9"
																	},
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "3780:3:9"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "3755:18:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3755:29:9"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "3747:4:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3793:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "3804:4:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3814:1:9",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "3817:3:9"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "3810:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3810:11:9"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "3801:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3801:21:9"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "3793:4:9"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "3595:4:9",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "3601:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "3609:4:9",
														"type": ""
													}
												],
												"src": "3533:295:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3925:1303:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3936:51:9",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "3983:3:9"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "3950:32:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3950:37:9"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "3940:6:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4072:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4074:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4074:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4074:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "4044:6:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4052:18:9",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4041:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4041:30:9"
															},
															"nodeType": "YulIf",
															"src": "4038:56:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4104:52:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nodeType": "YulIdentifier",
																				"src": "4150:4:9"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nodeType": "YulIdentifier",
																			"src": "4144:5:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4144:11:9"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nodeType": "YulIdentifier",
																	"src": "4118:25:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4118:38:9"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nodeType": "YulTypedName",
																	"src": "4108:6:9",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "4249:4:9"
																	},
																	{
																		"name": "oldLen",
																		"nodeType": "YulIdentifier",
																		"src": "4255:6:9"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "4263:6:9"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "4203:45:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4203:67:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4203:67:9"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4280:18:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4297:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "4284:9:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4308:17:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4321:4:9",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "4308:9:9"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "4372:611:9",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "4386:37:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "4405:6:9"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "4417:4:9",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "4413:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4413:9:9"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "4401:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4401:22:9"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "4390:7:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "4437:51:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "4483:4:9"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "4451:31:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4451:37:9"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "4441:6:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "4501:10:9",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4510:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "4505:1:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "4569:163:9",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "4594:6:9"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "4612:3:9"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "4617:9:9"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "4608:3:9"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "4608:19:9"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "4602:5:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "4602:26:9"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "4587:6:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4587:42:9"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "4587:42:9"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "4646:24:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "4660:6:9"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4668:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4656:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4656:14:9"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "4646:6:9"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "4687:31:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "4704:9:9"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4715:2:9",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4700:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4700:18:9"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "4687:9:9"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "4535:1:9"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "4538:7:9"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "4532:2:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4532:14:9"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "4547:21:9",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "4549:17:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "4558:1:9"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4561:4:9",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4554:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4554:12:9"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "4549:1:9"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "4528:3:9",
																					"statements": []
																				},
																				"src": "4524:208:9"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "4768:156:9",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "4786:43:9",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "4813:3:9"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "4818:9:9"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "4809:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "4809:19:9"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "4803:5:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4803:26:9"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "4790:9:9",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "4853:6:9"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "4880:9:9"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nodeType": "YulIdentifier",
																														"src": "4895:6:9"
																													},
																													{
																														"kind": "number",
																														"nodeType": "YulLiteral",
																														"src": "4903:4:9",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nodeType": "YulIdentifier",
																													"src": "4891:3:9"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "4891:17:9"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nodeType": "YulIdentifier",
																											"src": "4861:18:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "4861:48:9"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "4846:6:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4846:64:9"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "4846:64:9"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "4751:7:9"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "4760:6:9"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "4748:2:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4748:19:9"
																				},
																				"nodeType": "YulIf",
																				"src": "4745:179:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "4944:4:9"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "4958:6:9"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "4966:1:9",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nodeType": "YulIdentifier",
																										"src": "4954:3:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "4954:14:9"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "4970:1:9",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "4950:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4950:22:9"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "4937:6:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4937:36:9"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "4937:36:9"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "4365:618:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4370:1:9",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "5000:222:9",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "5014:14:9",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5027:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "5018:5:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "5051:67:9",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "5069:35:9",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "5088:3:9"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "5093:9:9"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "5084:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "5084:19:9"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "5078:5:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "5078:26:9"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "5069:5:9"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "5044:6:9"
																				},
																				"nodeType": "YulIf",
																				"src": "5041:77:9"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "5138:4:9"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "5197:5:9"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "5204:6:9"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "5144:52:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5144:67:9"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "5131:6:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5131:81:9"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "5131:81:9"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "4992:230:9",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "4345:6:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4353:2:9",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4342:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4342:14:9"
															},
															"nodeType": "YulSwitch",
															"src": "4335:887:9"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "3914:4:9",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "3920:3:9",
														"type": ""
													}
												],
												"src": "3833:1395:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5279:81:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5289:65:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5304:5:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5311:42:9",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5300:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5300:54:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "5289:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5261:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5271:7:9",
														"type": ""
													}
												],
												"src": "5234:126:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5411:51:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5421:35:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5450:5:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "5432:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5432:24:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "5421:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5393:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5403:7:9",
														"type": ""
													}
												],
												"src": "5366:96:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5533:53:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5550:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5573:5:9"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5555:17:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5555:24:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5543:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5543:37:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5543:37:9"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5521:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5528:3:9",
														"type": ""
													}
												],
												"src": "5468:118:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5690:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5700:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5712:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5723:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5708:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5708:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5700:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5780:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5793:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5804:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5789:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5789:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5736:43:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5736:71:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5736:71:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5662:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5674:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5685:4:9",
														"type": ""
													}
												],
												"src": "5592:222:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5916:73:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5933:3:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5938:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5926:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5926:19:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5926:19:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5954:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5973:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5978:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5969:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5969:14:9"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "5954:11:9"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5888:3:9",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5893:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "5904:11:9",
														"type": ""
													}
												],
												"src": "5820:169:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6108:742:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6118:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6141:5:9"
																	}
																],
																"functionName": {
																	"name": "sload",
																	"nodeType": "YulIdentifier",
																	"src": "6135:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6135:12:9"
															},
															"variables": [
																{
																	"name": "slotValue",
																	"nodeType": "YulTypedName",
																	"src": "6122:9:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6156:50:9",
															"value": {
																"arguments": [
																	{
																		"name": "slotValue",
																		"nodeType": "YulIdentifier",
																		"src": "6196:9:9"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nodeType": "YulIdentifier",
																	"src": "6170:25:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6170:36:9"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6160:6:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6215:78:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6281:3:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6286:6:9"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6222:58:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6222:71:9"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6215:3:9"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "6342:157:9",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "6395:3:9"
																						},
																						{
																							"arguments": [
																								{
																									"name": "slotValue",
																									"nodeType": "YulIdentifier",
																									"src": "6404:9:9"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "6419:4:9",
																											"type": "",
																											"value": "0xff"
																										}
																									],
																									"functionName": {
																										"name": "not",
																										"nodeType": "YulIdentifier",
																										"src": "6415:3:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "6415:9:9"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nodeType": "YulIdentifier",
																								"src": "6400:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6400:25:9"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "6388:6:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6388:38:9"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "6388:38:9"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "6439:50:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "6450:3:9"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "6459:4:9",
																									"type": "",
																									"value": "0x20"
																								},
																								{
																									"arguments": [
																										{
																											"arguments": [
																												{
																													"name": "length",
																													"nodeType": "YulIdentifier",
																													"src": "6479:6:9"
																												}
																											],
																											"functionName": {
																												"name": "iszero",
																												"nodeType": "YulIdentifier",
																												"src": "6472:6:9"
																											},
																											"nodeType": "YulFunctionCall",
																											"src": "6472:14:9"
																										}
																									],
																									"functionName": {
																										"name": "iszero",
																										"nodeType": "YulIdentifier",
																										"src": "6465:6:9"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "6465:22:9"
																								}
																							],
																							"functionName": {
																								"name": "mul",
																								"nodeType": "YulIdentifier",
																								"src": "6455:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6455:33:9"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6446:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6446:43:9"
																				},
																				"variableNames": [
																					{
																						"name": "ret",
																						"nodeType": "YulIdentifier",
																						"src": "6439:3:9"
																					}
																				]
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "6335:164:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6340:1:9",
																		"type": "",
																		"value": "0"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "6515:329:9",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "6560:53:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "value",
																							"nodeType": "YulIdentifier",
																							"src": "6607:5:9"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "6575:31:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6575:38:9"
																				},
																				"variables": [
																					{
																						"name": "dataPos",
																						"nodeType": "YulTypedName",
																						"src": "6564:7:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "6626:10:9",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6635:1:9",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "6630:1:9",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "6693:110:9",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "pos",
																												"nodeType": "YulIdentifier",
																												"src": "6722:3:9"
																											},
																											{
																												"name": "i",
																												"nodeType": "YulIdentifier",
																												"src": "6727:1:9"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "6718:3:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "6718:11:9"
																									},
																									{
																										"arguments": [
																											{
																												"name": "dataPos",
																												"nodeType": "YulIdentifier",
																												"src": "6737:7:9"
																											}
																										],
																										"functionName": {
																											"name": "sload",
																											"nodeType": "YulIdentifier",
																											"src": "6731:5:9"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "6731:14:9"
																									}
																								],
																								"functionName": {
																									"name": "mstore",
																									"nodeType": "YulIdentifier",
																									"src": "6711:6:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6711:35:9"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "6711:35:9"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "6763:26:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "dataPos",
																										"nodeType": "YulIdentifier",
																										"src": "6778:7:9"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "6787:1:9",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6774:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6774:15:9"
																							},
																							"variableNames": [
																								{
																									"name": "dataPos",
																									"nodeType": "YulIdentifier",
																									"src": "6763:7:9"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "6660:1:9"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "6663:6:9"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "6657:2:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6657:13:9"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "6671:21:9",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "6673:17:9",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "6682:1:9"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "6685:4:9",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6678:3:9"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6678:12:9"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "6673:1:9"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "6653:3:9",
																					"statements": []
																				},
																				"src": "6649:154:9"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "6816:18:9",
																				"value": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "6827:3:9"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "6832:1:9"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6823:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6823:11:9"
																				},
																				"variableNames": [
																					{
																						"name": "ret",
																						"nodeType": "YulIdentifier",
																						"src": "6816:3:9"
																					}
																				]
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "6508:336:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6513:1:9",
																		"type": "",
																		"value": "1"
																	}
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "slotValue",
																		"nodeType": "YulIdentifier",
																		"src": "6313:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6324:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "6309:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6309:17:9"
															},
															"nodeType": "YulSwitch",
															"src": "6302:542:9"
														}
													]
												},
												"name": "abi_encode_t_string_storage_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6089:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6096:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "6104:3:9",
														"type": ""
													}
												],
												"src": "6019:831:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6971:192:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6981:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6993:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7004:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6989:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6989:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6981:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7028:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7039:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7024:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7024:17:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7047:4:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7053:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7043:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7043:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7017:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7017:47:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7017:47:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7073:83:9",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7142:6:9"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7151:4:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_storage_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7081:60:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7081:75:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7073:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6943:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6955:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6966:4:9",
														"type": ""
													}
												],
												"src": "6856:307:9"
											}
										]
									},
									"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    // string -> string\n    function abi_encode_t_string_storage_to_t_string_memory_ptr_fromStack(value, pos) -> ret {\n        let slotValue := sload(value)\n        let length := extract_byte_array_length(slotValue)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        switch and(slotValue, 1)\n        case 0 {\n            // short byte array\n            mstore(pos, and(slotValue, not(0xff)))\n            ret := add(pos, mul(0x20, iszero(iszero(length))))\n        }\n        case 1 {\n            // long byte array\n            let dataPos := array_dataslot_t_string_storage(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, 0x20) } {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, 1)\n            }\n            ret := add(pos, i)\n        }\n    }\n\n    function abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_storage_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040526001805560026005556040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525060069081620000539190620004c2565b503480156200006157600080fd5b5033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000d85760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000cf9190620005ee565b60405180910390fd5b620000e9816200018460201b60201c565b506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060047f7b78ee99b011dff919ff5bd97f8a1b33b444782eb490dd7cd487fc963d63676f6006604051620001769190620006ac565b60405180910390a2620006d0565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002ca57607f821691505b602082108103620002e057620002df62000282565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200034a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200030b565b6200035686836200030b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003a36200039d62000397846200036e565b62000378565b6200036e565b9050919050565b6000819050919050565b620003bf8362000382565b620003d7620003ce82620003aa565b84845462000318565b825550505050565b600090565b620003ee620003df565b620003fb818484620003b4565b505050565b5b81811015620004235762000417600082620003e4565b60018101905062000401565b5050565b601f82111562000472576200043c81620002e6565b6200044784620002fb565b8101602085101562000457578190505b6200046f6200046685620002fb565b83018262000400565b50505b505050565b600082821c905092915050565b6000620004976000198460080262000477565b1980831691505092915050565b6000620004b2838362000484565b9150826002028217905092915050565b620004cd8262000248565b67ffffffffffffffff811115620004e957620004e862000253565b5b620004f58254620002b1565b6200050282828562000427565b600060209050601f8311600181146200053a576000841562000525578287015190505b620005318582620004a4565b865550620005a1565b601f1984166200054a86620002e6565b60005b8281101562000574578489015182556001820191506020850194506020810190506200054d565b8683101562000594578489015162000590601f89168262000484565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005d682620005a9565b9050919050565b620005e881620005c9565b82525050565b6000602082019050620006056000830184620005dd565b92915050565b600082825260208201905092915050565b600081546200062b81620002b1565b6200063781866200060b565b945060018216600081146200065557600181146200066c57620006a3565b60ff198316865281151560200286019350620006a3565b6200067785620002e6565b60005b838110156200069b578154818901526001820191506020810190506200067a565b808801955050505b50505092915050565b60006020820190508181036000830152620006c881846200061c565b905092915050565b61102f80620006e06000396000f3fe6080604052600436106100c65760003560e01c80638da5cb5b1161007f578063e44cec7c11610059578063e44cec7c1461023c578063f2fde38b14610267578063f54b893b14610290578063f8b1cb3c146102cd576100cd565b80638da5cb5b146101b8578063b43e6a53146101e3578063df0f0951146101ff576100cd565b8063099a04e5146100d257806324d7806c146100fb57806330710d041461013857806348c54b9d146101615780634b0bddd214610178578063715018a6146101a1576100cd565b366100cd57005b600080fd5b3480156100de57600080fd5b506100f960048036038101906100f49190610be8565b6102f8565b005b34801561010757600080fd5b50610122600480360381019061011d9190610c28565b610372565b60405161012f9190610c70565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610c8b565b610392565b005b34801561016d57600080fd5b506101766103a4565b005b34801561018457600080fd5b5061019f600480360381019061019a9190610ce4565b61060f565b005b3480156101ad57600080fd5b506101b66106d6565b005b3480156101c457600080fd5b506101cd6106ea565b6040516101da9190610d33565b60405180910390f35b6101fd60048036038101906101f89190610be8565b610713565b005b34801561020b57600080fd5b5061022660048036038101906102219190610c28565b610801565b6040516102339190610d5d565b60405180910390f35b34801561024857600080fd5b50610251610819565b60405161025e9190610d5d565b60405180910390f35b34801561027357600080fd5b5061028e60048036038101906102899190610c28565b61081f565b005b34801561029c57600080fd5b506102b760048036038101906102b29190610c28565b6108a5565b6040516102c49190610d5d565b60405180910390f35b3480156102d957600080fd5b506102e26108bd565b6040516102ef9190610e08565b60405180910390f35b6103006106ea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610364576040517fad9cd75900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61036e828261094b565b5050565b60046020528060005260406000206000915054906101000a900460ff1681565b61039a61099e565b8060058190555050565b60018054146103e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103df90610e76565b60405180910390fd5b60026001819055503373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614610455576040517f3691d20a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104e19190610ec5565b90506000811161051d576040517f6f9c7fcf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80471015610557576040517fabf01a0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105a69190610ef9565b925050819055506105b7338261094b565b3373ffffffffffffffffffffffffffffffffffffffff167f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e430826040516105fd9190610d5d565b60405180910390a25060018081905550565b6106176106ea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461067b576040517fad9cd75900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6106de61099e565b6106e86000610a83565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b80341415806107225750600081145b15610759576040517f2a2bb09200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107a89190610ef9565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167ff3cbbad58a635fe73557a2824874af183b5ac83978ae25d57ea4a2011c4df859826040516107f59190610d5d565b60405180910390a25050565b60026020528060005260406000206000915090505481565b60055481565b61082761099e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108995760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016108909190610d33565b60405180910390fd5b6108a281610a83565b50565b60036020528060005260406000206000915090505481565b600680546108ca90610f5c565b80601f01602080910402602001604051908101604052809291908181526020018280546108f690610f5c565b80156109435780601f1061091857610100808354040283529160200191610943565b820191906000526020600020905b81548152906001019060200180831161092657829003601f168201915b505050505081565b600080600080600085875af1905080610999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099090610fd9565b60405180910390fd5b505050565b60006109a8610b47565b90508073ffffffffffffffffffffffffffffffffffffffff166109c96106ea565b73ffffffffffffffffffffffffffffffffffffffff1614158015610a375750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15610a8057610a44610b47565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610a779190610d33565b60405180910390fd5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7f82610b54565b9050919050565b610b8f81610b74565b8114610b9a57600080fd5b50565b600081359050610bac81610b86565b92915050565b6000819050919050565b610bc581610bb2565b8114610bd057600080fd5b50565b600081359050610be281610bbc565b92915050565b60008060408385031215610bff57610bfe610b4f565b5b6000610c0d85828601610b9d565b9250506020610c1e85828601610bd3565b9150509250929050565b600060208284031215610c3e57610c3d610b4f565b5b6000610c4c84828501610b9d565b91505092915050565b60008115159050919050565b610c6a81610c55565b82525050565b6000602082019050610c856000830184610c61565b92915050565b600060208284031215610ca157610ca0610b4f565b5b6000610caf84828501610bd3565b91505092915050565b610cc181610c55565b8114610ccc57600080fd5b50565b600081359050610cde81610cb8565b92915050565b60008060408385031215610cfb57610cfa610b4f565b5b6000610d0985828601610b9d565b9250506020610d1a85828601610ccf565b9150509250929050565b610d2d81610b74565b82525050565b6000602082019050610d486000830184610d24565b92915050565b610d5781610bb2565b82525050565b6000602082019050610d726000830184610d4e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610db2578082015181840152602081019050610d97565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dda82610d78565b610de48185610d83565b9350610df4818560208601610d94565b610dfd81610dbe565b840191505092915050565b60006020820190508181036000830152610e228184610dcf565b905092915050565b7f5245454e5452414e435900000000000000000000000000000000000000000000600082015250565b6000610e60600a83610d83565b9150610e6b82610e2a565b602082019050919050565b60006020820190508181036000830152610e8f81610e53565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ed082610bb2565b9150610edb83610bb2565b9250828203905081811115610ef357610ef2610e96565b5b92915050565b6000610f0482610bb2565b9150610f0f83610bb2565b9250828201905080821115610f2757610f26610e96565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f7457607f821691505b602082108103610f8757610f86610f2d565b5b50919050565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b6000610fc3601383610d83565b9150610fce82610f8d565b602082019050919050565b60006020820190508181036000830152610ff281610fb6565b905091905056fea2646970667358221220ded4d11dbcf99d66d0eff9399137ba33d09ca9ebd2ddf994758f286633e282ca64736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 DUP1 SSTORE PUSH1 0x2 PUSH1 0x5 SSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x312E302E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x6 SWAP1 DUP2 PUSH3 0x53 SWAP2 SWAP1 PUSH3 0x4C2 JUMP JUMPDEST POP CALLVALUE DUP1 ISZERO PUSH3 0x61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0xD8 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xCF SWAP2 SWAP1 PUSH3 0x5EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0xE9 DUP2 PUSH3 0x184 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 0x4 PUSH32 0x7B78EE99B011DFF919FF5BD97F8A1B33B444782EB490DD7CD487FC963D63676F PUSH1 0x6 PUSH1 0x40 MLOAD PUSH3 0x176 SWAP2 SWAP1 PUSH3 0x6AC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH3 0x6D0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2CA JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2E0 JUMPI PUSH3 0x2DF PUSH3 0x282 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x34A PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x30B JUMP JUMPDEST PUSH3 0x356 DUP7 DUP4 PUSH3 0x30B JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3A3 PUSH3 0x39D PUSH3 0x397 DUP5 PUSH3 0x36E JUMP JUMPDEST PUSH3 0x378 JUMP JUMPDEST PUSH3 0x36E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x3BF DUP4 PUSH3 0x382 JUMP JUMPDEST PUSH3 0x3D7 PUSH3 0x3CE DUP3 PUSH3 0x3AA JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x318 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x3EE PUSH3 0x3DF JUMP JUMPDEST PUSH3 0x3FB DUP2 DUP5 DUP5 PUSH3 0x3B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x423 JUMPI PUSH3 0x417 PUSH1 0x0 DUP3 PUSH3 0x3E4 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x401 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x472 JUMPI PUSH3 0x43C DUP2 PUSH3 0x2E6 JUMP JUMPDEST PUSH3 0x447 DUP5 PUSH3 0x2FB JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x457 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x46F PUSH3 0x466 DUP6 PUSH3 0x2FB JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x400 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x497 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x477 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4B2 DUP4 DUP4 PUSH3 0x484 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x4CD DUP3 PUSH3 0x248 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4E9 JUMPI PUSH3 0x4E8 PUSH3 0x253 JUMP JUMPDEST JUMPDEST PUSH3 0x4F5 DUP3 SLOAD PUSH3 0x2B1 JUMP JUMPDEST PUSH3 0x502 DUP3 DUP3 DUP6 PUSH3 0x427 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x53A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x525 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x531 DUP6 DUP3 PUSH3 0x4A4 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x5A1 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x54A DUP7 PUSH3 0x2E6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x574 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x54D JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x594 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x590 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x484 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5D6 DUP3 PUSH3 0x5A9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x5E8 DUP2 PUSH3 0x5C9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x605 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x5DD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH3 0x62B DUP2 PUSH3 0x2B1 JUMP JUMPDEST PUSH3 0x637 DUP2 DUP7 PUSH3 0x60B JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH3 0x655 JUMPI PUSH1 0x1 DUP2 EQ PUSH3 0x66C JUMPI PUSH3 0x6A3 JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 ISZERO ISZERO PUSH1 0x20 MUL DUP7 ADD SWAP4 POP PUSH3 0x6A3 JUMP JUMPDEST PUSH3 0x677 DUP6 PUSH3 0x2E6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x69B JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x67A JUMP JUMPDEST DUP1 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x6C8 DUP2 DUP5 PUSH3 0x61C JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x102F DUP1 PUSH3 0x6E0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xE44CEC7C GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE44CEC7C EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xF54B893B EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xF8B1CB3C EQ PUSH2 0x2CD JUMPI PUSH2 0xCD JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xB43E6A53 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xDF0F0951 EQ PUSH2 0x1FF JUMPI PUSH2 0xCD JUMP JUMPDEST DUP1 PUSH4 0x99A04E5 EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0x24D7806C EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0x30710D04 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x48C54B9D EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x4B0BDDD2 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1A1 JUMPI PUSH2 0xCD JUMP JUMPDEST CALLDATASIZE PUSH2 0xCD JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF4 SWAP2 SWAP1 PUSH2 0xBE8 JUMP JUMPDEST PUSH2 0x2F8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x122 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11D SWAP2 SWAP1 PUSH2 0xC28 JUMP JUMPDEST PUSH2 0x372 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15A SWAP2 SWAP1 PUSH2 0xC8B JUMP JUMPDEST PUSH2 0x392 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x176 PUSH2 0x3A4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19A SWAP2 SWAP1 PUSH2 0xCE4 JUMP JUMPDEST PUSH2 0x60F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B6 PUSH2 0x6D6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CD PUSH2 0x6EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DA SWAP2 SWAP1 PUSH2 0xD33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F8 SWAP2 SWAP1 PUSH2 0xBE8 JUMP JUMPDEST PUSH2 0x713 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x221 SWAP2 SWAP1 PUSH2 0xC28 JUMP JUMPDEST PUSH2 0x801 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x233 SWAP2 SWAP1 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x819 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25E SWAP2 SWAP1 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x289 SWAP2 SWAP1 PUSH2 0xC28 JUMP JUMPDEST PUSH2 0x81F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B2 SWAP2 SWAP1 PUSH2 0xC28 JUMP JUMPDEST PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C4 SWAP2 SWAP1 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E2 PUSH2 0x8BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0xE08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x300 PUSH2 0x6EA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x364 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAD9CD75900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x36E DUP3 DUP3 PUSH2 0x94B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x39A PUSH2 0x99E JUMP JUMPDEST DUP1 PUSH1 0x5 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD EQ PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3DF SWAP1 PUSH2 0xE76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ORIGIN PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x455 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3691D20A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x4E1 SWAP2 SWAP1 PUSH2 0xEC5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x51D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6F9C7FCF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x557 JUMPI PUSH1 0x40 MLOAD PUSH32 0xABF01A0800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x5A6 SWAP2 SWAP1 PUSH2 0xEF9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x5B7 CALLER DUP3 PUSH2 0x94B JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x896E034966EAAF1ADC54ACC0F257056FEBBD300C9E47182CF761982CF1F5E430 DUP3 PUSH1 0x40 MLOAD PUSH2 0x5FD SWAP2 SWAP1 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x617 PUSH2 0x6EA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH32 0xAD9CD75900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x6DE PUSH2 0x99E JUMP JUMPDEST PUSH2 0x6E8 PUSH1 0x0 PUSH2 0xA83 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST DUP1 CALLVALUE EQ ISZERO DUP1 PUSH2 0x722 JUMPI POP PUSH1 0x0 DUP2 EQ JUMPDEST ISZERO PUSH2 0x759 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2A2BB09200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7A8 SWAP2 SWAP1 PUSH2 0xEF9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF3CBBAD58A635FE73557A2824874AF183B5AC83978AE25D57EA4A2011C4DF859 DUP3 PUSH1 0x40 MLOAD PUSH2 0x7F5 SWAP2 SWAP1 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x827 PUSH2 0x99E JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x899 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x890 SWAP2 SWAP1 PUSH2 0xD33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8A2 DUP2 PUSH2 0xA83 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH2 0x8CA SWAP1 PUSH2 0xF5C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8F6 SWAP1 PUSH2 0xF5C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x943 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x918 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x943 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x926 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP8 GAS CALL SWAP1 POP DUP1 PUSH2 0x999 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x990 SWAP1 PUSH2 0xFD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A8 PUSH2 0xB47 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9C9 PUSH2 0x6EA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0xA37 JUMPI POP PUSH1 0x4 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0xA80 JUMPI PUSH2 0xA44 PUSH2 0xB47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA77 SWAP2 SWAP1 PUSH2 0xD33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB7F DUP3 PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB8F DUP2 PUSH2 0xB74 JUMP JUMPDEST DUP2 EQ PUSH2 0xB9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBAC DUP2 PUSH2 0xB86 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBC5 DUP2 PUSH2 0xBB2 JUMP JUMPDEST DUP2 EQ PUSH2 0xBD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBE2 DUP2 PUSH2 0xBBC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBFF JUMPI PUSH2 0xBFE PUSH2 0xB4F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC0D DUP6 DUP3 DUP7 ADD PUSH2 0xB9D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC1E DUP6 DUP3 DUP7 ADD PUSH2 0xBD3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC3E JUMPI PUSH2 0xC3D PUSH2 0xB4F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC4C DUP5 DUP3 DUP6 ADD PUSH2 0xB9D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC6A DUP2 PUSH2 0xC55 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC85 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC61 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA1 JUMPI PUSH2 0xCA0 PUSH2 0xB4F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCAF DUP5 DUP3 DUP6 ADD PUSH2 0xBD3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xCC1 DUP2 PUSH2 0xC55 JUMP JUMPDEST DUP2 EQ PUSH2 0xCCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xCDE DUP2 PUSH2 0xCB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCFB JUMPI PUSH2 0xCFA PUSH2 0xB4F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD09 DUP6 DUP3 DUP7 ADD PUSH2 0xB9D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD1A DUP6 DUP3 DUP7 ADD PUSH2 0xCCF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xD2D DUP2 PUSH2 0xB74 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD48 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD24 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD57 DUP2 PUSH2 0xBB2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD72 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDB2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xD97 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 PUSH2 0xD78 JUMP JUMPDEST PUSH2 0xDE4 DUP2 DUP6 PUSH2 0xD83 JUMP JUMPDEST SWAP4 POP PUSH2 0xDF4 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xD94 JUMP JUMPDEST PUSH2 0xDFD DUP2 PUSH2 0xDBE JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE22 DUP2 DUP5 PUSH2 0xDCF JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5245454E5452414E435900000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE60 PUSH1 0xA DUP4 PUSH2 0xD83 JUMP JUMPDEST SWAP2 POP PUSH2 0xE6B DUP3 PUSH2 0xE2A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE8F DUP2 PUSH2 0xE53 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xED0 DUP3 PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP PUSH2 0xEDB DUP4 PUSH2 0xBB2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xEF3 JUMPI PUSH2 0xEF2 PUSH2 0xE96 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF04 DUP3 PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP PUSH2 0xF0F DUP4 PUSH2 0xBB2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xF27 JUMPI PUSH2 0xF26 PUSH2 0xE96 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xF74 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF87 JUMPI PUSH2 0xF86 PUSH2 0xF2D JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4554485F5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFC3 PUSH1 0x13 DUP4 PUSH2 0xD83 JUMP JUMPDEST SWAP2 POP PUSH2 0xFCE DUP3 PUSH2 0xF8D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFF2 DUP2 PUSH2 0xFB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE 0xD4 0xD1 SAR 0xBC 0xF9 SWAP14 PUSH7 0xD0EFF9399137BA CALLER 0xD0 SWAP13 0xA9 0xEB 0xD2 0xDD 0xF9 SWAP5 PUSH22 0x8F286633E282CA64736F6C6343000813003300000000 ",
							"sourceMap": "405:2688:8:-:0;;;454:1:6;429:26;;796:1:8;763:34;;806:32;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1038:122;;;;;;;;;;1060:10;1296:1:0;1272:26;;:12;:26;;;1268:95;;1349:1;1321:31;;;;;;;;;;;:::i;:::-;;;;;;;;1268:95;1372:32;1391:12;1372:18;;;:32;;:::i;:::-;1224:187;1105:4:8::1;1083:7;:19;1091:10;1083:19;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;1140:1;1125:27;1143:8;1125:27;;;;;;:::i;:::-;;;;;;;;405:2688:::0;;2911:187:0;2984:16;3003:6;;;;;;;;;;;2984:25;;3028:8;3019:6;;:17;;;;;;;;;;;;;;;;;;3082:8;3051:40;;3072:8;3051:40;;;;;;;;;;;;2974:124;2911:187;:::o;7:99:9:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;5234:126::-;5271:7;5311:42;5304:5;5300:54;5289:65;;5234:126;;;:::o;5366:96::-;5403:7;5432:24;5450:5;5432:24;:::i;:::-;5421:35;;5366:96;;;:::o;5468:118::-;5555:24;5573:5;5555:24;:::i;:::-;5550:3;5543:37;5468:118;;:::o;5592:222::-;5685:4;5723:2;5712:9;5708:18;5700:26;;5736:71;5804:1;5793:9;5789:17;5780:6;5736:71;:::i;:::-;5592:222;;;;:::o;5820:169::-;5904:11;5938:6;5933:3;5926:19;5978:4;5973:3;5969:14;5954:29;;5820:169;;;;:::o;6019:831::-;6104:3;6141:5;6135:12;6170:36;6196:9;6170:36;:::i;:::-;6222:71;6286:6;6281:3;6222:71;:::i;:::-;6215:78;;6324:1;6313:9;6309:17;6340:1;6335:164;;;;6513:1;6508:336;;;;6302:542;;6335:164;6419:4;6415:9;6404;6400:25;6395:3;6388:38;6479:6;6472:14;6465:22;6459:4;6455:33;6450:3;6446:43;6439:50;;6335:164;;6508:336;6575:38;6607:5;6575:38;:::i;:::-;6635:1;6649:154;6663:6;6660:1;6657:13;6649:154;;;6737:7;6731:14;6727:1;6722:3;6718:11;6711:35;6787:1;6778:7;6774:15;6763:26;;6685:4;6682:1;6678:12;6673:17;;6649:154;;;6832:1;6827:3;6823:11;6816:18;;6515:329;;6302:542;;6108:742;;6019:831;;;;:::o;6856:307::-;6966:4;7004:2;6993:9;6989:18;6981:26;;7053:9;7047:4;7043:20;7039:1;7028:9;7024:17;7017:47;7081:75;7151:4;7142:6;7081:75;:::i;:::-;7073:83;;6856:307;;;;:::o;405:2688:8:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_1127": {
									"entryPoint": null,
									"id": 1127,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkOwner_1153": {
									"entryPoint": 2462,
									"id": 1153,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_915": {
									"entryPoint": 2887,
									"id": 915,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_146": {
									"entryPoint": 2691,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@alreadyClaimed_1075": {
									"entryPoint": 2213,
									"id": 1075,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@claimTokens_1312": {
									"entryPoint": 932,
									"id": 1312,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isAdmin_1079": {
									"entryPoint": 882,
									"id": 1079,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@obtainedAmount_1071": {
									"entryPoint": 2049,
									"id": 1071,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@owner_67": {
									"entryPoint": 1770,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@recommendAmount_1082": {
									"entryPoint": 2073,
									"id": 1082,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@renounceOwnership_98": {
									"entryPoint": 1750,
									"id": 98,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@rescueETH_1200": {
									"entryPoint": 760,
									"id": 1200,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@safeTransferETH_981": {
									"entryPoint": 2379,
									"id": 981,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@setAdmin_1176": {
									"entryPoint": 1551,
									"id": 1176,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@setClaimableTokens_1245": {
									"entryPoint": 1811,
									"id": 1245,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@setRecommendAmount_1213": {
									"entryPoint": 914,
									"id": 1213,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transferOwnership_126": {
									"entryPoint": 2079,
									"id": 126,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@versions_1085": {
									"entryPoint": 2237,
									"id": 1085,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 2973,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool": {
									"entryPoint": 3279,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 3027,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3112,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 3300,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3048,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3211,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 3364,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 3169,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3535,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3667,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_stringliteral_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 4022,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 3406,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 3379,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 3184,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3592,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3702,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4057,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 3421,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 3448,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 3459,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3833,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 3781,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 2932,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 3157,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 2900,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 2994,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 3476,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 3932,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3734,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 3885,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 2895,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 3518,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"store_literal_in_memory_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59": {
									"entryPoint": 3626,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"store_literal_in_memory_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29": {
									"entryPoint": 3981,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 2950,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 3256,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 3004,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:8582:9",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:9",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:9"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:9"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:9",
														"type": ""
													}
												],
												"src": "7:75:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:9"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:9"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:9",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:9",
														"type": ""
													}
												],
												"src": "334:126:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:9",
														"type": ""
													}
												],
												"src": "466:96:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:9"
															},
															"nodeType": "YulIf",
															"src": "621:63:9"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:9",
														"type": ""
													}
												],
												"src": "568:122:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "748:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "758:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "780:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "767:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "767:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "758:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "823:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "796:26:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "796:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "796:33:9"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "726:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "734:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "742:5:9",
														"type": ""
													}
												],
												"src": "696:139:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "886:32:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "896:16:9",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "907:5:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "896:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "868:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "878:7:9",
														"type": ""
													}
												],
												"src": "841:77:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "967:79:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1024:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1033:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1036:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1026:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1026:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1026:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "990:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1015:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "997:17:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "997:24:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "987:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "987:35:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "980:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "980:43:9"
															},
															"nodeType": "YulIf",
															"src": "977:63:9"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "960:5:9",
														"type": ""
													}
												],
												"src": "924:122:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1104:87:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1114:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1136:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1123:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1123:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1114:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1179:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1152:26:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1152:33:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1152:33:9"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1082:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1090:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1098:5:9",
														"type": ""
													}
												],
												"src": "1052:139:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1280:391:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1326:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1328:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1328:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1328:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1301:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1310:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1297:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1297:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1322:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1293:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1293:32:9"
															},
															"nodeType": "YulIf",
															"src": "1290:119:9"
														},
														{
															"nodeType": "YulBlock",
															"src": "1419:117:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1434:15:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1448:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1438:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1463:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1498:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1509:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1494:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1494:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1518:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1473:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1473:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1463:6:9"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1546:118:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1561:16:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1575:2:9",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1565:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1591:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1626:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1637:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1622:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1622:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1646:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1601:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1601:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1591:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1242:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1253:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1265:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1273:6:9",
														"type": ""
													}
												],
												"src": "1197:474:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1743:263:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1789:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1791:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1791:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1791:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1764:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1773:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1760:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1760:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1785:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1756:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "1756:32:9"
															},
															"nodeType": "YulIf",
															"src": "1753:119:9"
														},
														{
															"nodeType": "YulBlock",
															"src": "1882:117:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1897:15:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1911:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1901:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1926:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1961:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1972:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1957:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1957:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1981:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1936:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1936:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1926:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1713:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1724:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1736:6:9",
														"type": ""
													}
												],
												"src": "1677:329:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2054:48:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2064:32:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2089:5:9"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2082:6:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2082:13:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2075:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2075:21:9"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2064:7:9"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2036:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2046:7:9",
														"type": ""
													}
												],
												"src": "2012:90:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2167:50:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2184:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2204:5:9"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "2189:14:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2189:21:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2177:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2177:34:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2177:34:9"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2155:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2162:3:9",
														"type": ""
													}
												],
												"src": "2108:109:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2315:118:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2325:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2337:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2348:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2333:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2333:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2325:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2399:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2412:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2423:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2408:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2408:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "2361:37:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2361:65:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2361:65:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2287:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2299:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2310:4:9",
														"type": ""
													}
												],
												"src": "2223:210:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2505:263:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2551:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2553:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2553:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2553:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2526:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2535:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2522:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2522:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2547:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2518:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2518:32:9"
															},
															"nodeType": "YulIf",
															"src": "2515:119:9"
														},
														{
															"nodeType": "YulBlock",
															"src": "2644:117:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2659:15:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2673:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2663:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2688:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2723:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2734:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2719:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2719:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2743:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2698:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2698:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2688:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2475:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2486:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2498:6:9",
														"type": ""
													}
												],
												"src": "2439:329:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2814:76:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2868:16:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2877:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2880:1:9",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2870:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2870:12:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2870:12:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2837:5:9"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2859:5:9"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "2844:14:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2844:21:9"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2834:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2834:32:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2827:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2827:40:9"
															},
															"nodeType": "YulIf",
															"src": "2824:60:9"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2807:5:9",
														"type": ""
													}
												],
												"src": "2774:116:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2945:84:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2955:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2977:6:9"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2964:12:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2964:20:9"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2955:5:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3017:5:9"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "2993:23:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "2993:30:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2993:30:9"
														}
													]
												},
												"name": "abi_decode_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2923:6:9",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2931:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2939:5:9",
														"type": ""
													}
												],
												"src": "2896:133:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3115:388:9",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3161:83:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3163:77:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3163:79:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3163:79:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3136:7:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3145:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3132:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3132:23:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3157:2:9",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3128:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3128:32:9"
															},
															"nodeType": "YulIf",
															"src": "3125:119:9"
														},
														{
															"nodeType": "YulBlock",
															"src": "3254:117:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3269:15:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3283:1:9",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3273:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3298:63:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3333:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3344:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3329:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3329:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3353:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3308:20:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3308:53:9"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3298:6:9"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "3381:115:9",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3396:16:9",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3410:2:9",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3400:6:9",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3426:60:9",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3458:9:9"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3469:6:9"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3454:3:9"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3454:22:9"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3478:7:9"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "3436:17:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3436:50:9"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "3426:6:9"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3077:9:9",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3088:7:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3100:6:9",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3108:6:9",
														"type": ""
													}
												],
												"src": "3035:468:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3574:53:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3591:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3614:5:9"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3596:17:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3596:24:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3584:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3584:37:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3584:37:9"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3562:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3569:3:9",
														"type": ""
													}
												],
												"src": "3509:118:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3731:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3741:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3753:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3764:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3749:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3749:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3741:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3821:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3834:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3845:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3830:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3830:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3777:43:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3777:71:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3777:71:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3703:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3715:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3726:4:9",
														"type": ""
													}
												],
												"src": "3633:222:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3926:53:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3943:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3966:5:9"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3948:17:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3948:24:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3936:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "3936:37:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3936:37:9"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3914:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3921:3:9",
														"type": ""
													}
												],
												"src": "3861:118:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4083:124:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4093:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4105:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4116:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4101:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4101:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4093:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4173:6:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4186:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4197:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4182:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4182:17:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4129:43:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4129:71:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4129:71:9"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4055:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4067:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4078:4:9",
														"type": ""
													}
												],
												"src": "3985:222:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4272:40:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4283:22:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4299:5:9"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4293:5:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4293:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "4283:6:9"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4255:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4265:6:9",
														"type": ""
													}
												],
												"src": "4213:99:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4414:73:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4431:3:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4436:6:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4424:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4424:19:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4424:19:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4452:29:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4471:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4476:4:9",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4467:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4467:14:9"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "4452:11:9"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4386:3:9",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4391:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "4402:11:9",
														"type": ""
													}
												],
												"src": "4318:169:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4555:184:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4565:10:9",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4574:1:9",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "4569:1:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4634:63:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "4659:3:9"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "4664:1:9"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4655:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4655:11:9"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "4678:3:9"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "4683:1:9"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "4674:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4674:11:9"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "4668:5:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4668:18:9"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4648:6:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4648:39:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4648:39:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "4595:1:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4598:6:9"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "4592:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4592:13:9"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "4606:19:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4608:15:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "4617:1:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4620:2:9",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4613:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4613:10:9"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "4608:1:9"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "4588:3:9",
																"statements": []
															},
															"src": "4584:113:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "4717:3:9"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4722:6:9"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4713:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4713:16:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4731:1:9",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4706:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4706:27:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4706:27:9"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "4537:3:9",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "4542:3:9",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4547:6:9",
														"type": ""
													}
												],
												"src": "4493:246:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4793:54:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4803:38:9",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4821:5:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4828:2:9",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4817:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4817:14:9"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4837:2:9",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "4833:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4833:7:9"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4813:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4813:28:9"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "4803:6:9"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4776:5:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "4786:6:9",
														"type": ""
													}
												],
												"src": "4745:102:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4945:285:9",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4955:53:9",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5002:5:9"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "4969:32:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "4969:39:9"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4959:6:9",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5017:78:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5083:3:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5088:6:9"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5024:58:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5024:71:9"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5017:3:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5143:5:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5150:4:9",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5139:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5139:16:9"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5157:3:9"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5162:6:9"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "5104:34:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5104:65:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5104:65:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5178:46:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5189:3:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5216:6:9"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "5194:21:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5194:29:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5185:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5185:39:9"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5178:3:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4926:5:9",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4933:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4941:3:9",
														"type": ""
													}
												],
												"src": "4853:377:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5354:195:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5364:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5376:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5387:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5372:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5372:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5364:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5411:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5422:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5407:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5407:17:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "5430:4:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5436:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5426:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5426:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5400:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5400:47:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5400:47:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5456:86:9",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5528:6:9"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "5537:4:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5464:63:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5464:78:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5456:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5326:9:9",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5338:6:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5349:4:9",
														"type": ""
													}
												],
												"src": "5236:313:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5661:54:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "5683:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5691:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5679:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5679:14:9"
																	},
																	{
																		"hexValue": "5245454e5452414e4359",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5695:12:9",
																		"type": "",
																		"value": "REENTRANCY"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5672:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5672:36:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5672:36:9"
														}
													]
												},
												"name": "store_literal_in_memory_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "5653:6:9",
														"type": ""
													}
												],
												"src": "5555:160:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5867:220:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5877:74:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5943:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5948:2:9",
																		"type": "",
																		"value": "10"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5884:58:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5884:67:9"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "5877:3:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6049:3:9"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59",
																	"nodeType": "YulIdentifier",
																	"src": "5960:88:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "5960:93:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5960:93:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6062:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6073:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6078:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6069:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6069:12:9"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6062:3:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "5855:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5863:3:9",
														"type": ""
													}
												],
												"src": "5721:366:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6264:248:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6274:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6286:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6297:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6282:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6282:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6274:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6321:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6332:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6317:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6317:17:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "6340:4:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6346:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6336:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6336:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6310:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6310:47:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6310:47:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6366:139:9",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "6500:4:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6374:124:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6374:131:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6366:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6244:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6259:4:9",
														"type": ""
													}
												],
												"src": "6093:419:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6546:152:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6563:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6566:77:9",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6556:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6556:88:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6556:88:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6660:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6663:4:9",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6653:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6653:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6653:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6684:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6687:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6677:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6677:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6677:15:9"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6518:180:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6749:149:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6759:25:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6782:1:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "6764:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6764:20:9"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "6759:1:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6793:25:9",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6816:1:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "6798:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6798:20:9"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "6793:1:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6827:17:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6839:1:9"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6842:1:9"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "6835:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6835:9:9"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "6827:4:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6869:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6871:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6871:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6871:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "6860:4:9"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6866:1:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6857:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6857:11:9"
															},
															"nodeType": "YulIf",
															"src": "6854:37:9"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6735:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6738:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "6744:4:9",
														"type": ""
													}
												],
												"src": "6704:194:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6948:147:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6958:25:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6981:1:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "6963:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6963:20:9"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "6958:1:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6992:25:9",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7015:1:9"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "6997:17:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "6997:20:9"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "6992:1:9"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7026:16:9",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7037:1:9"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "7040:1:9"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7033:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7033:9:9"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "7026:3:9"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7066:22:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "7068:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7068:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7068:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "7058:1:9"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "7061:3:9"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7055:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7055:10:9"
															},
															"nodeType": "YulIf",
															"src": "7052:36:9"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6935:1:9",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6938:1:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "6944:3:9",
														"type": ""
													}
												],
												"src": "6904:191:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7129:152:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7146:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7149:77:9",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7139:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7139:88:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7139:88:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7243:1:9",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7246:4:9",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7236:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7236:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7236:15:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7267:1:9",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7270:4:9",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7260:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7260:15:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7260:15:9"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "7101:180:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7338:269:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7348:22:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "7362:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7368:1:9",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "7358:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7358:12:9"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "7348:6:9"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7379:38:9",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "7409:4:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7415:1:9",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "7405:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7405:12:9"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "7383:18:9",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7456:51:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7470:27:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "7484:6:9"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7492:4:9",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "7480:3:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7480:17:9"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "7470:6:9"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "7436:18:9"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7429:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7429:26:9"
															},
															"nodeType": "YulIf",
															"src": "7426:81:9"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7559:42:9",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "7573:16:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7573:18:9"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7573:18:9"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "7523:18:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "7546:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7554:2:9",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "7543:2:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7543:14:9"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "7520:2:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7520:38:9"
															},
															"nodeType": "YulIf",
															"src": "7517:84:9"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "7322:4:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7331:6:9",
														"type": ""
													}
												],
												"src": "7287:320:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7719:63:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7741:6:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7749:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7737:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7737:14:9"
																	},
																	{
																		"hexValue": "4554485f5452414e534645525f4641494c4544",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7753:21:9",
																		"type": "",
																		"value": "ETH_TRANSFER_FAILED"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7730:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7730:45:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7730:45:9"
														}
													]
												},
												"name": "store_literal_in_memory_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "7711:6:9",
														"type": ""
													}
												],
												"src": "7613:169:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7934:220:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7944:74:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8010:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8015:2:9",
																		"type": "",
																		"value": "19"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7951:58:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "7951:67:9"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7944:3:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8116:3:9"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29",
																	"nodeType": "YulIdentifier",
																	"src": "8027:88:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8027:93:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8027:93:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8129:19:9",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "8140:3:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8145:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8136:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8136:12:9"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "8129:3:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7922:3:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7930:3:9",
														"type": ""
													}
												],
												"src": "7788:366:9"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8331:248:9",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8341:26:9",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8353:9:9"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8364:2:9",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8349:3:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8349:18:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8341:4:9"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8388:9:9"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8399:1:9",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8384:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8384:17:9"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8407:4:9"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8413:9:9"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8403:3:9"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8403:20:9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8377:6:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8377:47:9"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8377:47:9"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8433:139:9",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8567:4:9"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8441:124:9"
																},
																"nodeType": "YulFunctionCall",
																"src": "8441:131:9"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8433:4:9"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8311:9:9",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8326:4:9",
														"type": ""
													}
												],
												"src": "8160:419:9"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function store_literal_in_memory_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59(memPtr) {\n\n        mstore(add(memPtr, 0), \"REENTRANCY\")\n\n    }\n\n    function abi_encode_t_stringliteral_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 10)\n        store_literal_in_memory_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29(memPtr) {\n\n        mstore(add(memPtr, 0), \"ETH_TRANSFER_FAILED\")\n\n    }\n\n    function abi_encode_t_stringliteral_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n        store_literal_in_memory_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n",
									"id": 9,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100c65760003560e01c80638da5cb5b1161007f578063e44cec7c11610059578063e44cec7c1461023c578063f2fde38b14610267578063f54b893b14610290578063f8b1cb3c146102cd576100cd565b80638da5cb5b146101b8578063b43e6a53146101e3578063df0f0951146101ff576100cd565b8063099a04e5146100d257806324d7806c146100fb57806330710d041461013857806348c54b9d146101615780634b0bddd214610178578063715018a6146101a1576100cd565b366100cd57005b600080fd5b3480156100de57600080fd5b506100f960048036038101906100f49190610be8565b6102f8565b005b34801561010757600080fd5b50610122600480360381019061011d9190610c28565b610372565b60405161012f9190610c70565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610c8b565b610392565b005b34801561016d57600080fd5b506101766103a4565b005b34801561018457600080fd5b5061019f600480360381019061019a9190610ce4565b61060f565b005b3480156101ad57600080fd5b506101b66106d6565b005b3480156101c457600080fd5b506101cd6106ea565b6040516101da9190610d33565b60405180910390f35b6101fd60048036038101906101f89190610be8565b610713565b005b34801561020b57600080fd5b5061022660048036038101906102219190610c28565b610801565b6040516102339190610d5d565b60405180910390f35b34801561024857600080fd5b50610251610819565b60405161025e9190610d5d565b60405180910390f35b34801561027357600080fd5b5061028e60048036038101906102899190610c28565b61081f565b005b34801561029c57600080fd5b506102b760048036038101906102b29190610c28565b6108a5565b6040516102c49190610d5d565b60405180910390f35b3480156102d957600080fd5b506102e26108bd565b6040516102ef9190610e08565b60405180910390f35b6103006106ea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610364576040517fad9cd75900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61036e828261094b565b5050565b60046020528060005260406000206000915054906101000a900460ff1681565b61039a61099e565b8060058190555050565b60018054146103e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103df90610e76565b60405180910390fd5b60026001819055503373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614610455576040517f3691d20a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104e19190610ec5565b90506000811161051d576040517f6f9c7fcf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80471015610557576040517fabf01a0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105a69190610ef9565b925050819055506105b7338261094b565b3373ffffffffffffffffffffffffffffffffffffffff167f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e430826040516105fd9190610d5d565b60405180910390a25060018081905550565b6106176106ea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461067b576040517fad9cd75900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6106de61099e565b6106e86000610a83565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b80341415806107225750600081145b15610759576040517f2a2bb09200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107a89190610ef9565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167ff3cbbad58a635fe73557a2824874af183b5ac83978ae25d57ea4a2011c4df859826040516107f59190610d5d565b60405180910390a25050565b60026020528060005260406000206000915090505481565b60055481565b61082761099e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108995760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016108909190610d33565b60405180910390fd5b6108a281610a83565b50565b60036020528060005260406000206000915090505481565b600680546108ca90610f5c565b80601f01602080910402602001604051908101604052809291908181526020018280546108f690610f5c565b80156109435780601f1061091857610100808354040283529160200191610943565b820191906000526020600020905b81548152906001019060200180831161092657829003601f168201915b505050505081565b600080600080600085875af1905080610999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099090610fd9565b60405180910390fd5b505050565b60006109a8610b47565b90508073ffffffffffffffffffffffffffffffffffffffff166109c96106ea565b73ffffffffffffffffffffffffffffffffffffffff1614158015610a375750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15610a8057610a44610b47565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610a779190610d33565b60405180910390fd5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7f82610b54565b9050919050565b610b8f81610b74565b8114610b9a57600080fd5b50565b600081359050610bac81610b86565b92915050565b6000819050919050565b610bc581610bb2565b8114610bd057600080fd5b50565b600081359050610be281610bbc565b92915050565b60008060408385031215610bff57610bfe610b4f565b5b6000610c0d85828601610b9d565b9250506020610c1e85828601610bd3565b9150509250929050565b600060208284031215610c3e57610c3d610b4f565b5b6000610c4c84828501610b9d565b91505092915050565b60008115159050919050565b610c6a81610c55565b82525050565b6000602082019050610c856000830184610c61565b92915050565b600060208284031215610ca157610ca0610b4f565b5b6000610caf84828501610bd3565b91505092915050565b610cc181610c55565b8114610ccc57600080fd5b50565b600081359050610cde81610cb8565b92915050565b60008060408385031215610cfb57610cfa610b4f565b5b6000610d0985828601610b9d565b9250506020610d1a85828601610ccf565b9150509250929050565b610d2d81610b74565b82525050565b6000602082019050610d486000830184610d24565b92915050565b610d5781610bb2565b82525050565b6000602082019050610d726000830184610d4e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610db2578082015181840152602081019050610d97565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dda82610d78565b610de48185610d83565b9350610df4818560208601610d94565b610dfd81610dbe565b840191505092915050565b60006020820190508181036000830152610e228184610dcf565b905092915050565b7f5245454e5452414e435900000000000000000000000000000000000000000000600082015250565b6000610e60600a83610d83565b9150610e6b82610e2a565b602082019050919050565b60006020820190508181036000830152610e8f81610e53565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ed082610bb2565b9150610edb83610bb2565b9250828203905081811115610ef357610ef2610e96565b5b92915050565b6000610f0482610bb2565b9150610f0f83610bb2565b9250828201905080821115610f2757610f26610e96565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f7457607f821691505b602082108103610f8757610f86610f2d565b5b50919050565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b6000610fc3601383610d83565b9150610fce82610f8d565b602082019050919050565b60006020820190508181036000830152610ff281610fb6565b905091905056fea2646970667358221220ded4d11dbcf99d66d0eff9399137ba33d09ca9ebd2ddf994758f286633e282ca64736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC6 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xE44CEC7C GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE44CEC7C EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xF54B893B EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xF8B1CB3C EQ PUSH2 0x2CD JUMPI PUSH2 0xCD JUMP JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xB43E6A53 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0xDF0F0951 EQ PUSH2 0x1FF JUMPI PUSH2 0xCD JUMP JUMPDEST DUP1 PUSH4 0x99A04E5 EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0x24D7806C EQ PUSH2 0xFB JUMPI DUP1 PUSH4 0x30710D04 EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x48C54B9D EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x4B0BDDD2 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1A1 JUMPI PUSH2 0xCD JUMP JUMPDEST CALLDATASIZE PUSH2 0xCD JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF4 SWAP2 SWAP1 PUSH2 0xBE8 JUMP JUMPDEST PUSH2 0x2F8 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x122 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x11D SWAP2 SWAP1 PUSH2 0xC28 JUMP JUMPDEST PUSH2 0x372 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC70 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15A SWAP2 SWAP1 PUSH2 0xC8B JUMP JUMPDEST PUSH2 0x392 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x176 PUSH2 0x3A4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19A SWAP2 SWAP1 PUSH2 0xCE4 JUMP JUMPDEST PUSH2 0x60F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B6 PUSH2 0x6D6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CD PUSH2 0x6EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DA SWAP2 SWAP1 PUSH2 0xD33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F8 SWAP2 SWAP1 PUSH2 0xBE8 JUMP JUMPDEST PUSH2 0x713 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x226 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x221 SWAP2 SWAP1 PUSH2 0xC28 JUMP JUMPDEST PUSH2 0x801 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x233 SWAP2 SWAP1 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x819 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25E SWAP2 SWAP1 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x28E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x289 SWAP2 SWAP1 PUSH2 0xC28 JUMP JUMPDEST PUSH2 0x81F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2B7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B2 SWAP2 SWAP1 PUSH2 0xC28 JUMP JUMPDEST PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C4 SWAP2 SWAP1 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E2 PUSH2 0x8BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0xE08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x300 PUSH2 0x6EA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x364 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAD9CD75900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x36E DUP3 DUP3 PUSH2 0x94B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x39A PUSH2 0x99E JUMP JUMPDEST DUP1 PUSH1 0x5 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD EQ PUSH2 0x3E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3DF SWAP1 PUSH2 0xE76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ORIGIN PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x455 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3691D20A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x2 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x4E1 SWAP2 SWAP1 PUSH2 0xEC5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x51D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6F9C7FCF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x557 JUMPI PUSH1 0x40 MLOAD PUSH32 0xABF01A0800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x5A6 SWAP2 SWAP1 PUSH2 0xEF9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x5B7 CALLER DUP3 PUSH2 0x94B JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x896E034966EAAF1ADC54ACC0F257056FEBBD300C9E47182CF761982CF1F5E430 DUP3 PUSH1 0x40 MLOAD PUSH2 0x5FD SWAP2 SWAP1 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 0x1 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x617 PUSH2 0x6EA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x67B JUMPI PUSH1 0x40 MLOAD PUSH32 0xAD9CD75900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0x6DE PUSH2 0x99E JUMP JUMPDEST PUSH2 0x6E8 PUSH1 0x0 PUSH2 0xA83 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST DUP1 CALLVALUE EQ ISZERO DUP1 PUSH2 0x722 JUMPI POP PUSH1 0x0 DUP2 EQ JUMPDEST ISZERO PUSH2 0x759 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2A2BB09200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x7A8 SWAP2 SWAP1 PUSH2 0xEF9 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF3CBBAD58A635FE73557A2824874AF183B5AC83978AE25D57EA4A2011C4DF859 DUP3 PUSH1 0x40 MLOAD PUSH2 0x7F5 SWAP2 SWAP1 PUSH2 0xD5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x827 PUSH2 0x99E JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x899 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x890 SWAP2 SWAP1 PUSH2 0xD33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8A2 DUP2 PUSH2 0xA83 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH2 0x8CA SWAP1 PUSH2 0xF5C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x8F6 SWAP1 PUSH2 0xF5C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x943 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x918 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x943 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x926 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP8 GAS CALL SWAP1 POP DUP1 PUSH2 0x999 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x990 SWAP1 PUSH2 0xFD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9A8 PUSH2 0xB47 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x9C9 PUSH2 0x6EA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0xA37 JUMPI POP PUSH1 0x4 PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO JUMPDEST ISZERO PUSH2 0xA80 JUMPI PUSH2 0xA44 PUSH2 0xB47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA77 SWAP2 SWAP1 PUSH2 0xD33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB7F DUP3 PUSH2 0xB54 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB8F DUP2 PUSH2 0xB74 JUMP JUMPDEST DUP2 EQ PUSH2 0xB9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBAC DUP2 PUSH2 0xB86 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBC5 DUP2 PUSH2 0xBB2 JUMP JUMPDEST DUP2 EQ PUSH2 0xBD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBE2 DUP2 PUSH2 0xBBC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBFF JUMPI PUSH2 0xBFE PUSH2 0xB4F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC0D DUP6 DUP3 DUP7 ADD PUSH2 0xB9D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC1E DUP6 DUP3 DUP7 ADD PUSH2 0xBD3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC3E JUMPI PUSH2 0xC3D PUSH2 0xB4F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC4C DUP5 DUP3 DUP6 ADD PUSH2 0xB9D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC6A DUP2 PUSH2 0xC55 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC85 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC61 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCA1 JUMPI PUSH2 0xCA0 PUSH2 0xB4F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xCAF DUP5 DUP3 DUP6 ADD PUSH2 0xBD3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xCC1 DUP2 PUSH2 0xC55 JUMP JUMPDEST DUP2 EQ PUSH2 0xCCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xCDE DUP2 PUSH2 0xCB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCFB JUMPI PUSH2 0xCFA PUSH2 0xB4F JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD09 DUP6 DUP3 DUP7 ADD PUSH2 0xB9D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD1A DUP6 DUP3 DUP7 ADD PUSH2 0xCCF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xD2D DUP2 PUSH2 0xB74 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD48 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD24 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD57 DUP2 PUSH2 0xBB2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xD72 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xDB2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xD97 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDA DUP3 PUSH2 0xD78 JUMP JUMPDEST PUSH2 0xDE4 DUP2 DUP6 PUSH2 0xD83 JUMP JUMPDEST SWAP4 POP PUSH2 0xDF4 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xD94 JUMP JUMPDEST PUSH2 0xDFD DUP2 PUSH2 0xDBE JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE22 DUP2 DUP5 PUSH2 0xDCF JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x5245454E5452414E435900000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE60 PUSH1 0xA DUP4 PUSH2 0xD83 JUMP JUMPDEST SWAP2 POP PUSH2 0xE6B DUP3 PUSH2 0xE2A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE8F DUP2 PUSH2 0xE53 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xED0 DUP3 PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP PUSH2 0xEDB DUP4 PUSH2 0xBB2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0xEF3 JUMPI PUSH2 0xEF2 PUSH2 0xE96 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF04 DUP3 PUSH2 0xBB2 JUMP JUMPDEST SWAP2 POP PUSH2 0xF0F DUP4 PUSH2 0xBB2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xF27 JUMPI PUSH2 0xF26 PUSH2 0xE96 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xF74 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF87 JUMPI PUSH2 0xF86 PUSH2 0xF2D JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4554485F5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFC3 PUSH1 0x13 DUP4 PUSH2 0xD83 JUMP JUMPDEST SWAP2 POP PUSH2 0xFCE DUP3 PUSH2 0xF8D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFF2 DUP2 PUSH2 0xFB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE 0xD4 0xD1 SAR 0xBC 0xF9 SWAP14 PUSH7 0xD0EFF9399137BA CALLER 0xD0 SWAP13 0xA9 0xEB 0xD2 0xDD 0xF9 SWAP5 PUSH22 0x8F286633E282CA64736F6C6343000813003300000000 ",
							"sourceMap": "405:2688:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1606:175;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;717:39;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1924:126;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2603:487;;;;;;;;;;;;;:::i;:::-;;1442:156;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2292:101:0;;;;;;;;;;;;;:::i;:::-;;1637:85;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2251:250:8;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;605:49;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;763:34;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2542:215:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;661:49:8;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;806:32;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1606:175;1692:7;:5;:7::i;:::-;1678:21;;:10;:21;;;1674:44;;1708:10;;;;;;;;;;;;;;1674:44;1729;1761:3;1766:6;1729:31;:44::i;:::-;1606:175;;:::o;717:39::-;;;;;;;;;;;;;;;;;;;;;;:::o;1924:126::-;1530:13:0;:11;:13::i;:::-;2026:16:8::1;2008:15;:34;;;;1924:126:::0;:::o;2603:487::-;522:1:6;512:6;;:11;504:34;;;;;;;;;;;;:::i;:::-;;;;;;;;;558:1;549:6;:10;;;;2676::8::1;2663:23;;:9;:23;;;2659:51;;2695:15;;;;;;;;;;;;;;2659:51;2721:14;2767;:26;2782:10;2767:26;;;;;;;;;;;;;;;;2738:14;:26;2753:10;2738:26;;;;;;;;;;;;;;;;:55;;;;:::i;:::-;2721:72;;2818:1;2808:6;:11;2804:42;;2828:18;;;;;;;;;;;;;;2804:42;2885:6;2861:21;:30;2857:63;;;2900:20;;;;;;;;;;;;;;2857:63;2963:6;2933:14;:26;2948:10;2933:26;;;;;;;;;;;;;;;;:36;;;;;;;:::i;:::-;;;;;;;;2980:51;3012:10;3024:6;2980:31;:51::i;:::-;3063:10;3049:33;;;3075:6;3049:33;;;;;;:::i;:::-;;;;;;;;2648:442;591:1:6::0;582:6;:10;;;;2603:487:8:o;1442:156::-;1528:7;:5;:7::i;:::-;1514:21;;:10;:21;;;1510:44;;1544:10;;;;;;;;;;;;;;1510:44;1583:7;1565;:15;1573:6;1565:15;;;;;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;1442:156;;:::o;2292:101:0:-;1530:13;:11;:13::i;:::-;2356:30:::1;2383:1;2356:18;:30::i;:::-;2292:101::o:0;1637:85::-;1683:7;1709:6;;;;;;;;;;;1702:13;;1637:85;:::o;2251:250:8:-;2358:6;2345:9;:19;;:34;;;;2378:1;2368:6;:11;2345:34;2341:62;;;2388:15;;;;;;;;;;;;;;2341:62;2442:6;2414:14;:24;2429:8;2414:24;;;;;;;;;;;;;;;;:34;;;;;;;:::i;:::-;;;;;;;;2476:8;2466:27;;;2486:6;2466:27;;;;;;:::i;:::-;;;;;;;;2251:250;;:::o;605:49::-;;;;;;;;;;;;;;;;;:::o;763:34::-;;;;:::o;2542:215:0:-;1530:13;:11;:13::i;:::-;2646:1:::1;2626:22;;:8;:22;;::::0;2622:91:::1;;2699:1;2671:31;;;;;;;;;;;:::i;:::-;;;;;;;;2622:91;2722:28;2741:8;2722:18;:28::i;:::-;2542:215:::0;:::o;661:49:8:-;;;;;;;;;;;;;;;;;:::o;806:32::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;840:339:7:-;912:12;1111:1;1108;1105;1102;1094:6;1090:2;1083:5;1078:35;1067:46;;1141:7;1133:39;;;;;;;;;;;;:::i;:::-;;;;;;;;;902:277;840:339;;:::o;1205:229:8:-;1270:14;1287:12;:10;:12::i;:::-;1270:29;;1325:6;1314:17;;:7;:5;:7::i;:::-;:17;;;;:37;;;;;1336:7;:15;1344:6;1336:15;;;;;;;;;;;;;;;;;;;;;;;;;1335:16;1314:37;1310:117;;;1402:12;:10;:12::i;:::-;1375:40;;;;;;;;;;;:::i;:::-;;;;;;;;1310:117;1259:175;1205:229::o;2911:187:0:-;2984:16;3003:6;;;;;;;;;;;2984:25;;3028:8;3019:6;;:17;;;;;;;;;;;;;;;;;;3082:8;3051:40;;3072:8;3051:40;;;;;;;;;;;;2974:124;2911:187;:::o;655:96:5:-;708:7;734:10;727:17;;655:96;:::o;88:117:9:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:329::-;1736:6;1785:2;1773:9;1764:7;1760:23;1756:32;1753:119;;;1791:79;;:::i;:::-;1753:119;1911:1;1936:53;1981:7;1972:6;1961:9;1957:22;1936:53;:::i;:::-;1926:63;;1882:117;1677:329;;;;:::o;2012:90::-;2046:7;2089:5;2082:13;2075:21;2064:32;;2012:90;;;:::o;2108:109::-;2189:21;2204:5;2189:21;:::i;:::-;2184:3;2177:34;2108:109;;:::o;2223:210::-;2310:4;2348:2;2337:9;2333:18;2325:26;;2361:65;2423:1;2412:9;2408:17;2399:6;2361:65;:::i;:::-;2223:210;;;;:::o;2439:329::-;2498:6;2547:2;2535:9;2526:7;2522:23;2518:32;2515:119;;;2553:79;;:::i;:::-;2515:119;2673:1;2698:53;2743:7;2734:6;2723:9;2719:22;2698:53;:::i;:::-;2688:63;;2644:117;2439:329;;;;:::o;2774:116::-;2844:21;2859:5;2844:21;:::i;:::-;2837:5;2834:32;2824:60;;2880:1;2877;2870:12;2824:60;2774:116;:::o;2896:133::-;2939:5;2977:6;2964:20;2955:29;;2993:30;3017:5;2993:30;:::i;:::-;2896:133;;;;:::o;3035:468::-;3100:6;3108;3157:2;3145:9;3136:7;3132:23;3128:32;3125:119;;;3163:79;;:::i;:::-;3125:119;3283:1;3308:53;3353:7;3344:6;3333:9;3329:22;3308:53;:::i;:::-;3298:63;;3254:117;3410:2;3436:50;3478:7;3469:6;3458:9;3454:22;3436:50;:::i;:::-;3426:60;;3381:115;3035:468;;;;;:::o;3509:118::-;3596:24;3614:5;3596:24;:::i;:::-;3591:3;3584:37;3509:118;;:::o;3633:222::-;3726:4;3764:2;3753:9;3749:18;3741:26;;3777:71;3845:1;3834:9;3830:17;3821:6;3777:71;:::i;:::-;3633:222;;;;:::o;3861:118::-;3948:24;3966:5;3948:24;:::i;:::-;3943:3;3936:37;3861:118;;:::o;3985:222::-;4078:4;4116:2;4105:9;4101:18;4093:26;;4129:71;4197:1;4186:9;4182:17;4173:6;4129:71;:::i;:::-;3985:222;;;;:::o;4213:99::-;4265:6;4299:5;4293:12;4283:22;;4213:99;;;:::o;4318:169::-;4402:11;4436:6;4431:3;4424:19;4476:4;4471:3;4467:14;4452:29;;4318:169;;;;:::o;4493:246::-;4574:1;4584:113;4598:6;4595:1;4592:13;4584:113;;;4683:1;4678:3;4674:11;4668:18;4664:1;4659:3;4655:11;4648:39;4620:2;4617:1;4613:10;4608:15;;4584:113;;;4731:1;4722:6;4717:3;4713:16;4706:27;4555:184;4493:246;;;:::o;4745:102::-;4786:6;4837:2;4833:7;4828:2;4821:5;4817:14;4813:28;4803:38;;4745:102;;;:::o;4853:377::-;4941:3;4969:39;5002:5;4969:39;:::i;:::-;5024:71;5088:6;5083:3;5024:71;:::i;:::-;5017:78;;5104:65;5162:6;5157:3;5150:4;5143:5;5139:16;5104:65;:::i;:::-;5194:29;5216:6;5194:29;:::i;:::-;5189:3;5185:39;5178:46;;4945:285;4853:377;;;;:::o;5236:313::-;5349:4;5387:2;5376:9;5372:18;5364:26;;5436:9;5430:4;5426:20;5422:1;5411:9;5407:17;5400:47;5464:78;5537:4;5528:6;5464:78;:::i;:::-;5456:86;;5236:313;;;;:::o;5555:160::-;5695:12;5691:1;5683:6;5679:14;5672:36;5555:160;:::o;5721:366::-;5863:3;5884:67;5948:2;5943:3;5884:67;:::i;:::-;5877:74;;5960:93;6049:3;5960:93;:::i;:::-;6078:2;6073:3;6069:12;6062:19;;5721:366;;;:::o;6093:419::-;6259:4;6297:2;6286:9;6282:18;6274:26;;6346:9;6340:4;6336:20;6332:1;6321:9;6317:17;6310:47;6374:131;6500:4;6374:131;:::i;:::-;6366:139;;6093:419;;;:::o;6518:180::-;6566:77;6563:1;6556:88;6663:4;6660:1;6653:15;6687:4;6684:1;6677:15;6704:194;6744:4;6764:20;6782:1;6764:20;:::i;:::-;6759:25;;6798:20;6816:1;6798:20;:::i;:::-;6793:25;;6842:1;6839;6835:9;6827:17;;6866:1;6860:4;6857:11;6854:37;;;6871:18;;:::i;:::-;6854:37;6704:194;;;;:::o;6904:191::-;6944:3;6963:20;6981:1;6963:20;:::i;:::-;6958:25;;6997:20;7015:1;6997:20;:::i;:::-;6992:25;;7040:1;7037;7033:9;7026:16;;7061:3;7058:1;7055:10;7052:36;;;7068:18;;:::i;:::-;7052:36;6904:191;;;;:::o;7101:180::-;7149:77;7146:1;7139:88;7246:4;7243:1;7236:15;7270:4;7267:1;7260:15;7287:320;7331:6;7368:1;7362:4;7358:12;7348:22;;7415:1;7409:4;7405:12;7436:18;7426:81;;7492:4;7484:6;7480:17;7470:27;;7426:81;7554:2;7546:6;7543:14;7523:18;7520:38;7517:84;;7573:18;;:::i;:::-;7517:84;7338:269;7287:320;;;:::o;7613:169::-;7753:21;7749:1;7741:6;7737:14;7730:45;7613:169;:::o;7788:366::-;7930:3;7951:67;8015:2;8010:3;7951:67;:::i;:::-;7944:74;;8027:93;8116:3;8027:93;:::i;:::-;8145:2;8140:3;8136:12;8129:19;;7788:366;;;:::o;8160:419::-;8326:4;8364:2;8353:9;8349:18;8341:26;;8413:9;8407:4;8403:20;8399:1;8388:9;8384:17;8377:47;8441:131;8567:4;8441:131;:::i;:::-;8433:139;;8160:419;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "828600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"alreadyClaimed(address)": "2880",
								"claimTokens()": "infinite",
								"isAdmin(address)": "2868",
								"obtainedAmount(address)": "2881",
								"owner()": "2545",
								"recommendAmount()": "2451",
								"renounceOwnership()": "infinite",
								"rescueETH(address,uint256)": "infinite",
								"setAdmin(address,bool)": "27285",
								"setClaimableTokens(address,uint256)": "infinite",
								"setRecommendAmount(uint256)": "infinite",
								"transferOwnership(address)": "infinite",
								"versions()": "infinite"
							},
							"internal": {
								"_checkOwner()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 405,
									"end": 3093,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 454,
									"end": 455,
									"name": "PUSH",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 429,
									"end": 455,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 429,
									"end": 455,
									"name": "SSTORE",
									"source": 6
								},
								{
									"begin": 796,
									"end": 797,
									"name": "PUSH",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 763,
									"end": 797,
									"name": "PUSH",
									"source": 8,
									"value": "5"
								},
								{
									"begin": 763,
									"end": 797,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 806,
									"end": 838,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 806,
									"end": 838,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 806,
									"end": 838,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "PUSH",
									"source": 8,
									"value": "5"
								},
								{
									"begin": 806,
									"end": 838,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 806,
									"end": 838,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "PUSH",
									"source": 8,
									"value": "312E302E30000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 806,
									"end": 838,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "PUSH",
									"source": 8,
									"value": "6"
								},
								{
									"begin": 806,
									"end": 838,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 806,
									"end": 838,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 806,
									"end": 838,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 806,
									"end": 838,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 806,
									"end": 838,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1038,
									"end": 1160,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 1038,
									"end": 1160,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1038,
									"end": 1160,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1038,
									"end": 1160,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 1038,
									"end": 1160,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1038,
									"end": 1160,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1038,
									"end": 1160,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1038,
									"end": 1160,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1038,
									"end": 1160,
									"name": "tag",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 1038,
									"end": 1160,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1038,
									"end": 1160,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1060,
									"end": 1070,
									"name": "CALLER",
									"source": 8
								},
								{
									"begin": 1296,
									"end": 1297,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1272,
									"end": 1298,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1272,
									"end": 1298,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1272,
									"end": 1284,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1272,
									"end": 1298,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1272,
									"end": 1298,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1272,
									"end": 1298,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1268,
									"end": 1363,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1268,
									"end": 1363,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1349,
									"end": 1350,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "PUSH",
									"source": 0,
									"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 1321,
									"end": 1352,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1321,
									"end": 1352,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1268,
									"end": 1363,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1268,
									"end": 1363,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1372,
									"end": 1404,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1391,
									"end": 1403,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1372,
									"end": 1390,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 1372,
									"end": 1390,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1372,
									"end": 1390,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 1372,
									"end": 1404,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1372,
									"end": 1404,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 1372,
									"end": 1404,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1372,
									"end": 1404,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1372,
									"end": 1404,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1224,
									"end": 1411,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 1105,
									"end": 1109,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1083,
									"end": 1090,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1091,
									"end": 1101,
									"modifierDepth": 1,
									"name": "CALLER",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "KECCAK256",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1102,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "100"
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "EXP",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "SLOAD",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "FF"
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "MUL",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "NOT",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "MUL",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "SSTORE",
									"source": 8
								},
								{
									"begin": 1083,
									"end": 1109,
									"modifierDepth": 1,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1140,
									"end": 1141,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "7B78EE99B011DFF919FF5BD97F8A1B33B444782EB490DD7CD487FC963D63676F"
								},
								{
									"begin": 1143,
									"end": 1151,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "6"
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "13"
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "14"
								},
								{
									"begin": 1125,
									"end": 1152,
									"jumpType": "[in]",
									"modifierDepth": 1,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "tag",
									"source": 8,
									"value": "13"
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1125,
									"end": 1152,
									"modifierDepth": 1,
									"name": "LOG2",
									"source": 8
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "15"
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 2911,
									"end": 3098,
									"name": "tag",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 2911,
									"end": 3098,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2984,
									"end": 3000,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3003,
									"end": 3009,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3003,
									"end": 3009,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3003,
									"end": 3009,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3003,
									"end": 3009,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 3003,
									"end": 3009,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3003,
									"end": 3009,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 3003,
									"end": 3009,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 3003,
									"end": 3009,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3003,
									"end": 3009,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 3003,
									"end": 3009,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3003,
									"end": 3009,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2984,
									"end": 3009,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2984,
									"end": 3009,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3028,
									"end": 3036,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3025,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3019,
									"end": 3025,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 3019,
									"end": 3036,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3082,
									"end": 3090,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3072,
									"end": 3080,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3051,
									"end": 3091,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2974,
									"end": 3098,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2911,
									"end": 3098,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2911,
									"end": 3098,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 7,
									"end": 106,
									"name": "tag",
									"source": 9,
									"value": "17"
								},
								{
									"begin": 7,
									"end": 106,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 59,
									"end": 65,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 93,
									"end": 98,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 87,
									"end": 99,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 77,
									"end": 99,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 77,
									"end": 99,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 7,
									"end": 106,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 7,
									"end": 106,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 7,
									"end": 106,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 7,
									"end": 106,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 112,
									"end": 292,
									"name": "tag",
									"source": 9,
									"value": "18"
								},
								{
									"begin": 112,
									"end": 292,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 160,
									"end": 237,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 157,
									"end": 158,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 238,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 257,
									"end": 261,
									"name": "PUSH",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 254,
									"end": 255,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 247,
									"end": 262,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 281,
									"end": 285,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 278,
									"end": 279,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 271,
									"end": 286,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 298,
									"end": 478,
									"name": "tag",
									"source": 9,
									"value": "19"
								},
								{
									"begin": 298,
									"end": 478,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 346,
									"end": 423,
									"name": "PUSH",
									"source": 9,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 343,
									"end": 344,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 336,
									"end": 424,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 443,
									"end": 447,
									"name": "PUSH",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 440,
									"end": 441,
									"name": "PUSH",
									"source": 9,
									"value": "4"
								},
								{
									"begin": 433,
									"end": 448,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 467,
									"end": 471,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 464,
									"end": 465,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 457,
									"end": 472,
									"name": "REVERT",
									"source": 9
								},
								{
									"begin": 484,
									"end": 804,
									"name": "tag",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 484,
									"end": 804,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 528,
									"end": 534,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 565,
									"end": 566,
									"name": "PUSH",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 559,
									"end": 563,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 555,
									"end": 567,
									"name": "DIV",
									"source": 9
								},
								{
									"begin": 545,
									"end": 567,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 545,
									"end": 567,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 612,
									"end": 613,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 606,
									"end": 610,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 602,
									"end": 614,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 633,
									"end": 651,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 623,
									"end": 704,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "47"
								},
								{
									"begin": 623,
									"end": 704,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 689,
									"end": 693,
									"name": "PUSH",
									"source": 9,
									"value": "7F"
								},
								{
									"begin": 681,
									"end": 687,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 677,
									"end": 694,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 667,
									"end": 694,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 667,
									"end": 694,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 623,
									"end": 704,
									"name": "tag",
									"source": 9,
									"value": "47"
								},
								{
									"begin": 623,
									"end": 704,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 751,
									"end": 753,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 743,
									"end": 749,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 740,
									"end": 754,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 720,
									"end": 738,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 717,
									"end": 755,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 714,
									"end": 798,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "48"
								},
								{
									"begin": 714,
									"end": 798,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 770,
									"end": 788,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "49"
								},
								{
									"begin": 770,
									"end": 788,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "19"
								},
								{
									"begin": 770,
									"end": 788,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 770,
									"end": 788,
									"name": "tag",
									"source": 9,
									"value": "49"
								},
								{
									"begin": 770,
									"end": 788,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 714,
									"end": 798,
									"name": "tag",
									"source": 9,
									"value": "48"
								},
								{
									"begin": 714,
									"end": 798,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 535,
									"end": 804,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 484,
									"end": 804,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 484,
									"end": 804,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 484,
									"end": 804,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 484,
									"end": 804,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 810,
									"end": 951,
									"name": "tag",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 810,
									"end": 951,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 859,
									"end": 863,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 882,
									"end": 885,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 874,
									"end": 885,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 874,
									"end": 885,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 905,
									"end": 908,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 902,
									"end": 903,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 895,
									"end": 909,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 939,
									"end": 943,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 936,
									"end": 937,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 926,
									"end": 944,
									"name": "KECCAK256",
									"source": 9
								},
								{
									"begin": 918,
									"end": 944,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 918,
									"end": 944,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 810,
									"end": 951,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 810,
									"end": 951,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 810,
									"end": 951,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 810,
									"end": 951,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 957,
									"end": 1050,
									"name": "tag",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 957,
									"end": 1050,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 994,
									"end": 1000,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1041,
									"end": 1043,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 1036,
									"end": 1038,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 1029,
									"end": 1034,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1025,
									"end": 1039,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 1021,
									"end": 1044,
									"name": "DIV",
									"source": 9
								},
								{
									"begin": 1011,
									"end": 1044,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1011,
									"end": 1044,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 957,
									"end": 1050,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 957,
									"end": 1050,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 957,
									"end": 1050,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 957,
									"end": 1050,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1056,
									"end": 1163,
									"name": "tag",
									"source": 9,
									"value": "23"
								},
								{
									"begin": 1056,
									"end": 1163,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1100,
									"end": 1108,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1150,
									"end": 1155,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1144,
									"end": 1148,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1140,
									"end": 1156,
									"name": "SHL",
									"source": 9
								},
								{
									"begin": 1119,
									"end": 1156,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1119,
									"end": 1156,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1056,
									"end": 1163,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1056,
									"end": 1163,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1056,
									"end": 1163,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1056,
									"end": 1163,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1056,
									"end": 1163,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "tag",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1238,
									"end": 1244,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1288,
									"end": 1289,
									"name": "PUSH",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 1276,
									"end": 1286,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1272,
									"end": 1290,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 1311,
									"end": 1408,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "54"
								},
								{
									"begin": 1341,
									"end": 1407,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1330,
									"end": 1339,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 1311,
									"end": 1408,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "23"
								},
								{
									"begin": 1311,
									"end": 1408,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1311,
									"end": 1408,
									"name": "tag",
									"source": 9,
									"value": "54"
								},
								{
									"begin": 1311,
									"end": 1408,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1429,
									"end": 1468,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "55"
								},
								{
									"begin": 1459,
									"end": 1467,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 1448,
									"end": 1457,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 1429,
									"end": 1468,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "23"
								},
								{
									"begin": 1429,
									"end": 1468,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1429,
									"end": 1468,
									"name": "tag",
									"source": 9,
									"value": "55"
								},
								{
									"begin": 1429,
									"end": 1468,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1417,
									"end": 1468,
									"name": "SWAP6",
									"source": 9
								},
								{
									"begin": 1417,
									"end": 1468,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1501,
									"end": 1505,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1497,
									"end": 1506,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 1490,
									"end": 1495,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 1486,
									"end": 1507,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1477,
									"end": 1507,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 1477,
									"end": 1507,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1550,
									"end": 1554,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 1540,
									"end": 1548,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 1536,
									"end": 1555,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 1529,
									"end": 1534,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 1526,
									"end": 1556,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 1516,
									"end": 1556,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1516,
									"end": 1556,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1245,
									"end": 1562,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1245,
									"end": 1562,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1169,
									"end": 1562,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1169,
									"end": 1562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1568,
									"end": 1645,
									"name": "tag",
									"source": 9,
									"value": "25"
								},
								{
									"begin": 1568,
									"end": 1645,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1605,
									"end": 1612,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1634,
									"end": 1639,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1623,
									"end": 1639,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1623,
									"end": 1639,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1568,
									"end": 1645,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1568,
									"end": 1645,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1568,
									"end": 1645,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1568,
									"end": 1645,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1651,
									"end": 1711,
									"name": "tag",
									"source": 9,
									"value": "26"
								},
								{
									"begin": 1651,
									"end": 1711,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1679,
									"end": 1682,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1700,
									"end": 1705,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1693,
									"end": 1705,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1693,
									"end": 1705,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1651,
									"end": 1711,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1651,
									"end": 1711,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1651,
									"end": 1711,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1651,
									"end": 1711,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1717,
									"end": 1859,
									"name": "tag",
									"source": 9,
									"value": "27"
								},
								{
									"begin": 1717,
									"end": 1859,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1767,
									"end": 1776,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1800,
									"end": 1853,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "59"
								},
								{
									"begin": 1818,
									"end": 1852,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "60"
								},
								{
									"begin": 1827,
									"end": 1851,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "61"
								},
								{
									"begin": 1845,
									"end": 1850,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 1827,
									"end": 1851,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "25"
								},
								{
									"begin": 1827,
									"end": 1851,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1827,
									"end": 1851,
									"name": "tag",
									"source": 9,
									"value": "61"
								},
								{
									"begin": 1827,
									"end": 1851,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1818,
									"end": 1852,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "26"
								},
								{
									"begin": 1818,
									"end": 1852,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1818,
									"end": 1852,
									"name": "tag",
									"source": 9,
									"value": "60"
								},
								{
									"begin": 1818,
									"end": 1852,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1800,
									"end": 1853,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "25"
								},
								{
									"begin": 1800,
									"end": 1853,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1800,
									"end": 1853,
									"name": "tag",
									"source": 9,
									"value": "59"
								},
								{
									"begin": 1800,
									"end": 1853,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1787,
									"end": 1853,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1787,
									"end": 1853,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1717,
									"end": 1859,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1717,
									"end": 1859,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1717,
									"end": 1859,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1717,
									"end": 1859,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1865,
									"end": 1940,
									"name": "tag",
									"source": 9,
									"value": "28"
								},
								{
									"begin": 1865,
									"end": 1940,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 1908,
									"end": 1911,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 1929,
									"end": 1934,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 1922,
									"end": 1934,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1922,
									"end": 1934,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1865,
									"end": 1940,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 1865,
									"end": 1940,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 1865,
									"end": 1940,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1865,
									"end": 1940,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 1946,
									"end": 2215,
									"name": "tag",
									"source": 9,
									"value": "29"
								},
								{
									"begin": 1946,
									"end": 2215,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2056,
									"end": 2095,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "64"
								},
								{
									"begin": 2087,
									"end": 2094,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 2056,
									"end": 2095,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "27"
								},
								{
									"begin": 2056,
									"end": 2095,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2056,
									"end": 2095,
									"name": "tag",
									"source": 9,
									"value": "64"
								},
								{
									"begin": 2056,
									"end": 2095,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2117,
									"end": 2208,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "65"
								},
								{
									"begin": 2166,
									"end": 2207,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "66"
								},
								{
									"begin": 2190,
									"end": 2206,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2166,
									"end": 2207,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "28"
								},
								{
									"begin": 2166,
									"end": 2207,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2166,
									"end": 2207,
									"name": "tag",
									"source": 9,
									"value": "66"
								},
								{
									"begin": 2166,
									"end": 2207,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2158,
									"end": 2164,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2151,
									"end": 2155,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2145,
									"end": 2156,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 2117,
									"end": 2208,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 2117,
									"end": 2208,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2117,
									"end": 2208,
									"name": "tag",
									"source": 9,
									"value": "65"
								},
								{
									"begin": 2117,
									"end": 2208,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2111,
									"end": 2115,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2104,
									"end": 2209,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 2022,
									"end": 2215,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1946,
									"end": 2215,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1946,
									"end": 2215,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1946,
									"end": 2215,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1946,
									"end": 2215,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2221,
									"end": 2294,
									"name": "tag",
									"source": 9,
									"value": "30"
								},
								{
									"begin": 2221,
									"end": 2294,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2266,
									"end": 2269,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2221,
									"end": 2294,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2221,
									"end": 2294,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2300,
									"end": 2489,
									"name": "tag",
									"source": 9,
									"value": "31"
								},
								{
									"begin": 2300,
									"end": 2489,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2377,
									"end": 2409,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "69"
								},
								{
									"begin": 2377,
									"end": 2409,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "30"
								},
								{
									"begin": 2377,
									"end": 2409,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2377,
									"end": 2409,
									"name": "tag",
									"source": 9,
									"value": "69"
								},
								{
									"begin": 2377,
									"end": 2409,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2418,
									"end": 2483,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "70"
								},
								{
									"begin": 2476,
									"end": 2482,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2468,
									"end": 2474,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2462,
									"end": 2466,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2418,
									"end": 2483,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "29"
								},
								{
									"begin": 2418,
									"end": 2483,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2418,
									"end": 2483,
									"name": "tag",
									"source": 9,
									"value": "70"
								},
								{
									"begin": 2418,
									"end": 2483,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2353,
									"end": 2489,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2300,
									"end": 2489,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2300,
									"end": 2489,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2300,
									"end": 2489,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2495,
									"end": 2681,
									"name": "tag",
									"source": 9,
									"value": "32"
								},
								{
									"begin": 2495,
									"end": 2681,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "tag",
									"source": 9,
									"value": "72"
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2572,
									"end": 2575,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2565,
									"end": 2570,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2562,
									"end": 2576,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "74"
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2626,
									"end": 2665,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "75"
								},
								{
									"begin": 2663,
									"end": 2664,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 2656,
									"end": 2661,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2626,
									"end": 2665,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "31"
								},
								{
									"begin": 2626,
									"end": 2665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2626,
									"end": 2665,
									"name": "tag",
									"source": 9,
									"value": "75"
								},
								{
									"begin": 2626,
									"end": 2665,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2599,
									"end": 2600,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 2592,
									"end": 2597,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2588,
									"end": 2601,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2579,
									"end": 2601,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2579,
									"end": 2601,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "72"
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "tag",
									"source": 9,
									"value": "74"
								},
								{
									"begin": 2555,
									"end": 2675,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2495,
									"end": 2681,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2495,
									"end": 2681,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2495,
									"end": 2681,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2687,
									"end": 3230,
									"name": "tag",
									"source": 9,
									"value": "33"
								},
								{
									"begin": 2687,
									"end": 3230,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2788,
									"end": 2790,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 2783,
									"end": 2786,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2780,
									"end": 2791,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 2777,
									"end": 3223,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 2777,
									"end": 3223,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "77"
								},
								{
									"begin": 2777,
									"end": 3223,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 2822,
									"end": 2860,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "78"
								},
								{
									"begin": 2854,
									"end": 2859,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2822,
									"end": 2860,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 2822,
									"end": 2860,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2822,
									"end": 2860,
									"name": "tag",
									"source": 9,
									"value": "78"
								},
								{
									"begin": 2822,
									"end": 2860,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2906,
									"end": 2935,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "79"
								},
								{
									"begin": 2924,
									"end": 2934,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2906,
									"end": 2935,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 2906,
									"end": 2935,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2906,
									"end": 2935,
									"name": "tag",
									"source": 9,
									"value": "79"
								},
								{
									"begin": 2906,
									"end": 2935,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2896,
									"end": 2904,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2892,
									"end": 2936,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3089,
									"end": 3091,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 3077,
									"end": 3087,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 3074,
									"end": 3092,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 3071,
									"end": 3120,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 3071,
									"end": 3120,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 3071,
									"end": 3120,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 3110,
									"end": 3118,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3095,
									"end": 3118,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3095,
									"end": 3118,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3071,
									"end": 3120,
									"name": "tag",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 3071,
									"end": 3120,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3133,
									"end": 3213,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "81"
								},
								{
									"begin": 3189,
									"end": 3211,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "82"
								},
								{
									"begin": 3207,
									"end": 3210,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 3189,
									"end": 3211,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "22"
								},
								{
									"begin": 3189,
									"end": 3211,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3189,
									"end": 3211,
									"name": "tag",
									"source": 9,
									"value": "82"
								},
								{
									"begin": 3189,
									"end": 3211,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3179,
									"end": 3187,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3175,
									"end": 3212,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3162,
									"end": 3173,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3133,
									"end": 3213,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "32"
								},
								{
									"begin": 3133,
									"end": 3213,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3133,
									"end": 3213,
									"name": "tag",
									"source": 9,
									"value": "81"
								},
								{
									"begin": 3133,
									"end": 3213,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2792,
									"end": 3223,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2792,
									"end": 3223,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2777,
									"end": 3223,
									"name": "tag",
									"source": 9,
									"value": "77"
								},
								{
									"begin": 2777,
									"end": 3223,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2687,
									"end": 3230,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2687,
									"end": 3230,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2687,
									"end": 3230,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 2687,
									"end": 3230,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3236,
									"end": 3353,
									"name": "tag",
									"source": 9,
									"value": "34"
								},
								{
									"begin": 3236,
									"end": 3353,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3290,
									"end": 3298,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3340,
									"end": 3345,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3334,
									"end": 3338,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3330,
									"end": 3346,
									"name": "SHR",
									"source": 9
								},
								{
									"begin": 3309,
									"end": 3346,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3309,
									"end": 3346,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3236,
									"end": 3353,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 3236,
									"end": 3353,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3236,
									"end": 3353,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3236,
									"end": 3353,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3236,
									"end": 3353,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3359,
									"end": 3528,
									"name": "tag",
									"source": 9,
									"value": "35"
								},
								{
									"begin": 3359,
									"end": 3528,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3403,
									"end": 3409,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3436,
									"end": 3487,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "85"
								},
								{
									"begin": 3484,
									"end": 3485,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3480,
									"end": 3486,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 3472,
									"end": 3477,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3469,
									"end": 3470,
									"name": "PUSH",
									"source": 9,
									"value": "8"
								},
								{
									"begin": 3465,
									"end": 3478,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 3436,
									"end": 3487,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "34"
								},
								{
									"begin": 3436,
									"end": 3487,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3436,
									"end": 3487,
									"name": "tag",
									"source": 9,
									"value": "85"
								},
								{
									"begin": 3436,
									"end": 3487,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3432,
									"end": 3488,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 3517,
									"end": 3521,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 3511,
									"end": 3515,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3507,
									"end": 3522,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 3497,
									"end": 3522,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3497,
									"end": 3522,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3410,
									"end": 3528,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3359,
									"end": 3528,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 3359,
									"end": 3528,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3359,
									"end": 3528,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3359,
									"end": 3528,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3359,
									"end": 3528,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3533,
									"end": 3828,
									"name": "tag",
									"source": 9,
									"value": "36"
								},
								{
									"begin": 3533,
									"end": 3828,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3609,
									"end": 3613,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3755,
									"end": 3784,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "87"
								},
								{
									"begin": 3780,
									"end": 3783,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3774,
									"end": 3778,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3755,
									"end": 3784,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "35"
								},
								{
									"begin": 3755,
									"end": 3784,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3755,
									"end": 3784,
									"name": "tag",
									"source": 9,
									"value": "87"
								},
								{
									"begin": 3755,
									"end": 3784,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3747,
									"end": 3784,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3747,
									"end": 3784,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3817,
									"end": 3820,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3814,
									"end": 3815,
									"name": "PUSH",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 3810,
									"end": 3821,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 3804,
									"end": 3808,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3801,
									"end": 3822,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 3793,
									"end": 3822,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3793,
									"end": 3822,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3533,
									"end": 3828,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 3533,
									"end": 3828,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 3533,
									"end": 3828,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3533,
									"end": 3828,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3533,
									"end": 3828,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3833,
									"end": 5228,
									"name": "tag",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 3833,
									"end": 5228,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 3950,
									"end": 3987,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 3983,
									"end": 3986,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 3950,
									"end": 3987,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "17"
								},
								{
									"begin": 3950,
									"end": 3987,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 3950,
									"end": 3987,
									"name": "tag",
									"source": 9,
									"value": "89"
								},
								{
									"begin": 3950,
									"end": 3987,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4052,
									"end": 4070,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 4044,
									"end": 4050,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 4041,
									"end": 4071,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 4038,
									"end": 4094,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 4038,
									"end": 4094,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "90"
								},
								{
									"begin": 4038,
									"end": 4094,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 4074,
									"end": 4092,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "91"
								},
								{
									"begin": 4074,
									"end": 4092,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "18"
								},
								{
									"begin": 4074,
									"end": 4092,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4074,
									"end": 4092,
									"name": "tag",
									"source": 9,
									"value": "91"
								},
								{
									"begin": 4074,
									"end": 4092,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4038,
									"end": 4094,
									"name": "tag",
									"source": 9,
									"value": "90"
								},
								{
									"begin": 4038,
									"end": 4094,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4118,
									"end": 4156,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "92"
								},
								{
									"begin": 4150,
									"end": 4154,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4144,
									"end": 4155,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 4118,
									"end": 4156,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 4118,
									"end": 4156,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4118,
									"end": 4156,
									"name": "tag",
									"source": 9,
									"value": "92"
								},
								{
									"begin": 4118,
									"end": 4156,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4203,
									"end": 4270,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "93"
								},
								{
									"begin": 4263,
									"end": 4269,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4255,
									"end": 4261,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4249,
									"end": 4253,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 4203,
									"end": 4270,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "33"
								},
								{
									"begin": 4203,
									"end": 4270,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4203,
									"end": 4270,
									"name": "tag",
									"source": 9,
									"value": "93"
								},
								{
									"begin": 4203,
									"end": 4270,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4297,
									"end": 4298,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 4321,
									"end": 4325,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 4308,
									"end": 4325,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 4308,
									"end": 4325,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 4353,
									"end": 4355,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 4345,
									"end": 4351,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 4342,
									"end": 4356,
									"name": "GT",
									"source": 9
								},
								{
									"begin": 4370,
									"end": 4371,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 4365,
									"end": 4983,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 4365,
									"end": 4983,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 4365,
									"end": 4983,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "95"
								},
								{
									"begin": 4365,
									"end": 4983,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 5027,
									"end": 5028,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 5044,
									"end": 5050,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 5041,
									"end": 5118,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 5041,
									"end": 5118,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "96"
								},
								{
									"begin": 5041,
									"end": 5118,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 5093,
									"end": 5102,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5088,
									"end": 5091,
									"name": "DUP8",
									"source": 9
								},
								{
									"begin": 5084,
									"end": 5103,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 5078,
									"end": 5104,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 5069,
									"end": 5104,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 5069,
									"end": 5104,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5041,
									"end": 5118,
									"name": "tag",
									"source": 9,
									"value": "96"
								},
								{
									"begin": 5041,
									"end": 5118,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 5144,
									"end": 5211,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "97"
								},
								{
									"begin": 5204,
									"end": 5210,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 5197,
									"end": 5202,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5144,
									"end": 5211,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "36"
								},
								{
									"begin": 5144,
									"end": 5211,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 5144,
									"end": 5211,
									"name": "tag",
									"source": 9,
									"value": "97"
								},
								{
									"begin": 5144,
									"end": 5211,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 5138,
									"end": 5142,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 5131,
									"end": 5212,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 5000,
									"end": 5222,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 4335,
									"end": 5222,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "94"
								},
								{
									"begin": 4335,
									"end": 5222,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4365,
									"end": 4983,
									"name": "tag",
									"source": 9,
									"value": "95"
								},
								{
									"begin": 4365,
									"end": 4983,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4417,
									"end": 4421,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 4413,
									"end": 4422,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 4405,
									"end": 4411,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 4401,
									"end": 4423,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 4451,
									"end": 4488,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "98"
								},
								{
									"begin": 4483,
									"end": 4487,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 4451,
									"end": 4488,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 4451,
									"end": 4488,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4451,
									"end": 4488,
									"name": "tag",
									"source": 9,
									"value": "98"
								},
								{
									"begin": 4451,
									"end": 4488,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4510,
									"end": 4511,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "tag",
									"source": 9,
									"value": "99"
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4538,
									"end": 4545,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4535,
									"end": 4536,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 4532,
									"end": 4546,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "101"
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 4617,
									"end": 4626,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 4612,
									"end": 4615,
									"name": "DUP10",
									"source": 9
								},
								{
									"begin": 4608,
									"end": 4627,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4602,
									"end": 4628,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 4594,
									"end": 4600,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4587,
									"end": 4629,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 4668,
									"end": 4669,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 4660,
									"end": 4666,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4656,
									"end": 4670,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4646,
									"end": 4670,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 4646,
									"end": 4670,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 4715,
									"end": 4717,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 4704,
									"end": 4713,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 4700,
									"end": 4718,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4687,
									"end": 4718,
									"name": "SWAP5",
									"source": 9
								},
								{
									"begin": 4687,
									"end": 4718,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 4561,
									"end": 4565,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 4558,
									"end": 4559,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 4554,
									"end": 4566,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4549,
									"end": 4566,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 4549,
									"end": 4566,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "99"
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "tag",
									"source": 9,
									"value": "101"
								},
								{
									"begin": 4524,
									"end": 4732,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4760,
									"end": 4766,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 4751,
									"end": 4758,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 4748,
									"end": 4767,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 4745,
									"end": 4924,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 4745,
									"end": 4924,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "102"
								},
								{
									"begin": 4745,
									"end": 4924,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 4818,
									"end": 4827,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 4813,
									"end": 4816,
									"name": "DUP10",
									"source": 9
								},
								{
									"begin": 4809,
									"end": 4828,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4803,
									"end": 4829,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 4861,
									"end": 4909,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "103"
								},
								{
									"begin": 4903,
									"end": 4907,
									"name": "PUSH",
									"source": 9,
									"value": "1F"
								},
								{
									"begin": 4895,
									"end": 4901,
									"name": "DUP10",
									"source": 9
								},
								{
									"begin": 4891,
									"end": 4908,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 4880,
									"end": 4889,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 4861,
									"end": 4909,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "35"
								},
								{
									"begin": 4861,
									"end": 4909,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 4861,
									"end": 4909,
									"name": "tag",
									"source": 9,
									"value": "103"
								},
								{
									"begin": 4861,
									"end": 4909,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4853,
									"end": 4859,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 4846,
									"end": 4910,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 4768,
									"end": 4924,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 4745,
									"end": 4924,
									"name": "tag",
									"source": 9,
									"value": "102"
								},
								{
									"begin": 4745,
									"end": 4924,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4970,
									"end": 4971,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 4966,
									"end": 4967,
									"name": "PUSH",
									"source": 9,
									"value": "2"
								},
								{
									"begin": 4958,
									"end": 4964,
									"name": "DUP9",
									"source": 9
								},
								{
									"begin": 4954,
									"end": 4968,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 4950,
									"end": 4972,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 4944,
									"end": 4948,
									"name": "DUP9",
									"source": 9
								},
								{
									"begin": 4937,
									"end": 4973,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 4372,
									"end": 4983,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 4372,
									"end": 4983,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 4372,
									"end": 4983,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 4335,
									"end": 5222,
									"name": "tag",
									"source": 9,
									"value": "94"
								},
								{
									"begin": 4335,
									"end": 5222,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 4335,
									"end": 5222,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3925,
									"end": 5228,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3925,
									"end": 5228,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3925,
									"end": 5228,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3833,
									"end": 5228,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3833,
									"end": 5228,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3833,
									"end": 5228,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 5234,
									"end": 5360,
									"name": "tag",
									"source": 9,
									"value": "37"
								},
								{
									"begin": 5234,
									"end": 5360,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 5271,
									"end": 5278,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 5311,
									"end": 5353,
									"name": "PUSH",
									"source": 9,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 5304,
									"end": 5309,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5300,
									"end": 5354,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 5289,
									"end": 5354,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 5289,
									"end": 5354,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5234,
									"end": 5360,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 5234,
									"end": 5360,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 5234,
									"end": 5360,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5234,
									"end": 5360,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 5366,
									"end": 5462,
									"name": "tag",
									"source": 9,
									"value": "38"
								},
								{
									"begin": 5366,
									"end": 5462,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 5403,
									"end": 5410,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 5432,
									"end": 5456,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "106"
								},
								{
									"begin": 5450,
									"end": 5455,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5432,
									"end": 5456,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "37"
								},
								{
									"begin": 5432,
									"end": 5456,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 5432,
									"end": 5456,
									"name": "tag",
									"source": 9,
									"value": "106"
								},
								{
									"begin": 5432,
									"end": 5456,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 5421,
									"end": 5456,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 5421,
									"end": 5456,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5366,
									"end": 5462,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 5366,
									"end": 5462,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 5366,
									"end": 5462,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5366,
									"end": 5462,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 5468,
									"end": 5586,
									"name": "tag",
									"source": 9,
									"value": "39"
								},
								{
									"begin": 5468,
									"end": 5586,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 5555,
									"end": 5579,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "108"
								},
								{
									"begin": 5573,
									"end": 5578,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 5555,
									"end": 5579,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "38"
								},
								{
									"begin": 5555,
									"end": 5579,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 5555,
									"end": 5579,
									"name": "tag",
									"source": 9,
									"value": "108"
								},
								{
									"begin": 5555,
									"end": 5579,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 5550,
									"end": 5553,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5543,
									"end": 5580,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 5468,
									"end": 5586,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5468,
									"end": 5586,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5468,
									"end": 5586,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 5592,
									"end": 5814,
									"name": "tag",
									"source": 9,
									"value": "9"
								},
								{
									"begin": 5592,
									"end": 5814,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 5685,
									"end": 5689,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 5723,
									"end": 5725,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 5712,
									"end": 5721,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5708,
									"end": 5726,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 5700,
									"end": 5726,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 5700,
									"end": 5726,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5736,
									"end": 5807,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "110"
								},
								{
									"begin": 5804,
									"end": 5805,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 5793,
									"end": 5802,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 5789,
									"end": 5806,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 5780,
									"end": 5786,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 5736,
									"end": 5807,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "39"
								},
								{
									"begin": 5736,
									"end": 5807,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 5736,
									"end": 5807,
									"name": "tag",
									"source": 9,
									"value": "110"
								},
								{
									"begin": 5736,
									"end": 5807,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 5592,
									"end": 5814,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 5592,
									"end": 5814,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 5592,
									"end": 5814,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5592,
									"end": 5814,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5592,
									"end": 5814,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 5820,
									"end": 5989,
									"name": "tag",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 5820,
									"end": 5989,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 5904,
									"end": 5915,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 5938,
									"end": 5944,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5933,
									"end": 5936,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5926,
									"end": 5945,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 5978,
									"end": 5982,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 5973,
									"end": 5976,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 5969,
									"end": 5983,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 5954,
									"end": 5983,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 5954,
									"end": 5983,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5820,
									"end": 5989,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 5820,
									"end": 5989,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 5820,
									"end": 5989,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5820,
									"end": 5989,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 5820,
									"end": 5989,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 6019,
									"end": 6850,
									"name": "tag",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 6019,
									"end": 6850,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 6104,
									"end": 6107,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 6141,
									"end": 6146,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 6135,
									"end": 6147,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 6170,
									"end": 6206,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "113"
								},
								{
									"begin": 6196,
									"end": 6205,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 6170,
									"end": 6206,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 6170,
									"end": 6206,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 6170,
									"end": 6206,
									"name": "tag",
									"source": 9,
									"value": "113"
								},
								{
									"begin": 6170,
									"end": 6206,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 6222,
									"end": 6293,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "114"
								},
								{
									"begin": 6286,
									"end": 6292,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 6281,
									"end": 6284,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 6222,
									"end": 6293,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 6222,
									"end": 6293,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 6222,
									"end": 6293,
									"name": "tag",
									"source": 9,
									"value": "114"
								},
								{
									"begin": 6222,
									"end": 6293,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 6215,
									"end": 6293,
									"name": "SWAP5",
									"source": 9
								},
								{
									"begin": 6215,
									"end": 6293,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6324,
									"end": 6325,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 6313,
									"end": 6322,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 6309,
									"end": 6326,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 6340,
									"end": 6341,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 6335,
									"end": 6499,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 6335,
									"end": 6499,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 6335,
									"end": 6499,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "116"
								},
								{
									"begin": 6335,
									"end": 6499,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 6513,
									"end": 6514,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 6508,
									"end": 6844,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 6508,
									"end": 6844,
									"name": "EQ",
									"source": 9
								},
								{
									"begin": 6508,
									"end": 6844,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "117"
								},
								{
									"begin": 6508,
									"end": 6844,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 6302,
									"end": 6844,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "115"
								},
								{
									"begin": 6302,
									"end": 6844,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 6335,
									"end": 6499,
									"name": "tag",
									"source": 9,
									"value": "116"
								},
								{
									"begin": 6335,
									"end": 6499,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 6419,
									"end": 6423,
									"name": "PUSH",
									"source": 9,
									"value": "FF"
								},
								{
									"begin": 6415,
									"end": 6424,
									"name": "NOT",
									"source": 9
								},
								{
									"begin": 6404,
									"end": 6413,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 6400,
									"end": 6425,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 6395,
									"end": 6398,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 6388,
									"end": 6426,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 6479,
									"end": 6485,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 6472,
									"end": 6486,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 6465,
									"end": 6487,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 6459,
									"end": 6463,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 6455,
									"end": 6488,
									"name": "MUL",
									"source": 9
								},
								{
									"begin": 6450,
									"end": 6453,
									"name": "DUP7",
									"source": 9
								},
								{
									"begin": 6446,
									"end": 6489,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 6439,
									"end": 6489,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 6439,
									"end": 6489,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6335,
									"end": 6499,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "115"
								},
								{
									"begin": 6335,
									"end": 6499,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 6508,
									"end": 6844,
									"name": "tag",
									"source": 9,
									"value": "117"
								},
								{
									"begin": 6508,
									"end": 6844,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 6575,
									"end": 6613,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "118"
								},
								{
									"begin": 6607,
									"end": 6612,
									"name": "DUP6",
									"source": 9
								},
								{
									"begin": 6575,
									"end": 6613,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "21"
								},
								{
									"begin": 6575,
									"end": 6613,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 6575,
									"end": 6613,
									"name": "tag",
									"source": 9,
									"value": "118"
								},
								{
									"begin": 6575,
									"end": 6613,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 6635,
									"end": 6636,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 6649,
									"end": 6803,
									"name": "tag",
									"source": 9,
									"value": "119"
								},
								{
									"begin": 6649,
									"end": 6803,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 6663,
									"end": 6669,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 6660,
									"end": 6661,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 6657,
									"end": 6670,
									"name": "LT",
									"source": 9
								},
								{
									"begin": 6649,
									"end": 6803,
									"name": "ISZERO",
									"source": 9
								},
								{
									"begin": 6649,
									"end": 6803,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "121"
								},
								{
									"begin": 6649,
									"end": 6803,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 6737,
									"end": 6744,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 6731,
									"end": 6745,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 6727,
									"end": 6728,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 6722,
									"end": 6725,
									"name": "DUP10",
									"source": 9
								},
								{
									"begin": 6718,
									"end": 6729,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 6711,
									"end": 6746,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 6787,
									"end": 6788,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 6778,
									"end": 6785,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 6774,
									"end": 6789,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 6763,
									"end": 6789,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 6763,
									"end": 6789,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6685,
									"end": 6689,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 6682,
									"end": 6683,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 6678,
									"end": 6690,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 6673,
									"end": 6690,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 6673,
									"end": 6690,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6649,
									"end": 6803,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "119"
								},
								{
									"begin": 6649,
									"end": 6803,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 6649,
									"end": 6803,
									"name": "tag",
									"source": 9,
									"value": "121"
								},
								{
									"begin": 6649,
									"end": 6803,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 6832,
									"end": 6833,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 6827,
									"end": 6830,
									"name": "DUP9",
									"source": 9
								},
								{
									"begin": 6823,
									"end": 6834,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 6816,
									"end": 6834,
									"name": "SWAP6",
									"source": 9
								},
								{
									"begin": 6816,
									"end": 6834,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6515,
									"end": 6844,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6515,
									"end": 6844,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6302,
									"end": 6844,
									"name": "tag",
									"source": 9,
									"value": "115"
								},
								{
									"begin": 6302,
									"end": 6844,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 6302,
									"end": 6844,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6108,
									"end": 6850,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6108,
									"end": 6850,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6019,
									"end": 6850,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 6019,
									"end": 6850,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 6019,
									"end": 6850,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6019,
									"end": 6850,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6019,
									"end": 6850,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 6856,
									"end": 7163,
									"name": "tag",
									"source": 9,
									"value": "14"
								},
								{
									"begin": 6856,
									"end": 7163,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 6966,
									"end": 6970,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 7004,
									"end": 7006,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 6993,
									"end": 7002,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 6989,
									"end": 7007,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 6981,
									"end": 7007,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 6981,
									"end": 7007,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 7053,
									"end": 7062,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 7047,
									"end": 7051,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 7043,
									"end": 7063,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 7039,
									"end": 7040,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 7028,
									"end": 7037,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 7024,
									"end": 7041,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 7017,
									"end": 7064,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 7081,
									"end": 7156,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "123"
								},
								{
									"begin": 7151,
									"end": 7155,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 7142,
									"end": 7148,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 7081,
									"end": 7156,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "41"
								},
								{
									"begin": 7081,
									"end": 7156,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 7081,
									"end": 7156,
									"name": "tag",
									"source": 9,
									"value": "123"
								},
								{
									"begin": 7081,
									"end": 7156,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 7073,
									"end": 7156,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 7073,
									"end": 7156,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6856,
									"end": 7163,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 6856,
									"end": 7163,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 6856,
									"end": 7163,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6856,
									"end": 7163,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 6856,
									"end": 7163,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "tag",
									"source": 8,
									"value": "15"
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 405,
									"end": 3093,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ded4d11dbcf99d66d0eff9399137ba33d09ca9ebd2ddf994758f286633e282ca64736f6c63430008130033",
									".code": [
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "8DA5CB5B"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "E44CEC7C"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "E44CEC7C"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "F2FDE38B"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "F54B893B"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "F8B1CB3C"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "tag",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "8DA5CB5B"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "B43E6A53"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "DF0F0951"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "tag",
											"source": 8,
											"value": "16"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "99A04E5"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "24D7806C"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "30710D04"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "48C54B9D"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "4B0BDDD2"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "715018A6"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "tag",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "tag",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 405,
											"end": 3093,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "tag",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "tag",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 1606,
											"end": 1781,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "tag",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1606,
											"end": 1781,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "tag",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "tag",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 717,
											"end": 756,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "tag",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 717,
											"end": 756,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "tag",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 717,
											"end": 756,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "tag",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "tag",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "tag",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "35"
										},
										{
											"begin": 1924,
											"end": 2050,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "tag",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 1924,
											"end": 2050,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "tag",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "tag",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "tag",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 2603,
											"end": 3090,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "tag",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "tag",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "tag",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "43"
										},
										{
											"begin": 1442,
											"end": 1598,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "tag",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1442,
											"end": 1598,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "tag",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2292,
											"end": 2393,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1637,
											"end": 1722,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1637,
											"end": 1722,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "tag",
											"source": 8,
											"value": "10"
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "53"
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 2251,
											"end": 2501,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "tag",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 2251,
											"end": 2501,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "tag",
											"source": 8,
											"value": "53"
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "STOP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "tag",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "tag",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 605,
											"end": 654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "tag",
											"source": 8,
											"value": "58"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 605,
											"end": 654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "tag",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 605,
											"end": 654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "tag",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "tag",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 763,
											"end": 797,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 763,
											"end": 797,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 763,
											"end": 797,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "tag",
											"source": 8,
											"value": "62"
										},
										{
											"begin": 763,
											"end": 797,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "63"
										},
										{
											"begin": 763,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 763,
											"end": 797,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "tag",
											"source": 8,
											"value": "63"
										},
										{
											"begin": 763,
											"end": 797,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 763,
											"end": 797,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 763,
											"end": 797,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 763,
											"end": 797,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "tag",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 763,
											"end": 797,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 763,
											"end": 797,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 2542,
											"end": 2757,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2542,
											"end": 2757,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 661,
											"end": 710,
											"name": "tag",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "70"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "tag",
											"source": 8,
											"value": "70"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 661,
											"end": 710,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "tag",
											"source": 8,
											"value": "72"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 661,
											"end": 710,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "tag",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 661,
											"end": 710,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "tag",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "tag",
											"source": 8,
											"value": "15"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "75"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "tag",
											"source": 8,
											"value": "75"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 806,
											"end": 838,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "tag",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "78"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 806,
											"end": 838,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "tag",
											"source": 8,
											"value": "78"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "RETURN",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "tag",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 1692,
											"end": 1697,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 1692,
											"end": 1699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "tag",
											"source": 8,
											"value": "81"
										},
										{
											"begin": 1692,
											"end": 1699,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1678,
											"end": 1699,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1678,
											"end": 1699,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1678,
											"end": 1688,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1678,
											"end": 1699,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1678,
											"end": 1699,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1678,
											"end": 1699,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1674,
											"end": 1718,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 1674,
											"end": 1718,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "PUSH",
											"source": 8,
											"value": "AD9CD75900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1708,
											"end": 1718,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1674,
											"end": 1718,
											"name": "tag",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 1674,
											"end": 1718,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1729,
											"end": 1773,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 1761,
											"end": 1764,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1729,
											"end": 1760,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 1729,
											"end": 1773,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1729,
											"end": 1773,
											"name": "tag",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 1729,
											"end": 1773,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1781,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "tag",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 717,
											"end": 756,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 717,
											"end": 756,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "tag",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1530,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1530,
											"end": 1541,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1530,
											"end": 1543,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1530,
											"end": 1543,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1530,
											"end": 1543,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2026,
											"end": 2042,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2008,
											"end": 2023,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 2008,
											"end": 2042,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2008,
											"end": 2042,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2008,
											"end": 2042,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 2008,
											"end": 2042,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 2050,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "tag",
											"source": 8,
											"value": "39"
										},
										{
											"begin": 2603,
											"end": 3090,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 522,
											"end": 523,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 512,
											"end": 518,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 512,
											"end": 518,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 512,
											"end": 523,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "90"
										},
										{
											"begin": 504,
											"end": 538,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 504,
											"end": 538,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "PUSH",
											"source": 6,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 504,
											"end": 538,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 504,
											"end": 538,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 504,
											"end": 538,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 504,
											"end": 538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "tag",
											"source": 6,
											"value": "91"
										},
										{
											"begin": 504,
											"end": 538,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 504,
											"end": 538,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 504,
											"end": 538,
											"name": "tag",
											"source": 6,
											"value": "90"
										},
										{
											"begin": 504,
											"end": 538,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 558,
											"end": 559,
											"name": "PUSH",
											"source": 6,
											"value": "2"
										},
										{
											"begin": 549,
											"end": 555,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 549,
											"end": 559,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 549,
											"end": 559,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 549,
											"end": 559,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 549,
											"end": 559,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2676,
											"end": 2686,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 2663,
											"end": 2686,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2663,
											"end": 2686,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2663,
											"end": 2672,
											"modifierDepth": 1,
											"name": "ORIGIN",
											"source": 8
										},
										{
											"begin": 2663,
											"end": 2686,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2663,
											"end": 2686,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2663,
											"end": 2686,
											"modifierDepth": 1,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 2659,
											"end": 2710,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 2659,
											"end": 2710,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "3691D20A00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2695,
											"end": 2710,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2659,
											"end": 2710,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "94"
										},
										{
											"begin": 2659,
											"end": 2710,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2721,
											"end": 2735,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2767,
											"end": 2781,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2782,
											"end": 2792,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 2767,
											"end": 2793,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2752,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2753,
											"end": 2763,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2764,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2793,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "95"
										},
										{
											"begin": 2738,
											"end": 2793,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2793,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2793,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "96"
										},
										{
											"begin": 2738,
											"end": 2793,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2738,
											"end": 2793,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "95"
										},
										{
											"begin": 2738,
											"end": 2793,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2721,
											"end": 2793,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2721,
											"end": 2793,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2818,
											"end": 2819,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2808,
											"end": 2814,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2808,
											"end": 2819,
											"modifierDepth": 1,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2804,
											"end": 2846,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 2804,
											"end": 2846,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "6F9C7FCF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2828,
											"end": 2846,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2804,
											"end": 2846,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 2804,
											"end": 2846,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2885,
											"end": 2891,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2861,
											"end": 2882,
											"modifierDepth": 1,
											"name": "SELFBALANCE",
											"source": 8
										},
										{
											"begin": 2861,
											"end": 2891,
											"modifierDepth": 1,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2857,
											"end": 2920,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2857,
											"end": 2920,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 2857,
											"end": 2920,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "ABF01A0800000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2900,
											"end": 2920,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2857,
											"end": 2920,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 2857,
											"end": 2920,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2963,
											"end": 2969,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2947,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2948,
											"end": 2958,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2959,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "99"
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 2933,
											"end": 2969,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "99"
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 2933,
											"end": 2969,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2980,
											"end": 3031,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "101"
										},
										{
											"begin": 3012,
											"end": 3022,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 3024,
											"end": 3030,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2980,
											"end": 3011,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 2980,
											"end": 3031,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2980,
											"end": 3031,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "101"
										},
										{
											"begin": 2980,
											"end": 3031,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3063,
											"end": 3073,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "896E034966EAAF1ADC54ACC0F257056FEBBD300C9E47182CF761982CF1F5E430"
										},
										{
											"begin": 3075,
											"end": 3081,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "102"
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 3049,
											"end": 3082,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "tag",
											"source": 8,
											"value": "102"
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3049,
											"end": 3082,
											"modifierDepth": 1,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 2648,
											"end": 3090,
											"modifierDepth": 1,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 591,
											"end": 592,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 582,
											"end": 588,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 582,
											"end": 592,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 582,
											"end": 592,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 582,
											"end": 592,
											"name": "SSTORE",
											"source": 6
										},
										{
											"begin": 582,
											"end": 592,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2603,
											"end": 3090,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "tag",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1528,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 1528,
											"end": 1533,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 1528,
											"end": 1535,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1528,
											"end": 1535,
											"name": "tag",
											"source": 8,
											"value": "104"
										},
										{
											"begin": 1528,
											"end": 1535,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1514,
											"end": 1535,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1514,
											"end": 1535,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1514,
											"end": 1524,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1514,
											"end": 1535,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1514,
											"end": 1535,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1514,
											"end": 1535,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1510,
											"end": 1554,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "105"
										},
										{
											"begin": 1510,
											"end": 1554,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "PUSH",
											"source": 8,
											"value": "AD9CD75900000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1554,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1510,
											"end": 1554,
											"name": "tag",
											"source": 8,
											"value": "105"
										},
										{
											"begin": 1510,
											"end": 1554,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1583,
											"end": 1590,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1572,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1579,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1580,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1442,
											"end": 1598,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 2292,
											"end": 2393,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1530,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1530,
											"end": 1541,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1530,
											"end": 1543,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1530,
											"end": 1543,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1530,
											"end": 1543,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2386,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2383,
											"end": 2384,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2356,
											"end": 2374,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2356,
											"end": 2386,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2386,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2356,
											"end": 2386,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2292,
											"end": 2393,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1683,
											"end": 1690,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1709,
											"end": 1715,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1709,
											"end": 1715,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1709,
											"end": 1715,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1709,
											"end": 1715,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1709,
											"end": 1715,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1709,
											"end": 1715,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1709,
											"end": 1715,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1709,
											"end": 1715,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1709,
											"end": 1715,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1709,
											"end": 1715,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1709,
											"end": 1715,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1702,
											"end": 1715,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1702,
											"end": 1715,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1637,
											"end": 1722,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "tag",
											"source": 8,
											"value": "55"
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2358,
											"end": 2364,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2345,
											"end": 2354,
											"name": "CALLVALUE",
											"source": 8
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2345,
											"end": 2379,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2345,
											"end": 2379,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 2345,
											"end": 2379,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2345,
											"end": 2379,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2378,
											"end": 2379,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2368,
											"end": 2374,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2368,
											"end": 2379,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 2345,
											"end": 2379,
											"name": "tag",
											"source": 8,
											"value": "113"
										},
										{
											"begin": 2345,
											"end": 2379,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2341,
											"end": 2403,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2341,
											"end": 2403,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "114"
										},
										{
											"begin": 2341,
											"end": 2403,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "PUSH",
											"source": 8,
											"value": "2A2BB09200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2341,
											"end": 2403,
											"name": "tag",
											"source": 8,
											"value": "114"
										},
										{
											"begin": 2341,
											"end": 2403,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2442,
											"end": 2448,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2428,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2429,
											"end": 2437,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2438,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "115"
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 2414,
											"end": 2448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "tag",
											"source": 8,
											"value": "115"
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 2414,
											"end": 2448,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2476,
											"end": 2484,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "PUSH",
											"source": 8,
											"value": "F3CBBAD58A635FE73557A2824874AF183B5AC83978AE25D57EA4A2011C4DF859"
										},
										{
											"begin": 2486,
											"end": 2492,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "61"
										},
										{
											"begin": 2466,
											"end": 2493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "tag",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2466,
											"end": 2493,
											"name": "LOG2",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2251,
											"end": 2501,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "tag",
											"source": 8,
											"value": "59"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 605,
											"end": 654,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 605,
											"end": 654,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "tag",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 763,
											"end": 797,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 763,
											"end": 797,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 763,
											"end": 797,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1530,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1530,
											"end": 1541,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1530,
											"end": 1543,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1530,
											"end": 1543,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 1530,
											"end": 1543,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2646,
											"end": 2647,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2626,
											"end": 2648,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2626,
											"end": 2648,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2634,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2648,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2626,
											"end": 2648,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2626,
											"end": 2648,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2713,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 2622,
											"end": 2713,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2699,
											"end": 2700,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 2671,
											"end": 2702,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2671,
											"end": 2702,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2622,
											"end": 2713,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 2622,
											"end": 2713,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2722,
											"end": 2750,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 2741,
											"end": 2749,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2722,
											"end": 2740,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2722,
											"end": 2750,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2722,
											"end": 2750,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "122"
										},
										{
											"begin": 2722,
											"end": 2750,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2757,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 661,
											"end": 710,
											"name": "tag",
											"source": 8,
											"value": "73"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 661,
											"end": 710,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 661,
											"end": 710,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "tag",
											"source": 8,
											"value": "77"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "6"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 806,
											"end": 838,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "tag",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "125"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "124"
										},
										{
											"begin": 806,
											"end": 838,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "tag",
											"source": 8,
											"value": "125"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "126"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "127"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "126"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "tag",
											"source": 8,
											"value": "127"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "tag",
											"source": 8,
											"value": "128"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "128"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "tag",
											"source": 8,
											"value": "126"
										},
										{
											"begin": 806,
											"end": 838,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 806,
											"end": 838,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 840,
											"end": 1179,
											"name": "tag",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 840,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 912,
											"end": 924,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1111,
											"end": 1112,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1108,
											"end": 1109,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1105,
											"end": 1106,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1102,
											"end": 1103,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1094,
											"end": 1100,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1090,
											"end": 1092,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 1083,
											"end": 1088,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 1078,
											"end": 1113,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 1067,
											"end": 1113,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1067,
											"end": 1113,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1141,
											"end": 1148,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "130"
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 1133,
											"end": 1172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "tag",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "tag",
											"source": 7,
											"value": "130"
										},
										{
											"begin": 1133,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 902,
											"end": 1179,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 840,
											"end": 1179,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 840,
											"end": 1179,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 840,
											"end": 1179,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1205,
											"end": 1434,
											"name": "tag",
											"source": 8,
											"value": "87"
										},
										{
											"begin": 1205,
											"end": 1434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1270,
											"end": 1284,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1287,
											"end": 1299,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 1287,
											"end": 1297,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "135"
										},
										{
											"begin": 1287,
											"end": 1299,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1287,
											"end": 1299,
											"name": "tag",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 1287,
											"end": 1299,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1270,
											"end": 1299,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1270,
											"end": 1299,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1325,
											"end": 1331,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1331,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1314,
											"end": 1331,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1321,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "136"
										},
										{
											"begin": 1314,
											"end": 1319,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 1314,
											"end": 1321,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1321,
											"name": "tag",
											"source": 8,
											"value": "136"
										},
										{
											"begin": 1314,
											"end": 1321,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1331,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1314,
											"end": 1331,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1331,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1331,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1351,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1351,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1351,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 1314,
											"end": 1351,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1351,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1343,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1344,
											"end": 1350,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 1336,
											"end": 1351,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1335,
											"end": 1351,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1314,
											"end": 1351,
											"name": "tag",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 1314,
											"end": 1351,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1310,
											"end": 1427,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1310,
											"end": 1427,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "138"
										},
										{
											"begin": 1310,
											"end": 1427,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1402,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "139"
										},
										{
											"begin": 1402,
											"end": 1412,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "135"
										},
										{
											"begin": 1402,
											"end": 1414,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1402,
											"end": 1414,
											"name": "tag",
											"source": 8,
											"value": "139"
										},
										{
											"begin": 1402,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "PUSH",
											"source": 8,
											"value": "118CDAA700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "52"
										},
										{
											"begin": 1375,
											"end": 1415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "tag",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1375,
											"end": 1415,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1310,
											"end": 1427,
											"name": "tag",
											"source": 8,
											"value": "138"
										},
										{
											"begin": 1310,
											"end": 1427,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1259,
											"end": 1434,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1205,
											"end": 1434,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2911,
											"end": 3098,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2911,
											"end": 3098,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3000,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3003,
											"end": 3009,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3003,
											"end": 3009,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3003,
											"end": 3009,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3003,
											"end": 3009,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3003,
											"end": 3009,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3003,
											"end": 3009,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3003,
											"end": 3009,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3003,
											"end": 3009,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3003,
											"end": 3009,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3003,
											"end": 3009,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3003,
											"end": 3009,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3009,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2984,
											"end": 3009,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3028,
											"end": 3036,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3025,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3019,
											"end": 3025,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3019,
											"end": 3036,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3082,
											"end": 3090,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3072,
											"end": 3080,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3051,
											"end": 3091,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2974,
											"end": 3098,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2911,
											"end": 3098,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2911,
											"end": 3098,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 655,
											"end": 751,
											"name": "tag",
											"source": 5,
											"value": "135"
										},
										{
											"begin": 655,
											"end": 751,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 708,
											"end": 715,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 734,
											"end": 744,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 727,
											"end": 744,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 727,
											"end": 744,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 655,
											"end": 751,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 655,
											"end": 751,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 334,
											"end": 460,
											"name": "tag",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 453,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 404,
											"end": 409,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 400,
											"end": 454,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 389,
											"end": 454,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 389,
											"end": 454,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 334,
											"end": 460,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 334,
											"end": 460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 466,
											"end": 562,
											"name": "tag",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 503,
											"end": 510,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 532,
											"end": 556,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 532,
											"end": 556,
											"name": "tag",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 521,
											"end": 556,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 521,
											"end": 556,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 466,
											"end": 562,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 466,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 568,
											"end": 690,
											"name": "tag",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 659,
											"end": 664,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 641,
											"end": 665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 641,
											"end": 665,
											"name": "tag",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 634,
											"end": 639,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 631,
											"end": 666,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 621,
											"end": 684,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 678,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 670,
											"end": 682,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 621,
											"end": 684,
											"name": "tag",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 568,
											"end": 690,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 568,
											"end": 690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 696,
											"end": 835,
											"name": "tag",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 767,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 758,
											"end": 787,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 758,
											"end": 787,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 796,
											"end": 829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 796,
											"end": 829,
											"name": "tag",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 696,
											"end": 835,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 841,
											"end": 918,
											"name": "tag",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 841,
											"end": 918,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 878,
											"end": 885,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 907,
											"end": 912,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 896,
											"end": 912,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 896,
											"end": 912,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 841,
											"end": 918,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 841,
											"end": 918,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 841,
											"end": 918,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 841,
											"end": 918,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "tag",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 1015,
											"end": 1020,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 997,
											"end": 1021,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "tag",
											"source": 9,
											"value": "184"
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 990,
											"end": 995,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 987,
											"end": 1022,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1036,
											"end": 1037,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1033,
											"end": 1034,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1026,
											"end": 1038,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "tag",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 924,
											"end": 1046,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "tag",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1098,
											"end": 1103,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1123,
											"end": 1143,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "187"
										},
										{
											"begin": 1179,
											"end": 1184,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "151"
										},
										{
											"begin": 1152,
											"end": 1185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "tag",
											"source": 9,
											"value": "187"
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1052,
											"end": 1191,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "tag",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1265,
											"end": 1271,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1322,
											"end": 1324,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1310,
											"end": 1319,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1301,
											"end": 1308,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1293,
											"end": 1325,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "190"
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 1328,
											"end": 1407,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "tag",
											"source": 9,
											"value": "190"
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "tag",
											"source": 9,
											"value": "189"
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1448,
											"end": 1449,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1509,
											"end": 1515,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1498,
											"end": 1507,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1494,
											"end": 1516,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 1473,
											"end": 1526,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "tag",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1463,
											"end": 1526,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1463,
											"end": 1526,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1419,
											"end": 1536,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1575,
											"end": 1577,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "192"
										},
										{
											"begin": 1646,
											"end": 1653,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1637,
											"end": 1643,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1626,
											"end": 1635,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1622,
											"end": 1644,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 1601,
											"end": 1654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "tag",
											"source": 9,
											"value": "192"
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1591,
											"end": 1654,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1591,
											"end": 1654,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1546,
											"end": 1664,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1197,
											"end": 1671,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1677,
											"end": 2006,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 1677,
											"end": 2006,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1736,
											"end": 1742,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1785,
											"end": 1787,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1773,
											"end": 1782,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1764,
											"end": 1771,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1760,
											"end": 1783,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 1756,
											"end": 1788,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 1753,
											"end": 1872,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 1753,
											"end": 1872,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "194"
										},
										{
											"begin": 1753,
											"end": 1872,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1791,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "195"
										},
										{
											"begin": 1791,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 1791,
											"end": 1870,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1791,
											"end": 1870,
											"name": "tag",
											"source": 9,
											"value": "195"
										},
										{
											"begin": 1791,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1753,
											"end": 1872,
											"name": "tag",
											"source": 9,
											"value": "194"
										},
										{
											"begin": 1753,
											"end": 1872,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1911,
											"end": 1912,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1936,
											"end": 1989,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "196"
										},
										{
											"begin": 1981,
											"end": 1988,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1972,
											"end": 1978,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 1961,
											"end": 1970,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1957,
											"end": 1979,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1936,
											"end": 1989,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 1936,
											"end": 1989,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1936,
											"end": 1989,
											"name": "tag",
											"source": 9,
											"value": "196"
										},
										{
											"begin": 1936,
											"end": 1989,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1926,
											"end": 1989,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1926,
											"end": 1989,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1882,
											"end": 1999,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1677,
											"end": 2006,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1677,
											"end": 2006,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1677,
											"end": 2006,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1677,
											"end": 2006,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1677,
											"end": 2006,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2012,
											"end": 2102,
											"name": "tag",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 2012,
											"end": 2102,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2046,
											"end": 2053,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2089,
											"end": 2094,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2082,
											"end": 2095,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2075,
											"end": 2096,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2064,
											"end": 2096,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2064,
											"end": 2096,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2012,
											"end": 2102,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2012,
											"end": 2102,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2012,
											"end": 2102,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2012,
											"end": 2102,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2108,
											"end": 2217,
											"name": "tag",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 2108,
											"end": 2217,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2189,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "199"
										},
										{
											"begin": 2204,
											"end": 2209,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2189,
											"end": 2210,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 2189,
											"end": 2210,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2189,
											"end": 2210,
											"name": "tag",
											"source": 9,
											"value": "199"
										},
										{
											"begin": 2189,
											"end": 2210,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2184,
											"end": 2187,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2177,
											"end": 2211,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2108,
											"end": 2217,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2108,
											"end": 2217,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2108,
											"end": 2217,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2433,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 2223,
											"end": 2433,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2310,
											"end": 2314,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2348,
											"end": 2350,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2337,
											"end": 2346,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2333,
											"end": 2351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2351,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2325,
											"end": 2351,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2361,
											"end": 2426,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "201"
										},
										{
											"begin": 2423,
											"end": 2424,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2412,
											"end": 2421,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2408,
											"end": 2425,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2399,
											"end": 2405,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2361,
											"end": 2426,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "154"
										},
										{
											"begin": 2361,
											"end": 2426,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2361,
											"end": 2426,
											"name": "tag",
											"source": 9,
											"value": "201"
										},
										{
											"begin": 2361,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2433,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2433,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2433,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2433,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2223,
											"end": 2433,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2439,
											"end": 2768,
											"name": "tag",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 2439,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2498,
											"end": 2504,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2547,
											"end": 2549,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2535,
											"end": 2544,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2526,
											"end": 2533,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2522,
											"end": 2545,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2518,
											"end": 2550,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 2634,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 2634,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "203"
										},
										{
											"begin": 2515,
											"end": 2634,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2553,
											"end": 2632,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "204"
										},
										{
											"begin": 2553,
											"end": 2632,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 2553,
											"end": 2632,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2553,
											"end": 2632,
											"name": "tag",
											"source": 9,
											"value": "204"
										},
										{
											"begin": 2553,
											"end": 2632,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2515,
											"end": 2634,
											"name": "tag",
											"source": 9,
											"value": "203"
										},
										{
											"begin": 2515,
											"end": 2634,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2673,
											"end": 2674,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2698,
											"end": 2751,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 2743,
											"end": 2750,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2734,
											"end": 2740,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2723,
											"end": 2732,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2719,
											"end": 2741,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2698,
											"end": 2751,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "152"
										},
										{
											"begin": 2698,
											"end": 2751,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2698,
											"end": 2751,
											"name": "tag",
											"source": 9,
											"value": "205"
										},
										{
											"begin": 2698,
											"end": 2751,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2688,
											"end": 2751,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2688,
											"end": 2751,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2644,
											"end": 2761,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2439,
											"end": 2768,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2439,
											"end": 2768,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2439,
											"end": 2768,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2439,
											"end": 2768,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2439,
											"end": 2768,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2774,
											"end": 2890,
											"name": "tag",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 2774,
											"end": 2890,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2844,
											"end": 2865,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 2859,
											"end": 2864,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2844,
											"end": 2865,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "153"
										},
										{
											"begin": 2844,
											"end": 2865,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2844,
											"end": 2865,
											"name": "tag",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 2844,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2837,
											"end": 2842,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2834,
											"end": 2866,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2824,
											"end": 2884,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "208"
										},
										{
											"begin": 2824,
											"end": 2884,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2880,
											"end": 2881,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2877,
											"end": 2878,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2870,
											"end": 2882,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2824,
											"end": 2884,
											"name": "tag",
											"source": 9,
											"value": "208"
										},
										{
											"begin": 2824,
											"end": 2884,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2774,
											"end": 2890,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2774,
											"end": 2890,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2896,
											"end": 3029,
											"name": "tag",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 2896,
											"end": 3029,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2939,
											"end": 2944,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2977,
											"end": 2983,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2964,
											"end": 2984,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2955,
											"end": 2984,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2955,
											"end": 2984,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2993,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "210"
										},
										{
											"begin": 3017,
											"end": 3022,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2993,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "155"
										},
										{
											"begin": 2993,
											"end": 3023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2993,
											"end": 3023,
											"name": "tag",
											"source": 9,
											"value": "210"
										},
										{
											"begin": 2993,
											"end": 3023,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2896,
											"end": 3029,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2896,
											"end": 3029,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2896,
											"end": 3029,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2896,
											"end": 3029,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2896,
											"end": 3029,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3503,
											"name": "tag",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 3035,
											"end": 3503,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3100,
											"end": 3106,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3108,
											"end": 3114,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3157,
											"end": 3159,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3145,
											"end": 3154,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3136,
											"end": 3143,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3132,
											"end": 3155,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3128,
											"end": 3160,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 3125,
											"end": 3244,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3125,
											"end": 3244,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "212"
										},
										{
											"begin": 3125,
											"end": 3244,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3163,
											"end": 3242,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "213"
										},
										{
											"begin": 3163,
											"end": 3242,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "144"
										},
										{
											"begin": 3163,
											"end": 3242,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3163,
											"end": 3242,
											"name": "tag",
											"source": 9,
											"value": "213"
										},
										{
											"begin": 3163,
											"end": 3242,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3125,
											"end": 3244,
											"name": "tag",
											"source": 9,
											"value": "212"
										},
										{
											"begin": 3125,
											"end": 3244,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3283,
											"end": 3284,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3308,
											"end": 3361,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "214"
										},
										{
											"begin": 3353,
											"end": 3360,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3344,
											"end": 3350,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3333,
											"end": 3342,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3329,
											"end": 3351,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3308,
											"end": 3361,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "149"
										},
										{
											"begin": 3308,
											"end": 3361,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3308,
											"end": 3361,
											"name": "tag",
											"source": 9,
											"value": "214"
										},
										{
											"begin": 3308,
											"end": 3361,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3298,
											"end": 3361,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3298,
											"end": 3361,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3254,
											"end": 3371,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3410,
											"end": 3412,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3436,
											"end": 3486,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "215"
										},
										{
											"begin": 3478,
											"end": 3485,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3469,
											"end": 3475,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3458,
											"end": 3467,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3454,
											"end": 3476,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3436,
											"end": 3486,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "156"
										},
										{
											"begin": 3436,
											"end": 3486,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3436,
											"end": 3486,
											"name": "tag",
											"source": 9,
											"value": "215"
										},
										{
											"begin": 3436,
											"end": 3486,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3426,
											"end": 3486,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3426,
											"end": 3486,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3381,
											"end": 3496,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3503,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3503,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3503,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3503,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3503,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3035,
											"end": 3503,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3509,
											"end": 3627,
											"name": "tag",
											"source": 9,
											"value": "157"
										},
										{
											"begin": 3509,
											"end": 3627,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3596,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 3614,
											"end": 3619,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3596,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "147"
										},
										{
											"begin": 3596,
											"end": 3620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3596,
											"end": 3620,
											"name": "tag",
											"source": 9,
											"value": "217"
										},
										{
											"begin": 3596,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3591,
											"end": 3594,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3584,
											"end": 3621,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3509,
											"end": 3627,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3509,
											"end": 3627,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3509,
											"end": 3627,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3855,
											"name": "tag",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 3633,
											"end": 3855,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3726,
											"end": 3730,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3764,
											"end": 3766,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3753,
											"end": 3762,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3749,
											"end": 3767,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3741,
											"end": 3767,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3741,
											"end": 3767,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3777,
											"end": 3848,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "219"
										},
										{
											"begin": 3845,
											"end": 3846,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3834,
											"end": 3843,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3830,
											"end": 3847,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3821,
											"end": 3827,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3777,
											"end": 3848,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "157"
										},
										{
											"begin": 3777,
											"end": 3848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3777,
											"end": 3848,
											"name": "tag",
											"source": 9,
											"value": "219"
										},
										{
											"begin": 3777,
											"end": 3848,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3855,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3855,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3855,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3855,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3855,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3861,
											"end": 3979,
											"name": "tag",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 3861,
											"end": 3979,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3948,
											"end": 3972,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "221"
										},
										{
											"begin": 3966,
											"end": 3971,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3948,
											"end": 3972,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 3948,
											"end": 3972,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3948,
											"end": 3972,
											"name": "tag",
											"source": 9,
											"value": "221"
										},
										{
											"begin": 3948,
											"end": 3972,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3943,
											"end": 3946,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3936,
											"end": 3973,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3861,
											"end": 3979,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3861,
											"end": 3979,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3861,
											"end": 3979,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3985,
											"end": 4207,
											"name": "tag",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 3985,
											"end": 4207,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4078,
											"end": 4082,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4116,
											"end": 4118,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4105,
											"end": 4114,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4101,
											"end": 4119,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4093,
											"end": 4119,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4093,
											"end": 4119,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4129,
											"end": 4200,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "223"
										},
										{
											"begin": 4197,
											"end": 4198,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4186,
											"end": 4195,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4182,
											"end": 4199,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4173,
											"end": 4179,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4129,
											"end": 4200,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 4129,
											"end": 4200,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4129,
											"end": 4200,
											"name": "tag",
											"source": 9,
											"value": "223"
										},
										{
											"begin": 4129,
											"end": 4200,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3985,
											"end": 4207,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3985,
											"end": 4207,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3985,
											"end": 4207,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3985,
											"end": 4207,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3985,
											"end": 4207,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4213,
											"end": 4312,
											"name": "tag",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 4213,
											"end": 4312,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4265,
											"end": 4271,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4299,
											"end": 4304,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4293,
											"end": 4305,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4283,
											"end": 4305,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4283,
											"end": 4305,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4213,
											"end": 4312,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4213,
											"end": 4312,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4213,
											"end": 4312,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4213,
											"end": 4312,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4318,
											"end": 4487,
											"name": "tag",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 4318,
											"end": 4487,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4402,
											"end": 4413,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4436,
											"end": 4442,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4431,
											"end": 4434,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4424,
											"end": 4443,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4476,
											"end": 4480,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4471,
											"end": 4474,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4467,
											"end": 4481,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4452,
											"end": 4481,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4452,
											"end": 4481,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4318,
											"end": 4487,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4318,
											"end": 4487,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4318,
											"end": 4487,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4318,
											"end": 4487,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4318,
											"end": 4487,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4493,
											"end": 4739,
											"name": "tag",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 4493,
											"end": 4739,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4574,
											"end": 4575,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4584,
											"end": 4697,
											"name": "tag",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 4584,
											"end": 4697,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4598,
											"end": 4604,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4595,
											"end": 4596,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4592,
											"end": 4605,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 4584,
											"end": 4697,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4584,
											"end": 4697,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 4584,
											"end": 4697,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4683,
											"end": 4684,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4678,
											"end": 4681,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4674,
											"end": 4685,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4668,
											"end": 4686,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 4664,
											"end": 4665,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4659,
											"end": 4662,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4655,
											"end": 4666,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4648,
											"end": 4687,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4620,
											"end": 4622,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4617,
											"end": 4618,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4613,
											"end": 4623,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4608,
											"end": 4623,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4608,
											"end": 4623,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4584,
											"end": 4697,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 4584,
											"end": 4697,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4584,
											"end": 4697,
											"name": "tag",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 4584,
											"end": 4697,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4731,
											"end": 4732,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4722,
											"end": 4728,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4717,
											"end": 4720,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4713,
											"end": 4729,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4706,
											"end": 4733,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4555,
											"end": 4739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4493,
											"end": 4739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4493,
											"end": 4739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4493,
											"end": 4739,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4493,
											"end": 4739,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4745,
											"end": 4847,
											"name": "tag",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 4745,
											"end": 4847,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4786,
											"end": 4792,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4837,
											"end": 4839,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4833,
											"end": 4840,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4828,
											"end": 4830,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 4821,
											"end": 4826,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4817,
											"end": 4831,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4813,
											"end": 4841,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4803,
											"end": 4841,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4803,
											"end": 4841,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4745,
											"end": 4847,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4745,
											"end": 4847,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4745,
											"end": 4847,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4745,
											"end": 4847,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4853,
											"end": 5230,
											"name": "tag",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 4853,
											"end": 5230,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4941,
											"end": 4944,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4969,
											"end": 5008,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 5002,
											"end": 5007,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4969,
											"end": 5008,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "159"
										},
										{
											"begin": 4969,
											"end": 5008,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4969,
											"end": 5008,
											"name": "tag",
											"source": 9,
											"value": "232"
										},
										{
											"begin": 4969,
											"end": 5008,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5024,
											"end": 5095,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "233"
										},
										{
											"begin": 5088,
											"end": 5094,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5083,
											"end": 5086,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5024,
											"end": 5095,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 5024,
											"end": 5095,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5024,
											"end": 5095,
											"name": "tag",
											"source": 9,
											"value": "233"
										},
										{
											"begin": 5024,
											"end": 5095,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5017,
											"end": 5095,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 5017,
											"end": 5095,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5104,
											"end": 5169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 5162,
											"end": 5168,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5157,
											"end": 5160,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 5150,
											"end": 5154,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5143,
											"end": 5148,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 5139,
											"end": 5155,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5104,
											"end": 5169,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 5104,
											"end": 5169,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5104,
											"end": 5169,
											"name": "tag",
											"source": 9,
											"value": "234"
										},
										{
											"begin": 5104,
											"end": 5169,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5194,
											"end": 5223,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "235"
										},
										{
											"begin": 5216,
											"end": 5222,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5194,
											"end": 5223,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "162"
										},
										{
											"begin": 5194,
											"end": 5223,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5194,
											"end": 5223,
											"name": "tag",
											"source": 9,
											"value": "235"
										},
										{
											"begin": 5194,
											"end": 5223,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5189,
											"end": 5192,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5185,
											"end": 5224,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5178,
											"end": 5224,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5178,
											"end": 5224,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4945,
											"end": 5230,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4853,
											"end": 5230,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4853,
											"end": 5230,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4853,
											"end": 5230,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4853,
											"end": 5230,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4853,
											"end": 5230,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5236,
											"end": 5549,
											"name": "tag",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 5236,
											"end": 5549,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5349,
											"end": 5353,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5387,
											"end": 5389,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 5376,
											"end": 5385,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5372,
											"end": 5390,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5390,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5364,
											"end": 5390,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5436,
											"end": 5445,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5430,
											"end": 5434,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5426,
											"end": 5446,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 5422,
											"end": 5423,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5411,
											"end": 5420,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5407,
											"end": 5424,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5400,
											"end": 5447,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5464,
											"end": 5542,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 5537,
											"end": 5541,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5528,
											"end": 5534,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 5464,
											"end": 5542,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "163"
										},
										{
											"begin": 5464,
											"end": 5542,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5464,
											"end": 5542,
											"name": "tag",
											"source": 9,
											"value": "237"
										},
										{
											"begin": 5464,
											"end": 5542,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5456,
											"end": 5542,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5456,
											"end": 5542,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5236,
											"end": 5549,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 5236,
											"end": 5549,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5236,
											"end": 5549,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5236,
											"end": 5549,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5236,
											"end": 5549,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5555,
											"end": 5715,
											"name": "tag",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 5555,
											"end": 5715,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5695,
											"end": 5707,
											"name": "PUSH",
											"source": 9,
											"value": "5245454E5452414E435900000000000000000000000000000000000000000000"
										},
										{
											"begin": 5691,
											"end": 5692,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5683,
											"end": 5689,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5679,
											"end": 5693,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 5672,
											"end": 5708,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5555,
											"end": 5715,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5555,
											"end": 5715,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5721,
											"end": 6087,
											"name": "tag",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 5721,
											"end": 6087,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5863,
											"end": 5866,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5884,
											"end": 5951,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "240"
										},
										{
											"begin": 5948,
											"end": 5950,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 5943,
											"end": 5946,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 5884,
											"end": 5951,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 5884,
											"end": 5951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5884,
											"end": 5951,
											"name": "tag",
											"source": 9,
											"value": "240"
										},
										{
											"begin": 5884,
											"end": 5951,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5877,
											"end": 5951,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5877,
											"end": 5951,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5960,
											"end": 6053,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "241"
										},
										{
											"begin": 6049,
											"end": 6052,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5960,
											"end": 6053,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 5960,
											"end": 6053,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5960,
											"end": 6053,
											"name": "tag",
											"source": 9,
											"value": "241"
										},
										{
											"begin": 5960,
											"end": 6053,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6078,
											"end": 6080,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6073,
											"end": 6076,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6069,
											"end": 6081,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6062,
											"end": 6081,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6062,
											"end": 6081,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5721,
											"end": 6087,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5721,
											"end": 6087,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5721,
											"end": 6087,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5721,
											"end": 6087,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6093,
											"end": 6512,
											"name": "tag",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 6093,
											"end": 6512,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6259,
											"end": 6263,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6297,
											"end": 6299,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6286,
											"end": 6295,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6282,
											"end": 6300,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6274,
											"end": 6300,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6274,
											"end": 6300,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6346,
											"end": 6355,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6340,
											"end": 6344,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6336,
											"end": 6356,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6332,
											"end": 6333,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6321,
											"end": 6330,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6317,
											"end": 6334,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6310,
											"end": 6357,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6374,
											"end": 6505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "243"
										},
										{
											"begin": 6500,
											"end": 6504,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6374,
											"end": 6505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 6374,
											"end": 6505,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6374,
											"end": 6505,
											"name": "tag",
											"source": 9,
											"value": "243"
										},
										{
											"begin": 6374,
											"end": 6505,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6366,
											"end": 6505,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6366,
											"end": 6505,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6093,
											"end": 6512,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6093,
											"end": 6512,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6093,
											"end": 6512,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6093,
											"end": 6512,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6518,
											"end": 6698,
											"name": "tag",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 6518,
											"end": 6698,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6566,
											"end": 6643,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6563,
											"end": 6564,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6556,
											"end": 6644,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6663,
											"end": 6667,
											"name": "PUSH",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 6660,
											"end": 6661,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6653,
											"end": 6668,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6687,
											"end": 6691,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 6684,
											"end": 6685,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6677,
											"end": 6692,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 6704,
											"end": 6898,
											"name": "tag",
											"source": 9,
											"value": "96"
										},
										{
											"begin": 6704,
											"end": 6898,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6744,
											"end": 6748,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6764,
											"end": 6784,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "246"
										},
										{
											"begin": 6782,
											"end": 6783,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6764,
											"end": 6784,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 6764,
											"end": 6784,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6764,
											"end": 6784,
											"name": "tag",
											"source": 9,
											"value": "246"
										},
										{
											"begin": 6764,
											"end": 6784,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6759,
											"end": 6784,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6759,
											"end": 6784,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6798,
											"end": 6818,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "247"
										},
										{
											"begin": 6816,
											"end": 6817,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6798,
											"end": 6818,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 6798,
											"end": 6818,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6798,
											"end": 6818,
											"name": "tag",
											"source": 9,
											"value": "247"
										},
										{
											"begin": 6798,
											"end": 6818,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6793,
											"end": 6818,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6793,
											"end": 6818,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6842,
											"end": 6843,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6839,
											"end": 6840,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6835,
											"end": 6844,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 6827,
											"end": 6844,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6827,
											"end": 6844,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6866,
											"end": 6867,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6860,
											"end": 6864,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6857,
											"end": 6868,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 6854,
											"end": 6891,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6854,
											"end": 6891,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "248"
										},
										{
											"begin": 6854,
											"end": 6891,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6871,
											"end": 6889,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "249"
										},
										{
											"begin": 6871,
											"end": 6889,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 6871,
											"end": 6889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6871,
											"end": 6889,
											"name": "tag",
											"source": 9,
											"value": "249"
										},
										{
											"begin": 6871,
											"end": 6889,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6854,
											"end": 6891,
											"name": "tag",
											"source": 9,
											"value": "248"
										},
										{
											"begin": 6854,
											"end": 6891,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6704,
											"end": 6898,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6704,
											"end": 6898,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6704,
											"end": 6898,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6704,
											"end": 6898,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6704,
											"end": 6898,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6904,
											"end": 7095,
											"name": "tag",
											"source": 9,
											"value": "100"
										},
										{
											"begin": 6904,
											"end": 7095,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6944,
											"end": 6947,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6963,
											"end": 6983,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 6981,
											"end": 6982,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6963,
											"end": 6983,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 6963,
											"end": 6983,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6963,
											"end": 6983,
											"name": "tag",
											"source": 9,
											"value": "251"
										},
										{
											"begin": 6963,
											"end": 6983,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6958,
											"end": 6983,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6958,
											"end": 6983,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6997,
											"end": 7017,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 7015,
											"end": 7016,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6997,
											"end": 7017,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "150"
										},
										{
											"begin": 6997,
											"end": 7017,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6997,
											"end": 7017,
											"name": "tag",
											"source": 9,
											"value": "252"
										},
										{
											"begin": 6997,
											"end": 7017,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6992,
											"end": 7017,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6992,
											"end": 7017,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7040,
											"end": 7041,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7037,
											"end": 7038,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7033,
											"end": 7042,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7026,
											"end": 7042,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7026,
											"end": 7042,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7061,
											"end": 7064,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7058,
											"end": 7059,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7055,
											"end": 7065,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 7052,
											"end": 7088,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 7052,
											"end": 7088,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "253"
										},
										{
											"begin": 7052,
											"end": 7088,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7068,
											"end": 7086,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "254"
										},
										{
											"begin": 7068,
											"end": 7086,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "166"
										},
										{
											"begin": 7068,
											"end": 7086,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7068,
											"end": 7086,
											"name": "tag",
											"source": 9,
											"value": "254"
										},
										{
											"begin": 7068,
											"end": 7086,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7052,
											"end": 7088,
											"name": "tag",
											"source": 9,
											"value": "253"
										},
										{
											"begin": 7052,
											"end": 7088,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6904,
											"end": 7095,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6904,
											"end": 7095,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6904,
											"end": 7095,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6904,
											"end": 7095,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6904,
											"end": 7095,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7101,
											"end": 7281,
											"name": "tag",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 7101,
											"end": 7281,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7149,
											"end": 7226,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7146,
											"end": 7147,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7139,
											"end": 7227,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7246,
											"end": 7250,
											"name": "PUSH",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 7243,
											"end": 7244,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 7236,
											"end": 7251,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7270,
											"end": 7274,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 7267,
											"end": 7268,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7260,
											"end": 7275,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 7287,
											"end": 7607,
											"name": "tag",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 7287,
											"end": 7607,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7331,
											"end": 7337,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7368,
											"end": 7369,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 7362,
											"end": 7366,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7358,
											"end": 7370,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 7348,
											"end": 7370,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7348,
											"end": 7370,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7415,
											"end": 7416,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 7409,
											"end": 7413,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7405,
											"end": 7417,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7436,
											"end": 7454,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 7426,
											"end": 7507,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "257"
										},
										{
											"begin": 7426,
											"end": 7507,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7492,
											"end": 7496,
											"name": "PUSH",
											"source": 9,
											"value": "7F"
										},
										{
											"begin": 7484,
											"end": 7490,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7480,
											"end": 7497,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7470,
											"end": 7497,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7470,
											"end": 7497,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7426,
											"end": 7507,
											"name": "tag",
											"source": 9,
											"value": "257"
										},
										{
											"begin": 7426,
											"end": 7507,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7554,
											"end": 7556,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 7546,
											"end": 7552,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7543,
											"end": 7557,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 7523,
											"end": 7541,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 7520,
											"end": 7558,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 7517,
											"end": 7601,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "258"
										},
										{
											"begin": 7517,
											"end": 7601,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 7573,
											"end": 7591,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 7573,
											"end": 7591,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 7573,
											"end": 7591,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7573,
											"end": 7591,
											"name": "tag",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 7573,
											"end": 7591,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7517,
											"end": 7601,
											"name": "tag",
											"source": 9,
											"value": "258"
										},
										{
											"begin": 7517,
											"end": 7601,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7338,
											"end": 7607,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7287,
											"end": 7607,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7287,
											"end": 7607,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7287,
											"end": 7607,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7287,
											"end": 7607,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7613,
											"end": 7782,
											"name": "tag",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 7613,
											"end": 7782,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7753,
											"end": 7774,
											"name": "PUSH",
											"source": 9,
											"value": "4554485F5452414E534645525F4641494C454400000000000000000000000000"
										},
										{
											"begin": 7749,
											"end": 7750,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7741,
											"end": 7747,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 7737,
											"end": 7751,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 7730,
											"end": 7775,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 7613,
											"end": 7782,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7613,
											"end": 7782,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7788,
											"end": 8154,
											"name": "tag",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 7788,
											"end": 8154,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7930,
											"end": 7933,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7951,
											"end": 8018,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "262"
										},
										{
											"begin": 8015,
											"end": 8017,
											"name": "PUSH",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 8010,
											"end": 8013,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 7951,
											"end": 8018,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "160"
										},
										{
											"begin": 7951,
											"end": 8018,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 7951,
											"end": 8018,
											"name": "tag",
											"source": 9,
											"value": "262"
										},
										{
											"begin": 7951,
											"end": 8018,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 7944,
											"end": 8018,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7944,
											"end": 8018,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8027,
											"end": 8120,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 8116,
											"end": 8119,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8027,
											"end": 8120,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "168"
										},
										{
											"begin": 8027,
											"end": 8120,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8027,
											"end": 8120,
											"name": "tag",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 8027,
											"end": 8120,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8145,
											"end": 8147,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8140,
											"end": 8143,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8136,
											"end": 8148,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8129,
											"end": 8148,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8129,
											"end": 8148,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7788,
											"end": 8154,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 7788,
											"end": 8154,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 7788,
											"end": 8154,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 7788,
											"end": 8154,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8160,
											"end": 8579,
											"name": "tag",
											"source": 9,
											"value": "132"
										},
										{
											"begin": 8160,
											"end": 8579,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8326,
											"end": 8330,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8364,
											"end": 8366,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 8353,
											"end": 8362,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 8349,
											"end": 8367,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8341,
											"end": 8367,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8341,
											"end": 8367,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8413,
											"end": 8422,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8407,
											"end": 8411,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8403,
											"end": 8423,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 8399,
											"end": 8400,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8388,
											"end": 8397,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 8384,
											"end": 8401,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 8377,
											"end": 8424,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8441,
											"end": 8572,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "265"
										},
										{
											"begin": 8567,
											"end": 8571,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8441,
											"end": 8572,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 8441,
											"end": 8572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 8441,
											"end": 8572,
											"name": "tag",
											"source": 9,
											"value": "265"
										},
										{
											"begin": 8441,
											"end": 8572,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8433,
											"end": 8572,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8433,
											"end": 8572,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8160,
											"end": 8579,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 8160,
											"end": 8579,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 8160,
											"end": 8579,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 8160,
											"end": 8579,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/access/Ownable.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/solady-main/src/utils/ReentrancyGuard.sol",
								"lib/solady-main/src/utils/SafeTransferLib.sol",
								"src/_Recommend.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"alreadyClaimed(address)": "f54b893b",
							"claimTokens()": "48c54b9d",
							"isAdmin(address)": "24d7806c",
							"obtainedAmount(address)": "df0f0951",
							"owner()": "8da5cb5b",
							"recommendAmount()": "e44cec7c",
							"renounceOwnership()": "715018a6",
							"rescueETH(address,uint256)": "099a04e5",
							"setAdmin(address,bool)": "4b0bddd2",
							"setClaimableTokens(address,uint256)": "b43e6a53",
							"setRecommendAmount(uint256)": "30710d04",
							"transferOwnership(address)": "f2fde38b",
							"versions()": "f8b1cb3c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_CallerNotEOA\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_IllegalValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_NoOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_NoTokensToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_NotSufficientFund\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"ContractDeploy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"obtainedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recommendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setClaimableTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_recommendAmount\",\"type\":\"uint256\"}],\"name\":\"setRecommendAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"A contract that recommends relevant features.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"claimTokens()\":{\"details\":\"Has been recorded can claim the corresponding referral reward.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setClaimableTokens(address,uint256)\":{\"details\":\"Only bond contracts can set a record of tokens that can be claimed.\",\"params\":{\"amount\":\"The quantity that can be claimed.\",\"referrer\":\"The referrer.\"}},\"setRecommendAmount(uint256)\":{\"details\":\"The referrer's algebra.\",\"params\":{\"_recommendAmount\":\"The reward is returned to the superior algebra.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"_Recommend.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/_Recommend.sol\":\"_Recommend\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0x27c59ec88f0350d3d28d222a078e11bda664b955e012fe9a74962bf10c936209\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3a300244e864b1362aea21080840ba1e4bc8dba7bcf21fe2dc4348b60d6b0d5\",\"dweb:/ipfs/QmV1L6ium91zyYCuxisumGnMVsQcNPQryaVp7t8aKgYGor\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xdef64bb44aa222a632814704c59a6a5ceb4ea8ef5216749b17c73c3aa1cde00c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f27ae1402a37e955103e938d769d76339a6968acb482e0e80d455767e533edd6\",\"dweb:/ipfs/QmTWPEMKMP7MujrfsZTFBm2voSzxJ6zkV32S4GJM4iwvKi\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xf758f03f984e2e493fa46454a553acd2f2f19e23beb7aeb77423a16548c7a127\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://354e6443e672cd37292756a5007c881f94d94c2436ef863c0678759b0488d2c1\",\"dweb:/ipfs/QmQuDQAePWXF3WCzZoXLMVoVPubuskc2fG3DbARs6dGJRn\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x2a67691f431a6e5eeae9012a19c82ceef113b43cd68435911dec83da57b9d407\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29aae0becfbae61a9dd9452f989f58ce843060af89ef5aeb01e7122c4e8b7475\",\"dweb:/ipfs/QmPaGNM5zCMkJKGm2dKrivwEegwfN7kQw9E7RvMgKbxrqj\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x7ec16fe73a675b22572684bfa0f108050eb259cec3110f556f0ae9edb69d7cd6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://810c3948142e0049c7a67b22220c976e266c782de2d2d4ca0a36d9041aaa15a4\",\"dweb:/ipfs/QmTLmHzCQhgdKrTyABwiLRHkKaAZMBi6oMzpAuxkqFnq2G\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x3aa312348f02eb2c6f71dd936583ec09761a5d25e5f7448217e2cd7739f595df\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff75375a8b4207936052eb480b280004619ea67e9b6d64c5dcc8b7adc0d67687\",\"dweb:/ipfs/QmeJiGKLGYeS1Yyr8KqySNow3ykHfvwJc9wx5J44s33J1A\"]},\"lib/solady-main/src/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x47c87df518aa91c1e645c2e695721fb9f18f071060c6af4e8c9a26171523ec7a\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0f446df9bb6b3e74373d13c21e5925d2d90f482964c2f1ecc004957686a3272b\",\"dweb:/ipfs/Qmb9tiTqLPFPAXeJHMMdFYaH1L5Mzuf7Rf7FFdQ1YQ338o\"]},\"lib/solady-main/src/utils/SafeTransferLib.sol\":{\"keccak256\":\"0xf972ba1ca050015699337f0d83e004ee09634d40a0d2f176bf45e09b3171cca2\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://d1e0e5790b9d376636a66cb8f3119d72e86cbb04e20131bcfdb9967d2a1f9295\",\"dweb:/ipfs/QmfZfoGsfBoTfwCXX6NwFUoXc2EiPf1HiNKGKH783L55oS\"]},\"src/_Recommend.sol\":{\"keccak256\":\"0xba3c4871d1829b6f217d774953791c0b6bd130a49feb6adec6521841452a8898\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://7a822dd08963c608059871f2c56ce99576c7d3c1cc2a7734df47b48c51661a30\",\"dweb:/ipfs/QmTGCaay3BEZ7NChv4PZS5LLm8bSbmE2insKw559wMhhmL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "src/_Recommend.sol:_Recommend",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 939,
								"contract": "src/_Recommend.sol:_Recommend",
								"label": "locked",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 1071,
								"contract": "src/_Recommend.sol:_Recommend",
								"label": "obtainedAmount",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1075,
								"contract": "src/_Recommend.sol:_Recommend",
								"label": "alreadyClaimed",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1079,
								"contract": "src/_Recommend.sol:_Recommend",
								"label": "isAdmin",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 1082,
								"contract": "src/_Recommend.sol:_Recommend",
								"label": "recommendAmount",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 1085,
								"contract": "src/_Recommend.sol:_Recommend",
								"label": "versions",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							933
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 934,
							"src": "127:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 933,
										"src": "135:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"691:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 933,
										"src": "691:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "691:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "174:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								933
							],
							"name": "Ownable",
							"nameLocation": "680:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "721:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "705:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "705:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "734:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "830:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "865:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "857:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "857:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "856:17:0"
									},
									"src": "824:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "880:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "973:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1001:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "993:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "993:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "992:15:0"
									},
									"src": "967:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1020:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1057:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1041:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1041:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1088:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1072:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1072:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1040:57:0"
									},
									"src": "1014:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1258:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1272:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1296:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1288:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1288:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1288:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1272:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1268:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1300:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1349:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1341:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1341:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1341:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1321:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1321:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1314:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1391:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1372:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1372:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1372:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1104:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1244:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1236:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1236:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1235:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1258:0:0"
									},
									"scope": 147,
									"src": "1224:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1520:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1530:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1530:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1530:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1553:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1417:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1508:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1517:2:0"
									},
									"src": "1499:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1692:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1709:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1702:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1567:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1646:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1651:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1683:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1683:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1682:9:0"
									},
									"scope": 147,
									"src": "1637:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1840:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1854:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1854:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 915,
															"src": "1865:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1865:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1854:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1850:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1879:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 915,
																			"src": "1927:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1927:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1900:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1900:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1893:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1728:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1804:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1815:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1840:0:0"
									},
									"scope": 147,
									"src": "1795:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2346:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2383:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2375:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2375:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2375:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2356:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2356:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2356:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1963:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2336:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2336:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2336:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2301:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2318:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2346:0:0"
									},
									"scope": 147,
									"src": "2292:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2612:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2626:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2646:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2638:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2638:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2638:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2626:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2622:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2650:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2699:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2691:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2691:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2691:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2671:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2671:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2664:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2741:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2722:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2722:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2722:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2399:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2602:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2602:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2602:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2551:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2577:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2569:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2569:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2568:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2612:0:0"
									},
									"scope": 147,
									"src": "2542:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2974:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2992:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2984:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2984:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3003:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2984:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3019:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3028:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3019:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3019:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3072:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3082:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3051:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3051:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3046:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2763:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2920:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2947:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2939:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2939:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2938:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2974:0:0"
									},
									"scope": 147,
									"src": "2911:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "662:2438:0",
							"usedErrors": [
								13,
								18
							]
						}
					],
					"src": "102:2999:0"
				},
				"id": 0
			},
			"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							284
						],
						"IERC20Errors": [
							189
						],
						"IERC721Errors": [
							237
						]
					},
					"id": 285,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 150,
								"nodeType": "StructuredDocumentation",
								"src": "137:141:1",
								"text": " @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."
							},
							"fullyImplemented": true,
							"id": 189,
							"linearizedBaseContracts": [
								189
							],
							"name": "IERC20Errors",
							"nameLocation": "289:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "308:309:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 159,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "628:24:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "661:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "653:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "677:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "669:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "669:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "694:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "686:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "686:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "652:49:1"
									},
									"src": "622:80:1"
								},
								{
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "708:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 164,
									"name": "ERC20InvalidSender",
									"nameLocation": "871:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "898:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "890:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "890:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "889:16:1"
									},
									"src": "865:41:1"
								},
								{
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "912:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 169,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1082:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1111:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 169,
												"src": "1103:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1103:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1102:18:1"
									},
									"src": "1076:45:1"
								},
								{
									"documentation": {
										"id": 170,
										"nodeType": "StructuredDocumentation",
										"src": "1127:345:1",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 178,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1483:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1518:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1510:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1510:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1535:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1527:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1527:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1554:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1546:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1546:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1509:52:1"
									},
									"src": "1477:85:1"
								},
								{
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "1568:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 183,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1753:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1782:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "1774:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1774:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1773:18:1"
									},
									"src": "1747:45:1"
								},
								{
									"documentation": {
										"id": 184,
										"nodeType": "StructuredDocumentation",
										"src": "1798:195:1",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 188,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2004:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2032:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "2024:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2024:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2023:17:1"
									},
									"src": "1998:43:1"
								}
							],
							"scope": 285,
							"src": "279:1764:1",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188
							]
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 190,
								"nodeType": "StructuredDocumentation",
								"src": "2045:143:1",
								"text": " @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."
							},
							"fullyImplemented": true,
							"id": 237,
							"linearizedBaseContracts": [
								237
							],
							"name": "IERC721Errors",
							"nameLocation": "2199:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "2219:219:1",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 195,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2449:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2476:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "2468:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2468:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2467:15:1"
									},
									"src": "2443:40:1"
								},
								{
									"documentation": {
										"id": 196,
										"nodeType": "StructuredDocumentation",
										"src": "2489:132:1",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 200,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2632:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2663:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2655:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2655:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2654:17:1"
									},
									"src": "2626:46:1"
								},
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "2678:289:1",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 209,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2978:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3007:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "2999:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2999:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3023:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "3015:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3015:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3040:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "3032:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3032:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2998:48:1"
									},
									"src": "2972:75:1"
								},
								{
									"documentation": {
										"id": 210,
										"nodeType": "StructuredDocumentation",
										"src": "3053:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 214,
									"name": "ERC721InvalidSender",
									"nameLocation": "3216:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3244:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 214,
												"src": "3236:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 211,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3236:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3235:16:1"
									},
									"src": "3210:42:1"
								},
								{
									"documentation": {
										"id": 215,
										"nodeType": "StructuredDocumentation",
										"src": "3258:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 219,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3428:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3458:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "3450:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 216,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3450:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3449:18:1"
									},
									"src": "3422:46:1"
								},
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "3474:247:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 226,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3732:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3767:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "3759:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3759:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3785:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "3777:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3777:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3758:35:1"
									},
									"src": "3726:68:1"
								},
								{
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "3800:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 231,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3985:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4015:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "4007:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4007:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4006:18:1"
									},
									"src": "3979:46:1"
								},
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "4031:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 236,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4239:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4269:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "4261:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4261:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4260:18:1"
									},
									"src": "4233:46:1"
								}
							],
							"scope": 285,
							"src": "2189:2092:1",
							"usedErrors": [
								195,
								200,
								209,
								214,
								219,
								226,
								231,
								236
							]
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 238,
								"nodeType": "StructuredDocumentation",
								"src": "4283:145:1",
								"text": " @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."
							},
							"fullyImplemented": true,
							"id": 284,
							"linearizedBaseContracts": [
								284
							],
							"name": "IERC1155Errors",
							"nameLocation": "4439:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "4460:361:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 249,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4832:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4867:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4859:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4859:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4883:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4875:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4875:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4900:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4892:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4892:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4916:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "4908:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4908:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4858:66:1"
									},
									"src": "4826:99:1"
								},
								{
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "4931:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 254,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5094:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5123:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "5115:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5115:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5114:16:1"
									},
									"src": "5088:43:1"
								},
								{
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "5137:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 259,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5307:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5338:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 259,
												"src": "5330:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5330:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5329:18:1"
									},
									"src": "5301:47:1"
								},
								{
									"documentation": {
										"id": 260,
										"nodeType": "StructuredDocumentation",
										"src": "5354:256:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 266,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5621:28:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5658:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 266,
												"src": "5650:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 261,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5650:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5676:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 266,
												"src": "5668:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5668:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5649:33:1"
									},
									"src": "5615:68:1"
								},
								{
									"documentation": {
										"id": 267,
										"nodeType": "StructuredDocumentation",
										"src": "5689:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 271,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5874:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5905:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "5897:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 268,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5897:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5896:18:1"
									},
									"src": "5868:47:1"
								},
								{
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "5921:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 276,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6129:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6160:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "6152:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6152:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6151:18:1"
									},
									"src": "6123:47:1"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "6176:280:1",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 283,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6467:25:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6501:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "6493:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 278,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6493:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6520:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 283,
												"src": "6512:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 280,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6512:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6492:41:1"
									},
									"src": "6461:73:1"
								}
							],
							"scope": 285,
							"src": "4429:2107:1",
							"usedErrors": [
								249,
								254,
								259,
								266,
								271,
								276,
								283
							]
						}
					],
					"src": "112:6425:1"
				},
				"id": 1
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							933
						],
						"ERC20": [
							799
						],
						"IERC20": [
							877
						],
						"IERC20Errors": [
							189
						],
						"IERC20Metadata": [
							903
						]
					},
					"id": 800,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 286,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:2"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 288,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 878,
							"src": "130:36:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 287,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 877,
										"src": "138:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 290,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 904,
							"src": "167:63:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 289,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 903,
										"src": "175:14:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 292,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 934,
							"src": "231:48:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 291,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 933,
										"src": "239:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 294,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 800,
							"sourceUnit": 285,
							"src": "280:65:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 293,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 189,
										"src": "288:12:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 296,
										"name": "Context",
										"nameLocations": [
											"1132:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 933,
										"src": "1132:7:2"
									},
									"id": 297,
									"nodeType": "InheritanceSpecifier",
									"src": "1132:7:2"
								},
								{
									"baseName": {
										"id": 298,
										"name": "IERC20",
										"nameLocations": [
											"1141:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 877,
										"src": "1141:6:2"
									},
									"id": 299,
									"nodeType": "InheritanceSpecifier",
									"src": "1141:6:2"
								},
								{
									"baseName": {
										"id": 300,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1149:14:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 903,
										"src": "1149:14:2"
									},
									"id": 301,
									"nodeType": "InheritanceSpecifier",
									"src": "1149:14:2"
								},
								{
									"baseName": {
										"id": 302,
										"name": "IERC20Errors",
										"nameLocations": [
											"1165:12:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 189,
										"src": "1165:12:2"
									},
									"id": 303,
									"nodeType": "InheritanceSpecifier",
									"src": "1165:12:2"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 295,
								"nodeType": "StructuredDocumentation",
								"src": "347:757:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."
							},
							"fullyImplemented": true,
							"id": 799,
							"linearizedBaseContracts": [
								799,
								189,
								903,
								877,
								933
							],
							"name": "ERC20",
							"nameLocation": "1123:5:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 307,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1228:9:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1184:53:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 306,
										"keyName": "account",
										"keyNameLocation": "1200:7:2",
										"keyType": {
											"id": 304,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1192:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1184:35:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 305,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1211:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"functionSelector": "024c2ddd",
									"id": 313,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1314:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1243:82:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 312,
										"keyName": "account",
										"keyNameLocation": "1259:7:2",
										"keyType": {
											"id": 308,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1251:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1243:63:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 311,
											"keyName": "spender",
											"keyNameLocation": "1286:7:2",
											"keyType": {
												"id": 309,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1278:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1270:35:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 310,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1297:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 315,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1349:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1333:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 314,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1333:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 317,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1383:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1368:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 316,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1368:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 319,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1409:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 799,
									"src": "1394:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 318,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1394:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 335,
										"nodeType": "Block",
										"src": "1655:57:2",
										"statements": [
											{
												"expression": {
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 327,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "1665:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 328,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 322,
														"src": "1673:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1665:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "1665:13:2"
											},
											{
												"expression": {
													"id": 333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 331,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 319,
														"src": "1688:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 332,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 324,
														"src": "1698:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1688:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 334,
												"nodeType": "ExpressionStatement",
												"src": "1688:17:2"
											}
										]
									},
									"documentation": {
										"id": 320,
										"nodeType": "StructuredDocumentation",
										"src": "1423:171:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 336,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1625:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "1611:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 321,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1611:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1646:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 336,
												"src": "1632:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 323,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1632:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1610:44:2"
									},
									"returnParameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1655:0:2"
									},
									"scope": 799,
									"src": "1599:113:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										890
									],
									"body": {
										"id": 344,
										"nodeType": "Block",
										"src": "1837:29:2",
										"statements": [
											{
												"expression": {
													"id": 342,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 317,
													"src": "1854:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 341,
												"id": 343,
												"nodeType": "Return",
												"src": "1847:12:2"
											}
										]
									},
									"documentation": {
										"id": 337,
										"nodeType": "StructuredDocumentation",
										"src": "1718:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 345,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1786:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1790:2:2"
									},
									"returnParameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 345,
												"src": "1822:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 339,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1822:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1821:15:2"
									},
									"scope": 799,
									"src": "1777:89:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										896
									],
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "2041:31:2",
										"statements": [
											{
												"expression": {
													"id": 351,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 319,
													"src": "2058:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 350,
												"id": 352,
												"nodeType": "Return",
												"src": "2051:14:2"
											}
										]
									},
									"documentation": {
										"id": 346,
										"nodeType": "StructuredDocumentation",
										"src": "1872:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1988:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1994:2:2"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "2026:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 348,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2026:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2025:15:2"
									},
									"scope": 799,
									"src": "1979:93:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										902
									],
									"body": {
										"id": 362,
										"nodeType": "Block",
										"src": "2761:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 360,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2778:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 359,
												"id": 361,
												"nodeType": "Return",
												"src": "2771:9:2"
											}
										]
									},
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "2078:622:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 363,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "2714:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2722:2:2"
									},
									"returnParameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "2754:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 357,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2754:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2753:7:2"
									},
									"scope": 799,
									"src": "2705:82:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										826
									],
									"body": {
										"id": 371,
										"nodeType": "Block",
										"src": "2908:36:2",
										"statements": [
											{
												"expression": {
													"id": 369,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 315,
													"src": "2925:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 368,
												"id": 370,
												"nodeType": "Return",
												"src": "2918:19:2"
											}
										]
									},
									"documentation": {
										"id": 364,
										"nodeType": "StructuredDocumentation",
										"src": "2793:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2856:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2867:2:2"
									},
									"returnParameters": {
										"id": 368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 367,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "2899:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 366,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2899:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2898:9:2"
									},
									"scope": 799,
									"src": "2847:97:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										834
									],
									"body": {
										"id": 384,
										"nodeType": "Block",
										"src": "3076:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 380,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 307,
														"src": "3093:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 382,
													"indexExpression": {
														"id": 381,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 375,
														"src": "3103:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3093:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 379,
												"id": 383,
												"nodeType": "Return",
												"src": "3086:25:2"
											}
										]
									},
									"documentation": {
										"id": 373,
										"nodeType": "StructuredDocumentation",
										"src": "2950:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3011:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3029:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3021:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 374,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3021:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3020:17:2"
									},
									"returnParameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "3067:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3067:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3066:9:2"
									},
									"scope": 799,
									"src": "3002:116:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										844
									],
									"body": {
										"id": 408,
										"nodeType": "Block",
										"src": "3388:103:2",
										"statements": [
											{
												"assignments": [
													396
												],
												"declarations": [
													{
														"constant": false,
														"id": 396,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3406:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 408,
														"src": "3398:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 395,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3398:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 399,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 397,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 915,
														"src": "3414:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3414:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3398:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 401,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 396,
															"src": "3446:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 402,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "3453:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 403,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 390,
															"src": "3457:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 400,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 529,
														"src": "3436:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3436:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 405,
												"nodeType": "ExpressionStatement",
												"src": "3436:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 406,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3480:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 394,
												"id": 407,
												"nodeType": "Return",
												"src": "3473:11:2"
											}
										]
									},
									"documentation": {
										"id": 386,
										"nodeType": "StructuredDocumentation",
										"src": "3124:184:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 409,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3322:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3339:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3331:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 387,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3331:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3351:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3343:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 389,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3343:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3330:27:2"
									},
									"returnParameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 393,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "3382:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 392,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3382:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3381:6:2"
									},
									"scope": 799,
									"src": "3313:178:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										854
									],
									"body": {
										"id": 425,
										"nodeType": "Block",
										"src": "3638:51:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 419,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 313,
															"src": "3655:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 421,
														"indexExpression": {
															"id": 420,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 412,
															"src": "3667:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3655:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 423,
													"indexExpression": {
														"id": 422,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 414,
														"src": "3674:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3655:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 418,
												"id": 424,
												"nodeType": "Return",
												"src": "3648:34:2"
											}
										]
									},
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "3497:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3558:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3576:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "3568:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3568:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3591:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "3583:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3583:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3567:32:2"
									},
									"returnParameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "3629:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3629:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3628:9:2"
									},
									"scope": 799,
									"src": "3549:140:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										864
									],
									"body": {
										"id": 449,
										"nodeType": "Block",
										"src": "4075:107:2",
										"statements": [
											{
												"assignments": [
													437
												],
												"declarations": [
													{
														"constant": false,
														"id": 437,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4093:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 449,
														"src": "4085:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 436,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4085:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 440,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 438,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 915,
														"src": "4101:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4101:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4085:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 442,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "4132:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 443,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "4139:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 444,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 431,
															"src": "4148:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 441,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															690,
															750
														],
														"referencedDeclaration": 690,
														"src": "4123:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4123:31:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 446,
												"nodeType": "ExpressionStatement",
												"src": "4123:31:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 447,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4171:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 435,
												"id": 448,
												"nodeType": "Return",
												"src": "4164:11:2"
											}
										]
									},
									"documentation": {
										"id": 427,
										"nodeType": "StructuredDocumentation",
										"src": "3695:296:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 450,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4005:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4021:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4013:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 428,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4013:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4038:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4030:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4030:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4012:32:2"
									},
									"returnParameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "4069:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 433,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4069:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4068:6:2"
									},
									"scope": 799,
									"src": "3996:186:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										876
									],
									"body": {
										"id": 481,
										"nodeType": "Block",
										"src": "4867:151:2",
										"statements": [
											{
												"assignments": [
													463
												],
												"declarations": [
													{
														"constant": false,
														"id": 463,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "4885:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 481,
														"src": "4877:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 462,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4877:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 466,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 464,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 915,
														"src": "4895:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4895:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4877:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 468,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 453,
															"src": "4933:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 469,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "4939:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 470,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 457,
															"src": "4948:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 467,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 798,
														"src": "4917:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4917:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 472,
												"nodeType": "ExpressionStatement",
												"src": "4917:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 474,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 453,
															"src": "4974:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 475,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 455,
															"src": "4980:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 476,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 457,
															"src": "4984:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 473,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 529,
														"src": "4964:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 477,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4964:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 478,
												"nodeType": "ExpressionStatement",
												"src": "4964:26:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 479,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5007:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 461,
												"id": 480,
												"nodeType": "Return",
												"src": "5000:11:2"
											}
										]
									},
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "4188:581:2",
										"text": " @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 482,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4783:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4804:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "4796:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4796:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 455,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4818:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "4810:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 454,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4810:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 457,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4830:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "4822:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4822:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4795:41:2"
									},
									"returnParameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 482,
												"src": "4861:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 459,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4861:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4860:6:2"
									},
									"scope": 799,
									"src": "4774:244:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 528,
										"nodeType": "Block",
										"src": "5460:231:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 492,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 485,
														"src": "5474:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 495,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5490:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5482:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 493,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5482:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 496,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5482:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5474:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 506,
												"nodeType": "IfStatement",
												"src": "5470:86:2",
												"trueBody": {
													"id": 505,
													"nodeType": "Block",
													"src": "5494:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 501,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5542:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 500,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5534:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 499,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5534:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5534:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 498,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 164,
																	"src": "5515:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 503,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5515:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 504,
															"nodeType": "RevertStatement",
															"src": "5508:37:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 512,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 507,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 487,
														"src": "5569:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 510,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5583:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 509,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5575:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 508,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5575:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 511,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5575:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5569:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 521,
												"nodeType": "IfStatement",
												"src": "5565:86:2",
												"trueBody": {
													"id": 520,
													"nodeType": "Block",
													"src": "5587:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 516,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5637:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 515,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5629:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 514,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5629:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 517,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5629:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 513,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 169,
																	"src": "5608:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 518,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5608:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 519,
															"nodeType": "RevertStatement",
															"src": "5601:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 523,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 485,
															"src": "5668:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 524,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 487,
															"src": "5674:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 525,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 489,
															"src": "5678:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 522,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "5660:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5660:24:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 527,
												"nodeType": "ExpressionStatement",
												"src": "5660:24:2"
											}
										]
									},
									"documentation": {
										"id": 483,
										"nodeType": "StructuredDocumentation",
										"src": "5024:362:2",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 529,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5400:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5418:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "5410:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 484,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5410:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5432:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "5424:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5424:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5444:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "5436:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5436:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5409:41:2"
									},
									"returnParameters": {
										"id": 491,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5460:0:2"
									},
									"scope": 799,
									"src": "5391:300:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 605,
										"nodeType": "Block",
										"src": "6081:1032:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 539,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 532,
														"src": "6095:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 542,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6111:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 541,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6103:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 540,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6103:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 543,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6103:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6095:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 576,
													"nodeType": "Block",
													"src": "6269:362:2",
													"statements": [
														{
															"assignments": [
																551
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 551,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6291:11:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 576,
																	"src": "6283:19:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 550,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6283:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 555,
															"initialValue": {
																"baseExpression": {
																	"id": 552,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 307,
																	"src": "6305:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 554,
																"indexExpression": {
																	"id": 553,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 532,
																	"src": "6315:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6305:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6283:37:2"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 558,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 556,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 551,
																	"src": "6338:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 557,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "6352:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6338:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 566,
															"nodeType": "IfStatement",
															"src": "6334:115:2",
															"trueBody": {
																"id": 565,
																"nodeType": "Block",
																"src": "6359:90:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 560,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 532,
																					"src": "6409:4:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 561,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 551,
																					"src": "6415:11:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 562,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 536,
																					"src": "6428:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 559,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "6384:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 563,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6384:50:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 564,
																		"nodeType": "RevertStatement",
																		"src": "6377:57:2"
																	}
																]
															}
														},
														{
															"id": 575,
															"nodeType": "UncheckedBlock",
															"src": "6462:159:2",
															"statements": [
																{
																	"expression": {
																		"id": 573,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 567,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 307,
																				"src": "6569:9:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 569,
																			"indexExpression": {
																				"id": 568,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 532,
																				"src": "6579:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6569:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 572,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 570,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 551,
																				"src": "6587:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 571,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 536,
																				"src": "6601:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6587:19:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6569:37:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 574,
																	"nodeType": "ExpressionStatement",
																	"src": "6569:37:2"
																}
															]
														}
													]
												},
												"id": 577,
												"nodeType": "IfStatement",
												"src": "6091:540:2",
												"trueBody": {
													"id": 549,
													"nodeType": "Block",
													"src": "6115:148:2",
													"statements": [
														{
															"expression": {
																"id": 547,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 545,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 315,
																	"src": "6231:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 546,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "6247:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6231:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 548,
															"nodeType": "ExpressionStatement",
															"src": "6231:21:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 578,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "6645:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 581,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6659:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 580,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6651:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 579,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6651:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 582,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6651:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6645:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 597,
													"nodeType": "Block",
													"src": "6860:206:2",
													"statements": [
														{
															"id": 596,
															"nodeType": "UncheckedBlock",
															"src": "6874:182:2",
															"statements": [
																{
																	"expression": {
																		"id": 594,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 590,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 307,
																				"src": "7019:9:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 592,
																			"indexExpression": {
																				"id": 591,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 534,
																				"src": "7029:2:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7019:13:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 593,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 536,
																			"src": "7036:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7019:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 595,
																	"nodeType": "ExpressionStatement",
																	"src": "7019:22:2"
																}
															]
														}
													]
												},
												"id": 598,
												"nodeType": "IfStatement",
												"src": "6641:425:2",
												"trueBody": {
													"id": 589,
													"nodeType": "Block",
													"src": "6663:191:2",
													"statements": [
														{
															"id": 588,
															"nodeType": "UncheckedBlock",
															"src": "6677:167:2",
															"statements": [
																{
																	"expression": {
																		"id": 586,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 584,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 315,
																			"src": "6808:12:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 585,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 536,
																			"src": "6824:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6808:21:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 587,
																	"nodeType": "ExpressionStatement",
																	"src": "6808:21:2"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 600,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "7090:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 601,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "7096:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 602,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 536,
															"src": "7100:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 599,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 811,
														"src": "7081:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7081:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 604,
												"nodeType": "EmitStatement",
												"src": "7076:30:2"
											}
										]
									},
									"documentation": {
										"id": 530,
										"nodeType": "StructuredDocumentation",
										"src": "5697:304:2",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 606,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6015:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6031:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "6023:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 531,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6023:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6045:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "6037:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6037:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6057:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 606,
												"src": "6049:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6049:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6022:41:2"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6081:0:2"
									},
									"scope": 799,
									"src": "6006:1107:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 638,
										"nodeType": "Block",
										"src": "7512:152:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 614,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 609,
														"src": "7526:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 617,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7545:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 616,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7537:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 615,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7537:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 618,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7537:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7526:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 628,
												"nodeType": "IfStatement",
												"src": "7522:91:2",
												"trueBody": {
													"id": 627,
													"nodeType": "Block",
													"src": "7549:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 623,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7599:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 622,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7591:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 621,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7591:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 624,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7591:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 620,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 169,
																	"src": "7570:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 625,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7570:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 626,
															"nodeType": "RevertStatement",
															"src": "7563:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 632,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7638:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 631,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7630:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 630,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7630:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 633,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7630:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 634,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 609,
															"src": "7642:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 635,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 611,
															"src": "7651:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 629,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "7622:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 636,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7622:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 637,
												"nodeType": "ExpressionStatement",
												"src": "7622:35:2"
											}
										]
									},
									"documentation": {
										"id": 607,
										"nodeType": "StructuredDocumentation",
										"src": "7119:332:2",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 639,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7465:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7479:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "7471:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 608,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7471:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7496:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 639,
												"src": "7488:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7488:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7470:32:2"
									},
									"returnParameters": {
										"id": 613,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7512:0:2"
									},
									"scope": 799,
									"src": "7456:208:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 671,
										"nodeType": "Block",
										"src": "8038:150:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 647,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 642,
														"src": "8052:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 650,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8071:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 649,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8063:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 648,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8063:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 651,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8063:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8052:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 661,
												"nodeType": "IfStatement",
												"src": "8048:89:2",
												"trueBody": {
													"id": 660,
													"nodeType": "Block",
													"src": "8075:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 656,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8123:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 655,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8115:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 654,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8115:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 657,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8115:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 653,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 164,
																	"src": "8096:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 658,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8096:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 659,
															"nodeType": "RevertStatement",
															"src": "8089:37:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 663,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 642,
															"src": "8154:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 666,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8171:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 665,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8163:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 664,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8163:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8163:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 668,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 644,
															"src": "8175:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 662,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 606,
														"src": "8146:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8146:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 670,
												"nodeType": "ExpressionStatement",
												"src": "8146:35:2"
											}
										]
									},
									"documentation": {
										"id": 640,
										"nodeType": "StructuredDocumentation",
										"src": "7670:307:2",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 672,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "7991:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 642,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8005:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "7997:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 641,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7997:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 644,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8022:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "8014:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 643,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8014:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7996:32:2"
									},
									"returnParameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8038:0:2"
									},
									"scope": 799,
									"src": "7982:206:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 689,
										"nodeType": "Block",
										"src": "8798:54:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 683,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 675,
															"src": "8817:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 684,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "8824:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 685,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 679,
															"src": "8833:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 686,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8840:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 682,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															690,
															750
														],
														"referencedDeclaration": 750,
														"src": "8808:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8808:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 688,
												"nodeType": "ExpressionStatement",
												"src": "8808:37:2"
											}
										]
									},
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "8194:525:2",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 690,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8733:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8750:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "8742:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 674,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8742:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8765:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "8757:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8757:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8782:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 690,
												"src": "8774:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 678,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8774:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8741:47:2"
									},
									"returnParameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8798:0:2"
									},
									"scope": 799,
									"src": "8724:128:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 749,
										"nodeType": "Block",
										"src": "9797:334:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 702,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 693,
														"src": "9811:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 705,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9828:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 704,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9820:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 703,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9820:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 706,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9820:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9811:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 716,
												"nodeType": "IfStatement",
												"src": "9807:89:2",
												"trueBody": {
													"id": 715,
													"nodeType": "Block",
													"src": "9832:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 711,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9882:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 710,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9874:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 709,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9874:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 712,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9874:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 708,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 183,
																	"src": "9853:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 713,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9853:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 714,
															"nodeType": "RevertStatement",
															"src": "9846:39:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 717,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 695,
														"src": "9909:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 720,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9928:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 719,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9920:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 718,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9920:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 721,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9920:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9909:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 731,
												"nodeType": "IfStatement",
												"src": "9905:90:2",
												"trueBody": {
													"id": 730,
													"nodeType": "Block",
													"src": "9932:63:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 726,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9981:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 725,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9973:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 724,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9973:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 727,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9973:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 723,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 188,
																	"src": "9953:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9953:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 729,
															"nodeType": "RevertStatement",
															"src": "9946:38:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 732,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 313,
																"src": "10004:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 735,
															"indexExpression": {
																"id": 733,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 693,
																"src": "10016:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10004:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 736,
														"indexExpression": {
															"id": 734,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "10023:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10004:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 737,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 697,
														"src": "10034:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10004:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 739,
												"nodeType": "ExpressionStatement",
												"src": "10004:35:2"
											},
											{
												"condition": {
													"id": 740,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 699,
													"src": "10053:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 748,
												"nodeType": "IfStatement",
												"src": "10049:76:2",
												"trueBody": {
													"id": 747,
													"nodeType": "Block",
													"src": "10064:61:2",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 742,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 693,
																		"src": "10092:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 743,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 695,
																		"src": "10099:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 744,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 697,
																		"src": "10108:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 741,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 820,
																	"src": "10083:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 745,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10083:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 746,
															"nodeType": "EmitStatement",
															"src": "10078:36:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 691,
										"nodeType": "StructuredDocumentation",
										"src": "8858:836:2",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 750,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9708:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9725:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9717:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9717:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9740:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9732:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 694,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9732:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 697,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9757:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9749:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 696,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9749:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "9769:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 750,
												"src": "9764:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 698,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9764:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9716:63:2"
									},
									"returnParameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9797:0:2"
									},
									"scope": 799,
									"src": "9699:432:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 797,
										"nodeType": "Block",
										"src": "10502:388:2",
										"statements": [
											{
												"assignments": [
													761
												],
												"declarations": [
													{
														"constant": false,
														"id": 761,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10520:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 797,
														"src": "10512:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 760,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10512:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 766,
												"initialValue": {
													"arguments": [
														{
															"id": 763,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 753,
															"src": "10549:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 764,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 755,
															"src": "10556:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 762,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 426,
														"src": "10539:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10539:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10512:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 767,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 761,
														"src": "10578:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 770,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10603:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 769,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10603:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 768,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10598:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 771,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10598:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 772,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10612:3:2",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10598:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10578:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 796,
												"nodeType": "IfStatement",
												"src": "10574:310:2",
												"trueBody": {
													"id": 795,
													"nodeType": "Block",
													"src": "10617:267:2",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 776,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 774,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 761,
																	"src": "10635:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 775,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 757,
																	"src": "10654:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10635:24:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 784,
															"nodeType": "IfStatement",
															"src": "10631:130:2",
															"trueBody": {
																"id": 783,
																"nodeType": "Block",
																"src": "10661:100:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 778,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 755,
																					"src": "10713:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 779,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 761,
																					"src": "10722:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 780,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 757,
																					"src": "10740:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 777,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 178,
																				"src": "10686:26:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 781,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10686:60:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 782,
																		"nodeType": "RevertStatement",
																		"src": "10679:67:2"
																	}
																]
															}
														},
														{
															"id": 794,
															"nodeType": "UncheckedBlock",
															"src": "10774:100:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 786,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 753,
																				"src": "10811:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 787,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 755,
																				"src": "10818:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 790,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 788,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 761,
																					"src": "10827:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 789,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 757,
																					"src": "10846:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10827:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 791,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10853:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 785,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				690,
																				750
																			],
																			"referencedDeclaration": 750,
																			"src": "10802:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 792,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10802:57:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 793,
																	"nodeType": "ExpressionStatement",
																	"src": "10802:57:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 751,
										"nodeType": "StructuredDocumentation",
										"src": "10137:271:2",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 798,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10422:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 753,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10446:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "10438:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 752,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10438:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 755,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10461:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "10453:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 754,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10453:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10478:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "10470:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 756,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10470:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10437:47:2"
									},
									"returnParameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10502:0:2"
									},
									"scope": 799,
									"src": "10413:477:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 800,
							"src": "1105:9787:2",
							"usedErrors": [
								159,
								164,
								169,
								178,
								183,
								188
							]
						}
					],
					"src": "105:10788:2"
				},
				"id": 2
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							877
						]
					},
					"id": 878,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 801,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 802,
								"nodeType": "StructuredDocumentation",
								"src": "131:71:3",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 877,
							"linearizedBaseContracts": [
								877
							],
							"name": "IERC20",
							"nameLocation": "213:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 803,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 811,
									"name": "Transfer",
									"nameLocation": "395:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 810,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 805,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "404:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 804,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 807,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "426:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 806,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 809,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "446:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 808,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:3"
									},
									"src": "389:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 812,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 820,
									"name": "Approval",
									"nameLocation": "626:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 814,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "635:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 813,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 816,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "658:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 815,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 818,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "683:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 817,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:3"
									},
									"src": "620:78:3"
								},
								{
									"documentation": {
										"id": 821,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:3",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 826,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 822,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:3"
									},
									"returnParameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "820:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 823,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:3"
									},
									"scope": 877,
									"src": "774:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:3",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 834,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "930:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 828,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:3"
									},
									"returnParameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 834,
												"src": "970:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 831,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:3"
									},
									"scope": 877,
									"src": "911:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 835,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:3",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 844,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 837,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1221:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 836,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1233:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 838,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:3"
									},
									"returnParameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "1266:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 841,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:3"
									},
									"scope": 877,
									"src": "1203:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 845,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 854,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1566:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 846,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1581:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:3"
									},
									"returnParameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 854,
												"src": "1621:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:3"
									},
									"scope": 877,
									"src": "1547:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 855,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:3",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 864,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2325:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 856,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2342:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 858,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:3"
									},
									"returnParameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 864,
												"src": "2375:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 861,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:3"
									},
									"scope": 877,
									"src": "2308:73:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 865,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 876,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2711:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 866,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2725:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 868,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2737:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:3"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 876,
												"src": "2770:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 873,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:3"
									},
									"scope": 877,
									"src": "2689:87:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 878,
							"src": "203:2575:3",
							"usedErrors": []
						}
					],
					"src": "106:2673:3"
				},
				"id": 3
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							877
						],
						"IERC20Metadata": [
							903
						]
					},
					"id": 904,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 879,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "125:23:4"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 881,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 904,
							"sourceUnit": 878,
							"src": "150:37:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 880,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 877,
										"src": "158:6:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 883,
										"name": "IERC20",
										"nameLocations": [
											"305:6:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 877,
										"src": "305:6:4"
									},
									"id": 884,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:4"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 882,
								"nodeType": "StructuredDocumentation",
								"src": "189:87:4",
								"text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
							},
							"fullyImplemented": false,
							"id": 903,
							"linearizedBaseContracts": [
								903,
								877
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 885,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:4",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 890,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:4"
									},
									"returnParameters": {
										"id": 889,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 888,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "416:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 887,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:4"
									},
									"scope": 903,
									"src": "377:54:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 891,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:4",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 896,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:4"
									},
									"returnParameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 896,
												"src": "539:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 893,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:4"
									},
									"scope": 903,
									"src": "498:56:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 897,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:4",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 902,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:4"
									},
									"returnParameters": {
										"id": 901,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 900,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "673:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 899,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:4"
									},
									"scope": 903,
									"src": "630:50:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 904,
							"src": "277:405:4",
							"usedErrors": []
						}
					],
					"src": "125:558:4"
				},
				"id": 4
			},
			"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							933
						]
					},
					"id": 934,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 905,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 906,
								"nodeType": "StructuredDocumentation",
								"src": "126:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 933,
							"linearizedBaseContracts": [
								933
							],
							"name": "Context",
							"nameLocation": "641:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 914,
										"nodeType": "Block",
										"src": "717:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 911,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "734:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "738:6:5",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "734:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 910,
												"id": 913,
												"nodeType": "Return",
												"src": "727:17:5"
											}
										]
									},
									"id": 915,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "664:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 907,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "674:2:5"
									},
									"returnParameters": {
										"id": 910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "708:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 908,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "708:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "707:9:5"
									},
									"scope": 933,
									"src": "655:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 923,
										"nodeType": "Block",
										"src": "824:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 920,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "841:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 921,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "845:4:5",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "841:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 919,
												"id": 922,
												"nodeType": "Return",
												"src": "834:15:5"
											}
										]
									},
									"id": 924,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "766:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 916,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "774:2:5"
									},
									"returnParameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "808:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 917,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "808:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "807:16:5"
									},
									"scope": 933,
									"src": "757:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 931,
										"nodeType": "Block",
										"src": "934:25:5",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 929,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "951:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 928,
												"id": 930,
												"nodeType": "Return",
												"src": "944:8:5"
											}
										]
									},
									"id": 932,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "871:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "891:2:5"
									},
									"returnParameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 932,
												"src": "925:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "925:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "924:9:5"
									},
									"scope": 933,
									"src": "862:97:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 934,
							"src": "623:338:5",
							"usedErrors": []
						}
					],
					"src": "101:861:5"
				},
				"id": 5
			},
			"lib/solady-main/src/utils/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "lib/solady-main/src/utils/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							959
						]
					},
					"id": 960,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 935,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "42:24:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 936,
								"nodeType": "StructuredDocumentation",
								"src": "68:321:6",
								"text": "@notice Gas optimized reentrancy protection for smart contracts.\n @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\n @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)"
							},
							"fullyImplemented": true,
							"id": 959,
							"linearizedBaseContracts": [
								959
							],
							"name": "ReentrancyGuard",
							"nameLocation": "407:15:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 939,
									"mutability": "mutable",
									"name": "locked",
									"nameLocation": "445:6:6",
									"nodeType": "VariableDeclaration",
									"scope": 959,
									"src": "429:26:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 937,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "429:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 938,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "454:1:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 957,
										"nodeType": "Block",
										"src": "494:105:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 944,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 942,
																"name": "locked",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 939,
																"src": "512:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 943,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "522:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "512:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5245454e5452414e4359",
															"id": 945,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "525:12:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59",
																"typeString": "literal_string \"REENTRANCY\""
															},
															"value": "REENTRANCY"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_180a23d5434c537ca84b1e47f534d18e25bd055e02a65ce20bae4afd9c835f59",
																"typeString": "literal_string \"REENTRANCY\""
															}
														],
														"id": 941,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "504:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 946,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "504:34:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 947,
												"nodeType": "ExpressionStatement",
												"src": "504:34:6"
											},
											{
												"expression": {
													"id": 950,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 948,
														"name": "locked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "549:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "32",
														"id": 949,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "558:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "549:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 951,
												"nodeType": "ExpressionStatement",
												"src": "549:10:6"
											},
											{
												"id": 952,
												"nodeType": "PlaceholderStatement",
												"src": "570:1:6"
											},
											{
												"expression": {
													"id": 955,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 953,
														"name": "locked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 939,
														"src": "582:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 954,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "591:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "582:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 956,
												"nodeType": "ExpressionStatement",
												"src": "582:10:6"
											}
										]
									},
									"id": 958,
									"name": "nonReentrant",
									"nameLocation": "471:12:6",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "483:2:6"
									},
									"src": "462:137:6",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 960,
							"src": "389:212:6",
							"usedErrors": []
						}
					],
					"src": "42:559:6"
				},
				"id": 6
			},
			"lib/solady-main/src/utils/SafeTransferLib.sol": {
				"ast": {
					"absolutePath": "lib/solady-main/src/utils/SafeTransferLib.sol",
					"exportedSymbols": {
						"ERC20": [
							799
						],
						"SafeTransferLib": [
							1044
						]
					},
					"id": 1045,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 961,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "42:24:7"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
							"file": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
							"id": 963,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1045,
							"sourceUnit": 800,
							"src": "68:83:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 962,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 799,
										"src": "77:5:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeTransferLib",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 964,
								"nodeType": "StructuredDocumentation",
								"src": "153:474:7",
								"text": "@notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller."
							},
							"fullyImplemented": true,
							"id": 1044,
							"linearizedBaseContracts": [
								1044
							],
							"name": "SafeTransferLib",
							"nameLocation": "635:15:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 980,
										"nodeType": "Block",
										"src": "902:277:7",
										"statements": [
											{
												"assignments": [
													972
												],
												"declarations": [
													{
														"constant": false,
														"id": 972,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "917:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 980,
														"src": "912:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 971,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "912:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 973,
												"nodeType": "VariableDeclarationStatement",
												"src": "912:12:7"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "987:136:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1067:46:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nodeType": "YulIdentifier",
																			"src": "1083:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1083:5:7"
																	},
																	{
																		"name": "to",
																		"nodeType": "YulIdentifier",
																		"src": "1090:2:7"
																	},
																	{
																		"name": "amount",
																		"nodeType": "YulIdentifier",
																		"src": "1094:6:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1102:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1105:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1108:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1111:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nodeType": "YulIdentifier",
																	"src": "1078:4:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1078:35:7"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nodeType": "YulIdentifier",
																	"src": "1067:7:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 968,
														"isOffset": false,
														"isSlot": false,
														"src": "1094:6:7",
														"valueSize": 1
													},
													{
														"declaration": 972,
														"isOffset": false,
														"isSlot": false,
														"src": "1067:7:7",
														"valueSize": 1
													},
													{
														"declaration": 966,
														"isOffset": false,
														"isSlot": false,
														"src": "1090:2:7",
														"valueSize": 1
													}
												],
												"id": 974,
												"nodeType": "InlineAssembly",
												"src": "978:145:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 976,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 972,
															"src": "1141:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4554485f5452414e534645525f4641494c4544",
															"id": 977,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1150:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29",
																"typeString": "literal_string \"ETH_TRANSFER_FAILED\""
															},
															"value": "ETH_TRANSFER_FAILED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d383913ea1996930a2623a0d739b8fc033c734c1d71d4759d3ccba1d3a719c29",
																"typeString": "literal_string \"ETH_TRANSFER_FAILED\""
															}
														],
														"id": 975,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1133:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 978,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1133:39:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 979,
												"nodeType": "ExpressionStatement",
												"src": "1133:39:7"
											}
										]
									},
									"id": 981,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferETH",
									"nameLocation": "849:15:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "873:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "865:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 965,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "865:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "885:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "877:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 967,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "877:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "864:28:7"
									},
									"returnParameters": {
										"id": 970,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "902:0:7"
									},
									"scope": 1044,
									"src": "840:339:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1002,
										"nodeType": "Block",
										"src": "1497:1654:7",
										"statements": [
											{
												"assignments": [
													994
												],
												"declarations": [
													{
														"constant": false,
														"id": 994,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1512:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1002,
														"src": "1507:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 993,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1507:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 995,
												"nodeType": "VariableDeclarationStatement",
												"src": "1507:12:7"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1582:1512:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1646:36:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1677:4:7",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1671:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1671:11:7"
															},
															"variables": [
																{
																	"name": "freeMemoryPointer",
																	"nodeType": "YulTypedName",
																	"src": "1650:17:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "freeMemoryPointer",
																		"nodeType": "YulIdentifier",
																		"src": "1800:17:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1819:66:7",
																		"type": "",
																		"value": "0x23b872dd00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1793:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1793:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1793:93:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "freeMemoryPointer",
																				"nodeType": "YulIdentifier",
																				"src": "1910:17:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1929:1:7",
																				"type": "",
																				"value": "4"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1906:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1906:25:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "from",
																				"nodeType": "YulIdentifier",
																				"src": "1937:4:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1943:42:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1933:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1933:53:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1899:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "1899:88:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1899:88:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "freeMemoryPointer",
																				"nodeType": "YulIdentifier",
																				"src": "2051:17:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2070:2:7",
																				"type": "",
																				"value": "36"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2047:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2047:26:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "to",
																				"nodeType": "YulIdentifier",
																				"src": "2079:2:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2083:42:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2075:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2075:51:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2040:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2040:87:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2040:87:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "freeMemoryPointer",
																				"nodeType": "YulIdentifier",
																				"src": "2189:17:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2208:2:7",
																				"type": "",
																				"value": "68"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2185:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2185:26:7"
																	},
																	{
																		"name": "amount",
																		"nodeType": "YulIdentifier",
																		"src": "2213:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2178:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2178:42:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2178:42:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2317:767:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2544:1:7",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "2538:5:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2538:8:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2548:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "eq",
																							"nodeType": "YulIdentifier",
																							"src": "2535:2:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2535:15:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "returndatasize",
																									"nodeType": "YulIdentifier",
																									"src": "2555:14:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2555:16:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2573:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "gt",
																							"nodeType": "YulIdentifier",
																							"src": "2552:2:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2552:24:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2531:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2531:46:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "returndatasize",
																							"nodeType": "YulIdentifier",
																							"src": "2586:14:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2586:16:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2579:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2579:24:7"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "2528:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2528:76:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "gas",
																					"nodeType": "YulIdentifier",
																					"src": "3023:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3023:5:7"
																			},
																			{
																				"name": "token",
																				"nodeType": "YulIdentifier",
																				"src": "3030:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3037:1:7",
																				"type": "",
																				"value": "0"
																			},
																			{
																				"name": "freeMemoryPointer",
																				"nodeType": "YulIdentifier",
																				"src": "3040:17:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3059:3:7",
																				"type": "",
																				"value": "100"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3064:1:7",
																				"type": "",
																				"value": "0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3067:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "call",
																			"nodeType": "YulIdentifier",
																			"src": "3018:4:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3018:52:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2328:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "2328:756:7"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nodeType": "YulIdentifier",
																	"src": "2317:7:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 990,
														"isOffset": false,
														"isSlot": false,
														"src": "2213:6:7",
														"valueSize": 1
													},
													{
														"declaration": 986,
														"isOffset": false,
														"isSlot": false,
														"src": "1937:4:7",
														"valueSize": 1
													},
													{
														"declaration": 994,
														"isOffset": false,
														"isSlot": false,
														"src": "2317:7:7",
														"valueSize": 1
													},
													{
														"declaration": 988,
														"isOffset": false,
														"isSlot": false,
														"src": "2079:2:7",
														"valueSize": 1
													},
													{
														"declaration": 984,
														"isOffset": false,
														"isSlot": false,
														"src": "3030:5:7",
														"valueSize": 1
													}
												],
												"id": 996,
												"nodeType": "InlineAssembly",
												"src": "1573:1521:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 998,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 994,
															"src": "3112:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5452414e534645525f46524f4d5f4641494c4544",
															"id": 999,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3121:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_77631768048ee92f9dcf4b9b9d762877d6b9723214862c733f0596708fc219b7",
																"typeString": "literal_string \"TRANSFER_FROM_FAILED\""
															},
															"value": "TRANSFER_FROM_FAILED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_77631768048ee92f9dcf4b9b9d762877d6b9723214862c733f0596708fc219b7",
																"typeString": "literal_string \"TRANSFER_FROM_FAILED\""
															}
														],
														"id": 997,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3104:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1000,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3104:40:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1001,
												"nodeType": "ExpressionStatement",
												"src": "3104:40:7"
											}
										]
									},
									"id": 1003,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1378:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 984,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1410:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "1404:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$799",
													"typeString": "contract ERC20"
												},
												"typeName": {
													"id": 983,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 982,
														"name": "ERC20",
														"nameLocations": [
															"1404:5:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 799,
														"src": "1404:5:7"
													},
													"referencedDeclaration": 799,
													"src": "1404:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$799",
														"typeString": "contract ERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1433:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "1425:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 985,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1425:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1455:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "1447:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 987,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1447:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1475:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "1467:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 989,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1467:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1394:93:7"
									},
									"returnParameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1497:0:7"
									},
									"scope": 1044,
									"src": "1369:1782:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1022,
										"nodeType": "Block",
										"src": "3259:1505:7",
										"statements": [
											{
												"assignments": [
													1014
												],
												"declarations": [
													{
														"constant": false,
														"id": 1014,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3274:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1022,
														"src": "3269:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1013,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3269:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1015,
												"nodeType": "VariableDeclarationStatement",
												"src": "3269:12:7"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3344:1368:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3408:36:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3439:4:7",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3433:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3433:11:7"
															},
															"variables": [
																{
																	"name": "freeMemoryPointer",
																	"nodeType": "YulTypedName",
																	"src": "3412:17:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "freeMemoryPointer",
																		"nodeType": "YulIdentifier",
																		"src": "3562:17:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3581:66:7",
																		"type": "",
																		"value": "0xa9059cbb00000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3555:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3555:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3555:93:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "freeMemoryPointer",
																				"nodeType": "YulIdentifier",
																				"src": "3672:17:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3691:1:7",
																				"type": "",
																				"value": "4"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3668:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3668:25:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "to",
																				"nodeType": "YulIdentifier",
																				"src": "3699:2:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3703:42:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3695:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3695:51:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3661:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3661:86:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3661:86:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "freeMemoryPointer",
																				"nodeType": "YulIdentifier",
																				"src": "3809:17:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3828:2:7",
																				"type": "",
																				"value": "36"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3805:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3805:26:7"
																	},
																	{
																		"name": "amount",
																		"nodeType": "YulIdentifier",
																		"src": "3833:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3798:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3798:42:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3798:42:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3937:765:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4164:1:7",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "4158:5:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4158:8:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4168:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "eq",
																							"nodeType": "YulIdentifier",
																							"src": "4155:2:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4155:15:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "returndatasize",
																									"nodeType": "YulIdentifier",
																									"src": "4175:14:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4175:16:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4193:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "gt",
																							"nodeType": "YulIdentifier",
																							"src": "4172:2:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4172:24:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "4151:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4151:46:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "returndatasize",
																							"nodeType": "YulIdentifier",
																							"src": "4206:14:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4206:16:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4199:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4199:24:7"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "4148:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4148:76:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "gas",
																					"nodeType": "YulIdentifier",
																					"src": "4642:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4642:5:7"
																			},
																			{
																				"name": "token",
																				"nodeType": "YulIdentifier",
																				"src": "4649:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4656:1:7",
																				"type": "",
																				"value": "0"
																			},
																			{
																				"name": "freeMemoryPointer",
																				"nodeType": "YulIdentifier",
																				"src": "4659:17:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4678:2:7",
																				"type": "",
																				"value": "68"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4682:1:7",
																				"type": "",
																				"value": "0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4685:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "call",
																			"nodeType": "YulIdentifier",
																			"src": "4637:4:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4637:51:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "3948:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "3948:754:7"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nodeType": "YulIdentifier",
																	"src": "3937:7:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1010,
														"isOffset": false,
														"isSlot": false,
														"src": "3833:6:7",
														"valueSize": 1
													},
													{
														"declaration": 1014,
														"isOffset": false,
														"isSlot": false,
														"src": "3937:7:7",
														"valueSize": 1
													},
													{
														"declaration": 1008,
														"isOffset": false,
														"isSlot": false,
														"src": "3699:2:7",
														"valueSize": 1
													},
													{
														"declaration": 1006,
														"isOffset": false,
														"isSlot": false,
														"src": "4649:5:7",
														"valueSize": 1
													}
												],
												"id": 1016,
												"nodeType": "InlineAssembly",
												"src": "3335:1377:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1018,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1014,
															"src": "4730:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5452414e534645525f4641494c4544",
															"id": 1019,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4739:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72",
																"typeString": "literal_string \"TRANSFER_FAILED\""
															},
															"value": "TRANSFER_FAILED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72",
																"typeString": "literal_string \"TRANSFER_FAILED\""
															}
														],
														"id": 1017,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4722:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1020,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4722:35:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1021,
												"nodeType": "ExpressionStatement",
												"src": "4722:35:7"
											}
										]
									},
									"id": 1023,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "3166:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3194:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "3188:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$799",
													"typeString": "contract ERC20"
												},
												"typeName": {
													"id": 1005,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1004,
														"name": "ERC20",
														"nameLocations": [
															"3188:5:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 799,
														"src": "3188:5:7"
													},
													"referencedDeclaration": 799,
													"src": "3188:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$799",
														"typeString": "contract ERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3217:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "3209:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3209:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1010,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3237:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "3229:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1009,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3229:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3178:71:7"
									},
									"returnParameters": {
										"id": 1012,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3259:0:7"
									},
									"scope": 1044,
									"src": "3157:1607:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1042,
										"nodeType": "Block",
										"src": "4871:1504:7",
										"statements": [
											{
												"assignments": [
													1034
												],
												"declarations": [
													{
														"constant": false,
														"id": 1034,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4886:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1042,
														"src": "4881:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1033,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4881:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1035,
												"nodeType": "VariableDeclarationStatement",
												"src": "4881:12:7"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "4956:1368:7",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5020:36:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5051:4:7",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5045:5:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5045:11:7"
															},
															"variables": [
																{
																	"name": "freeMemoryPointer",
																	"nodeType": "YulTypedName",
																	"src": "5024:17:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "freeMemoryPointer",
																		"nodeType": "YulIdentifier",
																		"src": "5174:17:7"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5193:66:7",
																		"type": "",
																		"value": "0x095ea7b300000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5167:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5167:93:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5167:93:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "freeMemoryPointer",
																				"nodeType": "YulIdentifier",
																				"src": "5284:17:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5303:1:7",
																				"type": "",
																				"value": "4"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5280:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5280:25:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "to",
																				"nodeType": "YulIdentifier",
																				"src": "5311:2:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5315:42:7",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5307:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5307:51:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5273:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5273:86:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5273:86:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "freeMemoryPointer",
																				"nodeType": "YulIdentifier",
																				"src": "5421:17:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5440:2:7",
																				"type": "",
																				"value": "36"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5417:3:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5417:26:7"
																	},
																	{
																		"name": "amount",
																		"nodeType": "YulIdentifier",
																		"src": "5445:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5410:6:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5410:42:7"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5410:42:7"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5549:765:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "5776:1:7",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "5770:5:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "5770:8:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5780:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "eq",
																							"nodeType": "YulIdentifier",
																							"src": "5767:2:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5767:15:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [],
																								"functionName": {
																									"name": "returndatasize",
																									"nodeType": "YulIdentifier",
																									"src": "5787:14:7"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "5787:16:7"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5805:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "gt",
																							"nodeType": "YulIdentifier",
																							"src": "5784:2:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5784:24:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "5763:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5763:46:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [],
																						"functionName": {
																							"name": "returndatasize",
																							"nodeType": "YulIdentifier",
																							"src": "5818:14:7"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5818:16:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5811:6:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5811:24:7"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "5760:2:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5760:76:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [],
																				"functionName": {
																					"name": "gas",
																					"nodeType": "YulIdentifier",
																					"src": "6254:3:7"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6254:5:7"
																			},
																			{
																				"name": "token",
																				"nodeType": "YulIdentifier",
																				"src": "6261:5:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6268:1:7",
																				"type": "",
																				"value": "0"
																			},
																			{
																				"name": "freeMemoryPointer",
																				"nodeType": "YulIdentifier",
																				"src": "6271:17:7"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6290:2:7",
																				"type": "",
																				"value": "68"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6294:1:7",
																				"type": "",
																				"value": "0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6297:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "call",
																			"nodeType": "YulIdentifier",
																			"src": "6249:4:7"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6249:51:7"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5560:3:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "5560:754:7"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nodeType": "YulIdentifier",
																	"src": "5549:7:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 1030,
														"isOffset": false,
														"isSlot": false,
														"src": "5445:6:7",
														"valueSize": 1
													},
													{
														"declaration": 1034,
														"isOffset": false,
														"isSlot": false,
														"src": "5549:7:7",
														"valueSize": 1
													},
													{
														"declaration": 1028,
														"isOffset": false,
														"isSlot": false,
														"src": "5311:2:7",
														"valueSize": 1
													},
													{
														"declaration": 1026,
														"isOffset": false,
														"isSlot": false,
														"src": "6261:5:7",
														"valueSize": 1
													}
												],
												"id": 1036,
												"nodeType": "InlineAssembly",
												"src": "4947:1377:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1038,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1034,
															"src": "6342:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "415050524f56455f4641494c4544",
															"id": 1039,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6351:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2",
																"typeString": "literal_string \"APPROVE_FAILED\""
															},
															"value": "APPROVE_FAILED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2",
																"typeString": "literal_string \"APPROVE_FAILED\""
															}
														],
														"id": 1037,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6334:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6334:34:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1041,
												"nodeType": "ExpressionStatement",
												"src": "6334:34:7"
											}
										]
									},
									"id": 1043,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "4779:11:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4806:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "4800:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ERC20_$799",
													"typeString": "contract ERC20"
												},
												"typeName": {
													"id": 1025,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1024,
														"name": "ERC20",
														"nameLocations": [
															"4800:5:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 799,
														"src": "4800:5:7"
													},
													"referencedDeclaration": 799,
													"src": "4800:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$799",
														"typeString": "contract ERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4829:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "4821:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1027,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4821:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1030,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4849:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1043,
												"src": "4841:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1029,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4841:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4790:71:7"
									},
									"returnParameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4871:0:7"
									},
									"scope": 1044,
									"src": "4770:1605:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1045,
							"src": "627:5750:7",
							"usedErrors": []
						}
					],
					"src": "42:6335:7"
				},
				"id": 7
			},
			"src/_Recommend.sol": {
				"ast": {
					"absolutePath": "src/_Recommend.sol",
					"exportedSymbols": {
						"Ownable": [
							147
						],
						"ReentrancyGuard": [
							959
						],
						"SafeTransferLib": [
							1044
						],
						"_Recommend": [
							1313
						]
					},
					"id": 1314,
					"license": "BUSL-1.1",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1046,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "40:23:8"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
							"file": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
							"id": 1048,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1314,
							"sourceUnit": 148,
							"src": "67:82:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1047,
										"name": "Ownable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 147,
										"src": "76:7:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/solady-main/src/utils/SafeTransferLib.sol",
							"file": "lib/solady-main/src/utils/SafeTransferLib.sol",
							"id": 1050,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1314,
							"sourceUnit": 1045,
							"src": "151:80:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1049,
										"name": "SafeTransferLib",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1044,
										"src": "160:15:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/solady-main/src/utils/ReentrancyGuard.sol",
							"file": "lib/solady-main/src/utils/ReentrancyGuard.sol",
							"id": 1052,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1314,
							"sourceUnit": 960,
							"src": "233:80:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1051,
										"name": "ReentrancyGuard",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 959,
										"src": "242:15:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1054,
										"name": "Ownable",
										"nameLocations": [
											"428:7:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "428:7:8"
									},
									"id": 1055,
									"nodeType": "InheritanceSpecifier",
									"src": "428:7:8"
								},
								{
									"baseName": {
										"id": 1056,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"437:15:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 959,
										"src": "437:15:8"
									},
									"id": 1057,
									"nodeType": "InheritanceSpecifier",
									"src": "437:15:8"
								}
							],
							"canonicalName": "_Recommend",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1053,
								"nodeType": "StructuredDocumentation",
								"src": "317:86:8",
								"text": " @title _Recommend.\n @dev A contract that recommends relevant features."
							},
							"fullyImplemented": true,
							"id": 1313,
							"linearizedBaseContracts": [
								1313,
								959,
								147,
								933
							],
							"name": "_Recommend",
							"nameLocation": "414:10:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "6f9c7fcf",
									"id": 1059,
									"name": "_NoTokensToClaim",
									"nameLocation": "466:16:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1058,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "482:2:8"
									},
									"src": "460:25:8"
								},
								{
									"errorSelector": "abf01a08",
									"id": 1061,
									"name": "_NotSufficientFund",
									"nameLocation": "497:18:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "515:2:8"
									},
									"src": "491:27:8"
								},
								{
									"errorSelector": "3691d20a",
									"id": 1063,
									"name": "_CallerNotEOA",
									"nameLocation": "530:13:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1062,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "543:2:8"
									},
									"src": "524:22:8"
								},
								{
									"errorSelector": "2a2bb092",
									"id": 1065,
									"name": "_IllegalValue",
									"nameLocation": "558:13:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1064,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "571:2:8"
									},
									"src": "552:22:8"
								},
								{
									"errorSelector": "ad9cd759",
									"id": 1067,
									"name": "_NoOwner",
									"nameLocation": "586:8:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1066,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "594:2:8"
									},
									"src": "580:17:8"
								},
								{
									"constant": false,
									"functionSelector": "df0f0951",
									"id": 1071,
									"mutability": "mutable",
									"name": "obtainedAmount",
									"nameLocation": "640:14:8",
									"nodeType": "VariableDeclaration",
									"scope": 1313,
									"src": "605:49:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1070,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1068,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "613:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "605:27:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1069,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "624:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f54b893b",
									"id": 1075,
									"mutability": "mutable",
									"name": "alreadyClaimed",
									"nameLocation": "696:14:8",
									"nodeType": "VariableDeclaration",
									"scope": 1313,
									"src": "661:49:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1074,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1072,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "669:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "661:27:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1073,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "680:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "24d7806c",
									"id": 1079,
									"mutability": "mutable",
									"name": "isAdmin",
									"nameLocation": "749:7:8",
									"nodeType": "VariableDeclaration",
									"scope": 1313,
									"src": "717:39:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 1078,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1076,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "725:7:8",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "717:24:8",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1077,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "736:4:8",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e44cec7c",
									"id": 1082,
									"mutability": "mutable",
									"name": "recommendAmount",
									"nameLocation": "778:15:8",
									"nodeType": "VariableDeclaration",
									"scope": 1313,
									"src": "763:34:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1080,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "763:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 1081,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "796:1:8",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f8b1cb3c",
									"id": 1085,
									"mutability": "mutable",
									"name": "versions",
									"nameLocation": "820:8:8",
									"nodeType": "VariableDeclaration",
									"scope": 1313,
									"src": "806:32:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1083,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "806:6:8",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "312e302e30",
										"id": 1084,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "831:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c",
											"typeString": "literal_string \"1.0.0\""
										},
										"value": "1.0.0"
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "f3cbbad58a635fe73557a2824874af183b5ac83978ae25d57ea4a2011c4df859",
									"id": 1091,
									"name": "TokensSet",
									"nameLocation": "853:9:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1087,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "879:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "863:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1086,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "863:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1089,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "893:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "885:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1088,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "862:38:8"
									},
									"src": "847:54:8"
								},
								{
									"anonymous": false,
									"eventSelector": "896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e430",
									"id": 1097,
									"name": "TokensClaimed",
									"nameLocation": "913:13:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1093,
												"indexed": true,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "943:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "927:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1092,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "927:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1095,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "957:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "949:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1094,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "949:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "926:38:8"
									},
									"src": "907:58:8"
								},
								{
									"anonymous": false,
									"eventSelector": "7b78ee99b011dff919ff5bd97f8a1b33b444782eb490dd7cd487fc963d63676f",
									"id": 1103,
									"name": "ContractDeploy",
									"nameLocation": "977:14:8",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1099,
												"indexed": true,
												"mutability": "mutable",
												"name": "flag",
												"nameLocation": "1008:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "992:20:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1098,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "992:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1101,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "1021:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "1014:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1100,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1014:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "991:38:8"
									},
									"src": "971:59:8"
								},
								{
									"body": {
										"id": 1122,
										"nodeType": "Block",
										"src": "1072:88:8",
										"statements": [
											{
												"expression": {
													"id": 1115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1110,
															"name": "isAdmin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1079,
															"src": "1083:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1113,
														"indexExpression": {
															"expression": {
																"id": 1111,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1091:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1112,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1095:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1091:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1083:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1114,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1105:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1083:26:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1116,
												"nodeType": "ExpressionStatement",
												"src": "1083:26:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"hexValue": "34",
															"id": 1118,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1140:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															"value": "4"
														},
														{
															"id": 1119,
															"name": "versions",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1085,
															"src": "1143:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_4_by_1",
																"typeString": "int_const 4"
															},
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"id": 1117,
														"name": "ContractDeploy",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1103,
														"src": "1125:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (uint256,string memory)"
														}
													},
													"id": 1120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1125:27:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1121,
												"nodeType": "EmitStatement",
												"src": "1120:32:8"
											}
										]
									},
									"id": 1123,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 1106,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1060:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1107,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1064:6:8",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "1060:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1108,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1105,
												"name": "Ownable",
												"nameLocations": [
													"1052:7:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "1052:7:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "1052:19:8"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1104,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1049:2:8"
									},
									"returnParameters": {
										"id": 1109,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1072:0:8"
									},
									"scope": 1313,
									"src": "1038:122:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1126,
										"nodeType": "Block",
										"src": "1195:2:8",
										"statements": []
									},
									"id": 1127,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1175:2:8"
									},
									"returnParameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1195:0:8"
									},
									"scope": 1313,
									"src": "1168:29:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										84
									],
									"body": {
										"id": 1152,
										"nodeType": "Block",
										"src": "1259:175:8",
										"statements": [
											{
												"assignments": [
													1132
												],
												"declarations": [
													{
														"constant": false,
														"id": 1132,
														"mutability": "mutable",
														"name": "sender",
														"nameLocation": "1278:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1152,
														"src": "1270:14:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1131,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1270:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1135,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1133,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 915,
														"src": "1287:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1287:12:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1270:29:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1139,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1136,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 67,
																"src": "1314:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1137,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1314:7:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"id": 1138,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1132,
															"src": "1325:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "1314:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 1143,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "1335:16:8",
														"subExpression": {
															"baseExpression": {
																"id": 1140,
																"name": "isAdmin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1079,
																"src": "1336:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 1142,
															"indexExpression": {
																"id": 1141,
																"name": "sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1132,
																"src": "1344:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1336:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1314:37:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1151,
												"nodeType": "IfStatement",
												"src": "1310:117:8",
												"trueBody": {
													"id": 1150,
													"nodeType": "Block",
													"src": "1353:74:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 1146,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 915,
																			"src": "1402:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 1147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1402:12:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1145,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1375:26:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1148,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1375:40:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1149,
															"nodeType": "RevertStatement",
															"src": "1368:47:8"
														}
													]
												}
											}
										]
									},
									"id": 1153,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1214:11:8",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1129,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1250:8:8"
									},
									"parameters": {
										"id": 1128,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1225:2:8"
									},
									"returnParameters": {
										"id": 1130,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:8"
									},
									"scope": 1313,
									"src": "1205:229:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1175,
										"nodeType": "Block",
										"src": "1499:99:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1160,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1514:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1161,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1518:6:8",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1514:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1162,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1528:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 1163,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1528:7:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1514:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1168,
												"nodeType": "IfStatement",
												"src": "1510:44:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1165,
															"name": "_NoOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1067,
															"src": "1544:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1166,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1544:10:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1167,
													"nodeType": "RevertStatement",
													"src": "1537:17:8"
												}
											},
											{
												"expression": {
													"id": 1173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1169,
															"name": "isAdmin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1079,
															"src": "1565:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1171,
														"indexExpression": {
															"id": 1170,
															"name": "_admin",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1155,
															"src": "1573:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1565:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1172,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1157,
														"src": "1583:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1565:25:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1174,
												"nodeType": "ExpressionStatement",
												"src": "1565:25:8"
											}
										]
									},
									"functionSelector": "4b0bddd2",
									"id": 1176,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setAdmin",
									"nameLocation": "1451:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1155,
												"mutability": "mutable",
												"name": "_admin",
												"nameLocation": "1468:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "1460:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1154,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1460:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1157,
												"mutability": "mutable",
												"name": "_status",
												"nameLocation": "1481:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "1476:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1156,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1476:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1459:30:8"
									},
									"returnParameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1499:0:8"
									},
									"scope": 1313,
									"src": "1442:156:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1199,
										"nodeType": "Block",
										"src": "1663:118:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1183,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "1678:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1184,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1682:6:8",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "1678:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1185,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1692:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 1186,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1692:7:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1678:21:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1191,
												"nodeType": "IfStatement",
												"src": "1674:44:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1188,
															"name": "_NoOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1067,
															"src": "1708:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1189,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1708:10:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1190,
													"nodeType": "RevertStatement",
													"src": "1701:17:8"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1195,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1178,
															"src": "1761:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1196,
															"name": "_value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1180,
															"src": "1766:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1192,
															"name": "SafeTransferLib",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1044,
															"src": "1729:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeTransferLib_$1044_$",
																"typeString": "type(library SafeTransferLib)"
															}
														},
														"id": 1194,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1745:15:8",
														"memberName": "safeTransferETH",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 981,
														"src": "1729:31:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1197,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1729:44:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1198,
												"nodeType": "ExpressionStatement",
												"src": "1729:44:8"
											}
										]
									},
									"functionSelector": "099a04e5",
									"id": 1200,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "rescueETH",
									"nameLocation": "1615:9:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1178,
												"mutability": "mutable",
												"name": "_to",
												"nameLocation": "1633:3:8",
												"nodeType": "VariableDeclaration",
												"scope": 1200,
												"src": "1625:11:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1625:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1180,
												"mutability": "mutable",
												"name": "_value",
												"nameLocation": "1646:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1200,
												"src": "1638:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1638:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1624:29:8"
									},
									"returnParameters": {
										"id": 1182,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1663:0:8"
									},
									"scope": 1313,
									"src": "1606:175:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1212,
										"nodeType": "Block",
										"src": "1997:53:8",
										"statements": [
											{
												"expression": {
													"id": 1210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1208,
														"name": "recommendAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1082,
														"src": "2008:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1209,
														"name": "_recommendAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1203,
														"src": "2026:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2008:34:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1211,
												"nodeType": "ExpressionStatement",
												"src": "2008:34:8"
											}
										]
									},
									"documentation": {
										"id": 1201,
										"nodeType": "StructuredDocumentation",
										"src": "1789:129:8",
										"text": " @dev The referrer's algebra.\n @param _recommendAmount The reward is returned to the superior algebra."
									},
									"functionSelector": "30710d04",
									"id": 1213,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1206,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1205,
												"name": "onlyOwner",
												"nameLocations": [
													"1987:9:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "1987:9:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "1987:9:8"
										}
									],
									"name": "setRecommendAmount",
									"nameLocation": "1933:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "_recommendAmount",
												"nameLocation": "1960:16:8",
												"nodeType": "VariableDeclaration",
												"scope": 1213,
												"src": "1952:24:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1202,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1952:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1951:26:8"
									},
									"returnParameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1997:0:8"
									},
									"scope": 1313,
									"src": "1924:126:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1244,
										"nodeType": "Block",
										"src": "2330:171:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1224,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1221,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2345:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1222,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2349:5:8",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "2345:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"id": 1223,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1218,
															"src": "2358:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2345:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1227,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1225,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1218,
															"src": "2368:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1226,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2378:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2368:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2345:34:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1232,
												"nodeType": "IfStatement",
												"src": "2341:62:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1229,
															"name": "_IllegalValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1065,
															"src": "2388:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1230,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2388:15:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1231,
													"nodeType": "RevertStatement",
													"src": "2381:22:8"
												}
											},
											{
												"expression": {
													"id": 1237,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1233,
															"name": "obtainedAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1071,
															"src": "2414:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1235,
														"indexExpression": {
															"id": 1234,
															"name": "referrer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1216,
															"src": "2429:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2414:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1236,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1218,
														"src": "2442:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2414:34:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1238,
												"nodeType": "ExpressionStatement",
												"src": "2414:34:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1240,
															"name": "referrer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1216,
															"src": "2476:8:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1241,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1218,
															"src": "2486:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1239,
														"name": "TokensSet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1091,
														"src": "2466:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2466:27:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1243,
												"nodeType": "EmitStatement",
												"src": "2461:32:8"
											}
										]
									},
									"documentation": {
										"id": 1214,
										"nodeType": "StructuredDocumentation",
										"src": "2058:187:8",
										"text": " @dev Only bond contracts can set a record of tokens that can be claimed.\n @param referrer The referrer.\n @param amount The quantity that can be claimed."
									},
									"functionSelector": "b43e6a53",
									"id": 1245,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setClaimableTokens",
									"nameLocation": "2260:18:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1216,
												"mutability": "mutable",
												"name": "referrer",
												"nameLocation": "2287:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1245,
												"src": "2279:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2279:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1218,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2305:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1245,
												"src": "2297:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1217,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2297:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2278:34:8"
									},
									"returnParameters": {
										"id": 1220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2330:0:8"
									},
									"scope": 1313,
									"src": "2251:250:8",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1311,
										"nodeType": "Block",
										"src": "2648:442:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1251,
															"name": "tx",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967270,
															"src": "2663:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_transaction",
																"typeString": "tx"
															}
														},
														"id": 1252,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2666:6:8",
														"memberName": "origin",
														"nodeType": "MemberAccess",
														"src": "2663:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"id": 1253,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "2676:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1254,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2680:6:8",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "2676:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2663:23:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1259,
												"nodeType": "IfStatement",
												"src": "2659:51:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1256,
															"name": "_CallerNotEOA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1063,
															"src": "2695:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1257,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2695:15:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1258,
													"nodeType": "RevertStatement",
													"src": "2688:22:8"
												}
											},
											{
												"assignments": [
													1261
												],
												"declarations": [
													{
														"constant": false,
														"id": 1261,
														"mutability": "mutable",
														"name": "amount",
														"nameLocation": "2729:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1311,
														"src": "2721:14:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1260,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2721:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1271,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 1262,
															"name": "obtainedAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1071,
															"src": "2738:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1265,
														"indexExpression": {
															"expression": {
																"id": 1263,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2753:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1264,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2757:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2753:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2738:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"baseExpression": {
															"id": 1266,
															"name": "alreadyClaimed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1075,
															"src": "2767:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1269,
														"indexExpression": {
															"expression": {
																"id": 1267,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2782:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2786:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2782:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "2767:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2738:55:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2721:72:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1272,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1261,
														"src": "2808:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1273,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2818:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2808:11:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1278,
												"nodeType": "IfStatement",
												"src": "2804:42:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1275,
															"name": "_NoTokensToClaim",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1059,
															"src": "2828:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1276,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2828:18:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1277,
													"nodeType": "RevertStatement",
													"src": "2821:25:8"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1285,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1281,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2869:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$__Recommend_$1313",
																		"typeString": "contract _Recommend"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$__Recommend_$1313",
																		"typeString": "contract _Recommend"
																	}
																],
																"id": 1280,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2861:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1279,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2861:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1282,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2861:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1283,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2875:7:8",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "2861:21:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1284,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1261,
														"src": "2885:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2861:30:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1289,
												"nodeType": "IfStatement",
												"src": "2857:63:8",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1286,
															"name": "_NotSufficientFund",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1061,
															"src": "2900:18:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1287,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2900:20:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1288,
													"nodeType": "RevertStatement",
													"src": "2893:27:8"
												}
											},
											{
												"expression": {
													"id": 1295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1290,
															"name": "alreadyClaimed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1075,
															"src": "2933:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1293,
														"indexExpression": {
															"expression": {
																"id": 1291,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2948:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1292,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2952:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2948:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2933:26:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1294,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1261,
														"src": "2963:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2933:36:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1296,
												"nodeType": "ExpressionStatement",
												"src": "2933:36:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1300,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3012:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1301,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3016:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3012:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1302,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1261,
															"src": "3024:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1297,
															"name": "SafeTransferLib",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1044,
															"src": "2980:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeTransferLib_$1044_$",
																"typeString": "type(library SafeTransferLib)"
															}
														},
														"id": 1299,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2996:15:8",
														"memberName": "safeTransferETH",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 981,
														"src": "2980:31:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2980:51:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1304,
												"nodeType": "ExpressionStatement",
												"src": "2980:51:8"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1306,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3063:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1307,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3067:6:8",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3063:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1308,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1261,
															"src": "3075:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1305,
														"name": "TokensClaimed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1097,
														"src": "3049:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3049:33:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1310,
												"nodeType": "EmitStatement",
												"src": "3044:38:8"
											}
										]
									},
									"documentation": {
										"id": 1246,
										"nodeType": "StructuredDocumentation",
										"src": "2509:88:8",
										"text": " @dev Has been recorded can claim the corresponding referral reward."
									},
									"functionSelector": "48c54b9d",
									"id": 1312,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1249,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1248,
												"name": "nonReentrant",
												"nameLocations": [
													"2635:12:8"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 958,
												"src": "2635:12:8"
											},
											"nodeType": "ModifierInvocation",
											"src": "2635:12:8"
										}
									],
									"name": "claimTokens",
									"nameLocation": "2612:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2623:2:8"
									},
									"returnParameters": {
										"id": 1250,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2648:0:8"
									},
									"scope": 1313,
									"src": "2603:487:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1314,
							"src": "405:2688:8",
							"usedErrors": [
								13,
								18,
								1059,
								1061,
								1063,
								1065,
								1067
							]
						}
					],
					"src": "40:3053:8"
				},
				"id": 8
			}
		}
	}
}
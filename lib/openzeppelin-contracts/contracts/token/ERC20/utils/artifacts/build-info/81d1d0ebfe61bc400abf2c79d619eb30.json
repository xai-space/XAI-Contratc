{
	"id": "81d1d0ebfe61bc400abf2c79d619eb30",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity 0.8.19;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\n\npragma solidity 0.8.19;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert Errors.FailedCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity 0.8.19;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity 0.8.19;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/Errors.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity 0.8.19;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity 0.8.19;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity 0.8.19;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity 0.8.19;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
				"IERC1363": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"approveAndCall(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"approveAndCall(address,uint256,bytes)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `spender`.",
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferAndCall(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferAndCall(address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFromAndCall(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFromAndCall(address,address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							}
						},
						"title": "IERC1363",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"approveAndCall(address,uint256)": "3177029f",
							"approveAndCall(address,uint256,bytes)": "cae9ca51",
							"balanceOf(address)": "70a08231",
							"supportsInterface(bytes4)": "01ffc9a7",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferAndCall(address,uint256)": "1296ee62",
							"transferAndCall(address,uint256,bytes)": "4000aea0",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferFromAndCall(address,address,uint256)": "d8fbe994",
							"transferFromAndCall(address,address,uint256,bytes)": "c1d34b89"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `spender`.\",\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}}},\"title\":\"IERC1363\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\":\"IERC1363\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xa0bde69aaea348ad4b01f4813580bfd1739aae3e7d67bb8bfa1fa51158571f0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cd299bd27b8d00cf449eea4bbd60ffcba9d9611d997d6c9d069b20591331dddb\",\"dweb:/ipfs/QmbePywaV7342zrxgrjZcHuPU6CYBoqsb84KmpEpizCkrv\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xaae7a768248603dde02c0d511ad19218c9ac597a6c29878bd4ff8d9004f39654\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://56ee3ed6eb50573f5208bebc8293ddbb3ab5b978565967307f57a76d047d086a\",\"dweb:/ipfs/QmSMq5zmWLgMvuzKYUhLmYKCMRsHfjP5vjwu1cK7HqPodF\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x75a6c32b80c199339bde8fcd7b88521453afb54e17cadb9b2d767bf1f0b80402\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85cb97a0c604aa1b7a1b391e65e0a403076802cfa81cd6cb9ec71605d8f40b6f\",\"dweb:/ipfs/QmPgYGonx8e7Xsbf6zSCHQmAqyR1G9mwZAVNgiHV8FL1cn\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x2a67691f431a6e5eeae9012a19c82ceef113b43cd68435911dec83da57b9d407\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29aae0becfbae61a9dd9452f989f58ce843060af89ef5aeb01e7122c4e8b7475\",\"dweb:/ipfs/QmPaGNM5zCMkJKGm2dKrivwEegwfN7kQw9E7RvMgKbxrqj\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x0256a4ec2d817b06d957ec6aaf6db3e6dcc850fa08f01f50b5225d2dd3295ca3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6cbbce88570f21ade526dc001d79ea2d0cf3577401b9a53d8c67d3c0b6632bf7\",\"dweb:/ipfs/Qmep6wMttm3S2WswA1wUiFMX6rw4Mt59daQdqpZosdmcYh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x2a67691f431a6e5eeae9012a19c82ceef113b43cd68435911dec83da57b9d407\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29aae0becfbae61a9dd9452f989f58ce843060af89ef5aeb01e7122c4e8b7475\",\"dweb:/ipfs/QmPaGNM5zCMkJKGm2dKrivwEegwfN7kQw9E7RvMgKbxrqj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":749:9441  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":749:9441  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a25e99929684a32fb09579348bee755ebad6a792ce7539af1158cad53923653364736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a25e99929684a32fb09579348bee755ebad6a792ce7539af1158cad53923653364736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0x5E SWAP10 SWAP3 SWAP7 DUP5 LOG3 0x2F 0xB0 SWAP6 PUSH26 0x348BEE755EBAD6A792CE7539AF1158CAD53923653364736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "749:8692:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;749:8692:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a25e99929684a32fb09579348bee755ebad6a792ce7539af1158cad53923653364736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG2 0x5E SWAP10 SWAP3 SWAP7 DUP5 LOG3 0x2F 0xB0 SWAP6 PUSH26 0x348BEE755EBAD6A792CE7539AF1158CAD53923653364736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ",
							"sourceMap": "749:8692:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"approveAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite",
								"transferAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"transferFromAndCallRelaxed(contract IERC1363,address,address,uint256,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 749,
									"end": 9441,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a25e99929684a32fb09579348bee755ebad6a792ce7539af1158cad53923653364736f6c63430008130033",
									".code": [
										{
											"begin": 749,
											"end": 9441,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 749,
											"end": 9441,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 749,
											"end": 9441,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 749,
											"end": 9441,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 749,
											"end": 9441,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 749,
											"end": 9441,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 749,
											"end": 9441,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 749,
											"end": 9441,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 749,
											"end": 9441,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Errors.sol",
								"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xa0bde69aaea348ad4b01f4813580bfd1739aae3e7d67bb8bfa1fa51158571f0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cd299bd27b8d00cf449eea4bbd60ffcba9d9611d997d6c9d069b20591331dddb\",\"dweb:/ipfs/QmbePywaV7342zrxgrjZcHuPU6CYBoqsb84KmpEpizCkrv\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xaae7a768248603dde02c0d511ad19218c9ac597a6c29878bd4ff8d9004f39654\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://56ee3ed6eb50573f5208bebc8293ddbb3ab5b978565967307f57a76d047d086a\",\"dweb:/ipfs/QmSMq5zmWLgMvuzKYUhLmYKCMRsHfjP5vjwu1cK7HqPodF\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x75a6c32b80c199339bde8fcd7b88521453afb54e17cadb9b2d767bf1f0b80402\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85cb97a0c604aa1b7a1b391e65e0a403076802cfa81cd6cb9ec71605d8f40b6f\",\"dweb:/ipfs/QmPgYGonx8e7Xsbf6zSCHQmAqyR1G9mwZAVNgiHV8FL1cn\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x2a67691f431a6e5eeae9012a19c82ceef113b43cd68435911dec83da57b9d407\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29aae0becfbae61a9dd9452f989f58ce843060af89ef5aeb01e7122c4e8b7475\",\"dweb:/ipfs/QmPaGNM5zCMkJKGm2dKrivwEegwfN7kQw9E7RvMgKbxrqj\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x56e551de3fa29049f4a0ff6a077330e72fde7811a32c273ea38481314be2147a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a69517e31e8a9cc59cdf6d284d0acf44a0b751aca8d2cdaf6271935a229fbdbb\",\"dweb:/ipfs/QmdAwKLBUk2gvrT7X64oqGo4RTmxMwdj6Cjcz89Um8fzNN\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x5c0e25caa778f6c07b333f00e33e2ba4f0c152756c13a28594b26aa26671934a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://27f4942baf7bb37fdb14f15706c9082411f3485b0723a1934b609f43d6464e15\",\"dweb:/ipfs/QmVvCB6irqNrodWrB68rrBjMPtUdrXHQp3gpTgSVnYzc1m\"]},\"lib/openzeppelin-contracts/contracts/utils/Errors.sol\":{\"keccak256\":\"0x57ce794156a4dc5b78605b8cb93bee38dafd0e1f26daf24ef6467a683bfd94f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b95cc5b6465e0ec147d12309dc2bc9c055d52ea5dd300bf5c494ee3a5585e4d\",\"dweb:/ipfs/QmQ2jTbwUgWi4WQTeTem6qLU91g7xZwLXvwHW7Hte2JVL8\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x0256a4ec2d817b06d957ec6aaf6db3e6dcc850fa08f01f50b5225d2dd3295ca3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6cbbce88570f21ade526dc001d79ea2d0cf3577401b9a53d8c67d3c0b6632bf7\",\"dweb:/ipfs/Qmep6wMttm3S2WswA1wUiFMX6rw4Mt59daQdqpZosdmcYh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"Address": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":232:6031  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":232:6031  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e489f672d79fa0da10f914fb9052ff30089d3abf49de2bfcb3630effb7ef147464736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e489f672d79fa0da10f914fb9052ff30089d3abf49de2bfcb3630effb7ef147464736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 DUP10 0xF6 PUSH19 0xD79FA0DA10F914FB9052FF30089D3ABF49DE2B 0xFC 0xB3 PUSH4 0xEFFB7EF EQ PUSH21 0x64736F6C6343000813003300000000000000000000 ",
							"sourceMap": "232:5799:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;232:5799:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e489f672d79fa0da10f914fb9052ff30089d3abf49de2bfcb3630effb7ef147464736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 DUP10 0xF6 PUSH19 0xD79FA0DA10F914FB9052FF30089D3ABF49DE2B 0xFC 0xB3 PUSH4 0xEFFB7EF EQ PUSH21 0x64736F6C6343000813003300000000000000000000 ",
							"sourceMap": "232:5799:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 232,
									"end": 6031,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e489f672d79fa0da10f914fb9052ff30089d3abf49de2bfcb3630effb7ef147464736f6c63430008130033",
									".code": [
										{
											"begin": 232,
											"end": 6031,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 232,
											"end": 6031,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 232,
											"end": 6031,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 232,
											"end": 6031,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 232,
											"end": 6031,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 232,
											"end": 6031,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 232,
											"end": 6031,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 232,
											"end": 6031,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 232,
											"end": 6031,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Errors.sol",
								"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x5c0e25caa778f6c07b333f00e33e2ba4f0c152756c13a28594b26aa26671934a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://27f4942baf7bb37fdb14f15706c9082411f3485b0723a1934b609f43d6464e15\",\"dweb:/ipfs/QmVvCB6irqNrodWrB68rrBjMPtUdrXHQp3gpTgSVnYzc1m\"]},\"lib/openzeppelin-contracts/contracts/utils/Errors.sol\":{\"keccak256\":\"0x57ce794156a4dc5b78605b8cb93bee38dafd0e1f26daf24ef6467a683bfd94f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b95cc5b6465e0ec147d12309dc2bc9c055d52ea5dd300bf5c494ee3a5585e4d\",\"dweb:/ipfs/QmQ2jTbwUgWi4WQTeTem6qLU91g7xZwLXvwHW7Hte2JVL8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/Errors.sol": {
				"Errors": {
					"abi": [
						{
							"inputs": [],
							"name": "FailedCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedDeployment",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "MissingPrecompile",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._",
						"errors": {
							"FailedCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"FailedDeployment()": [
								{
									"details": "The deployment failed."
								}
							],
							"InsufficientBalance(uint256,uint256)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"MissingPrecompile(address)": [
								{
									"details": "A necessary precompile is missing."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/Errors.sol\":410:894  library Errors {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/Errors.sol\":410:894  library Errors {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e7c962c1f1c4d0099261d16676fcd91603d758117773e3d899a95dab82336ecc64736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e7c962c1f1c4d0099261d16676fcd91603d758117773e3d899a95dab82336ecc64736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC9 PUSH3 0xC1F1C4 0xD0 MULMOD SWAP3 PUSH2 0xD166 PUSH23 0xFCD91603D758117773E3D899A95DAB82336ECC64736F6C PUSH4 0x43000813 STOP CALLER ",
							"sourceMap": "410:484:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;410:484:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e7c962c1f1c4d0099261d16676fcd91603d758117773e3d899a95dab82336ecc64736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xC9 PUSH3 0xC1F1C4 0xD0 MULMOD SWAP3 PUSH2 0xD166 PUSH23 0xFCD91603D758117773E3D899A95DAB82336ECC64736F6C PUSH4 0x43000813 STOP CALLER ",
							"sourceMap": "410:484:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 410,
									"end": 894,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 410,
									"end": 894,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e7c962c1f1c4d0099261d16676fcd91603d758117773e3d899a95dab82336ecc64736f6c63430008130033",
									".code": [
										{
											"begin": 410,
											"end": 894,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 410,
											"end": 894,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 410,
											"end": 894,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 410,
											"end": 894,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 410,
											"end": 894,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 410,
											"end": 894,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 410,
											"end": 894,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 410,
											"end": 894,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 410,
											"end": 894,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol",
								"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Errors.sol",
								"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MissingPrecompile\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._\",\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"MissingPrecompile(address)\":[{\"details\":\"A necessary precompile is missing.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Errors.sol\":\"Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Errors.sol\":{\"keccak256\":\"0x57ce794156a4dc5b78605b8cb93bee38dafd0e1f26daf24ef6467a683bfd94f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b95cc5b6465e0ec147d12309dc2bc9c055d52ea5dd300bf5c494ee3a5585e4d\",\"dweb:/ipfs/QmQ2jTbwUgWi4WQTeTem6qLU91g7xZwLXvwHW7Hte2JVL8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x0256a4ec2d817b06d957ec6aaf6db3e6dcc850fa08f01f50b5225d2dd3295ca3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6cbbce88570f21ade526dc001d79ea2d0cf3577401b9a53d8c67d3c0b6632bf7\",\"dweb:/ipfs/Qmep6wMttm3S2WswA1wUiFMX6rw4Mt59daQdqpZosdmcYh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol",
					"exportedSymbols": {
						"IERC1363": [
							81
						],
						"IERC165": [
							871
						],
						"IERC20": [
							167
						]
					},
					"id": 82,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:0"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 82,
							"sourceUnit": 90,
							"src": "132:36:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 167,
										"src": "140:6:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 82,
							"sourceUnit": 86,
							"src": "169:38:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 871,
										"src": "177:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "IERC20",
										"nameLocations": [
											"589:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 167,
										"src": "589:6:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "589:6:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "IERC165",
										"nameLocations": [
											"597:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 871,
										"src": "597:7:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "597:7:0"
								}
							],
							"canonicalName": "IERC1363",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "209:357:0",
								"text": " @title IERC1363\n @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction."
							},
							"fullyImplemented": false,
							"id": 81,
							"linearizedBaseContracts": [
								81,
								871,
								167
							],
							"name": "IERC1363",
							"nameLocation": "577:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "1147:370:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "1296ee62",
									"id": 20,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "1531:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1555:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1547:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 12,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1547:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1567:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1559:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 14,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1559:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1546:27:0"
									},
									"returnParameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1592:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 17,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1592:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1591:6:0"
									},
									"scope": 81,
									"src": "1522:76:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "1604:453:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "4000aea0",
									"id": 32,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "2071:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2095:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2087:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 22,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2087:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2107:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2099:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 24,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2099:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2129:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2114:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 26,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2114:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2086:48:0"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2153:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 29,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2153:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2152:6:0"
									},
									"scope": 81,
									"src": "2062:97:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "2165:453:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "d8fbe994",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "2632:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2660:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2652:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2674:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2666:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2666:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2686:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2678:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2678:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:41:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2711:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2711:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:6:0"
									},
									"scope": 81,
									"src": "2623:94:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "2723:536:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "c1d34b89",
									"id": 58,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "3273:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3301:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3293:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3293:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3315:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3307:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3307:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3327:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3319:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 50,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3319:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3349:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3334:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 52,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3334:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3292:62:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3373:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 55,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3373:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3372:6:0"
									},
									"scope": 81,
									"src": "3264:115:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "3385:390:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "3177029f",
									"id": 68,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "3789:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3812:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3804:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 60,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3804:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3829:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3821:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 62,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3821:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3803:32:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3854:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 65,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3854:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3853:6:0"
									},
									"scope": 81,
									"src": "3780:80:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "3866:478:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @param data Additional data with no specified format, sent in call to `spender`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "cae9ca51",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "4358:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4381:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4373:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4373:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4398:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4390:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 72,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4390:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4420:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4405:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 74,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4405:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4372:53:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4444:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 77,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4444:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4443:6:0"
									},
									"scope": 81,
									"src": "4349:101:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 82,
							"src": "567:3885:0",
							"usedErrors": []
						}
					],
					"src": "107:4346:0"
				},
				"id": 0
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							871
						]
					},
					"id": 86,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 83,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:1"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
							"file": "../utils/introspection/IERC165.sol",
							"id": 85,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 86,
							"sourceUnit": 872,
							"src": "131:59:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 84,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 871,
										"src": "139:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "106:85:1"
				},
				"id": 1
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							167
						]
					},
					"id": 90,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 87,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:2"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "../token/ERC20/IERC20.sol",
							"id": 89,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 90,
							"sourceUnit": 168,
							"src": "130:49:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 88,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 167,
										"src": "138:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "105:75:2"
				},
				"id": 2
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							167
						]
					},
					"id": 168,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 91,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 92,
								"nodeType": "StructuredDocumentation",
								"src": "131:71:3",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 167,
							"linearizedBaseContracts": [
								167
							],
							"name": "IERC20",
							"nameLocation": "213:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 101,
									"name": "Transfer",
									"nameLocation": "395:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "404:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 94,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "426:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "446:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:3"
									},
									"src": "389:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 110,
									"name": "Approval",
									"nameLocation": "626:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "635:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 106,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "658:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 110,
												"src": "683:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 107,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:3"
									},
									"src": "620:78:3"
								},
								{
									"documentation": {
										"id": 111,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:3",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 116,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:3"
									},
									"returnParameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 116,
												"src": "820:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:3"
									},
									"scope": 167,
									"src": "774:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 117,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:3",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 124,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 119,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "930:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 118,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:3"
									},
									"returnParameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "970:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:3"
									},
									"scope": 167,
									"src": "911:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:3",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 134,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "1221:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 126,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "1233:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:3"
									},
									"returnParameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "1266:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 131,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:3"
									},
									"scope": 167,
									"src": "1203:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 135,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 144,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1566:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1581:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:3"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "1621:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:3"
									},
									"scope": 167,
									"src": "1547:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 145,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:3",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 154,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "2325:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 146,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "2342:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:3"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "2375:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 151,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:3"
									},
									"scope": 167,
									"src": "2308:73:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 166,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "2711:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 156,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "2725:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "2737:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:3"
									},
									"returnParameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "2770:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 163,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:3"
									},
									"scope": 167,
									"src": "2689:87:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 168,
							"src": "203:2575:3",
							"usedErrors": []
						}
					],
					"src": "106:2673:3"
				},
				"id": 3
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							837
						],
						"IERC1363": [
							81
						],
						"IERC20": [
							167
						],
						"SafeERC20": [
							578
						]
					},
					"id": 579,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 169,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:4"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 171,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 579,
							"sourceUnit": 168,
							"src": "140:37:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 170,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 167,
										"src": "148:6:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol",
							"file": "../../../interfaces/IERC1363.sol",
							"id": 173,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 579,
							"sourceUnit": 82,
							"src": "178:58:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 172,
										"name": "IERC1363",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 81,
										"src": "186:8:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 175,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 579,
							"sourceUnit": 838,
							"src": "237:51:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 174,
										"name": "Address",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 837,
										"src": "245:7:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 176,
								"nodeType": "StructuredDocumentation",
								"src": "290:458:4",
								"text": " @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 578,
							"linearizedBaseContracts": [
								578
							],
							"name": "SafeERC20",
							"nameLocation": "757:9:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 177,
										"nodeType": "StructuredDocumentation",
										"src": "773:65:4",
										"text": " @dev An operation with an ERC-20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 181,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "849:24:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "882:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "874:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "874:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "873:15:4"
									},
									"src": "843:46:4"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "895:71:4",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 190,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "977:32:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1018:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "1010:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1010:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "1035:16:4",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "1027:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1027:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1061:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "1053:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1053:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1009:70:4"
									},
									"src": "971:109:4"
								},
								{
									"body": {
										"id": 213,
										"nodeType": "Block",
										"src": "1342:88:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 202,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 194,
															"src": "1372:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 205,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 194,
																		"src": "1394:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1400:8:4",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 134,
																	"src": "1394:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 207,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 196,
																			"src": "1411:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 208,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 198,
																			"src": "1415:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 209,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1410:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 203,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1379:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 204,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1383:10:4",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1379:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 210,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1379:43:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 201,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 536,
														"src": "1352:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 211,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1352:71:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 212,
												"nodeType": "ExpressionStatement",
												"src": "1352:71:4"
											}
										]
									},
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "1086:179:4",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 214,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1279:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1299:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 214,
												"src": "1292:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 193,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 192,
														"name": "IERC20",
														"nameLocations": [
															"1292:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "1292:6:4"
													},
													"referencedDeclaration": 167,
													"src": "1292:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1314:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 214,
												"src": "1306:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1306:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1326:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 214,
												"src": "1318:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1318:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1291:41:4"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1342:0:4"
									},
									"scope": 578,
									"src": "1270:160:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 240,
										"nodeType": "Block",
										"src": "1759:98:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 228,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "1789:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 231,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 218,
																		"src": "1811:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 232,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1817:12:4",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 166,
																	"src": "1811:18:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 233,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 220,
																			"src": "1832:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 234,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 222,
																			"src": "1838:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 235,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 224,
																			"src": "1842:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 236,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1831:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 229,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1796:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 230,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1800:10:4",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1796:14:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 237,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1796:53:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 227,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 536,
														"src": "1769:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1769:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 239,
												"nodeType": "ExpressionStatement",
												"src": "1769:81:4"
											}
										]
									},
									"documentation": {
										"id": 215,
										"nodeType": "StructuredDocumentation",
										"src": "1436:228:4",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 241,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1678:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1702:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1695:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 217,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 216,
														"name": "IERC20",
														"nameLocations": [
															"1695:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "1695:6:4"
													},
													"referencedDeclaration": 167,
													"src": "1695:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1717:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1709:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1709:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1731:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1723:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1723:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1743:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1735:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1735:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1694:55:4"
									},
									"returnParameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1759:0:4"
									},
									"scope": 578,
									"src": "1669:188:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 271,
										"nodeType": "Block",
										"src": "2599:139:4",
										"statements": [
											{
												"assignments": [
													253
												],
												"declarations": [
													{
														"constant": false,
														"id": 253,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2617:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 271,
														"src": "2609:20:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 252,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2609:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 262,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 258,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2656:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$578",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$578",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 257,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2648:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 256,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2648:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 259,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2648:13:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 260,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 247,
															"src": "2663:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 254,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 245,
															"src": "2632:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														"id": 255,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2638:9:4",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 144,
														"src": "2632:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2632:39:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2609:62:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 264,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 245,
															"src": "2694:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 265,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 247,
															"src": "2701:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 266,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 253,
																"src": "2710:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 267,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 249,
																"src": "2725:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2710:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$167",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 263,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 362,
														"src": "2681:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2681:50:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 270,
												"nodeType": "ExpressionStatement",
												"src": "2681:50:4"
											}
										]
									},
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "1863:645:4",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 272,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2522:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2551:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "2544:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 244,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 243,
														"name": "IERC20",
														"nameLocations": [
															"2544:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "2544:6:4"
													},
													"referencedDeclaration": 167,
													"src": "2544:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2566:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "2558:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 246,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2558:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2583:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "2575:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2575:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2543:46:4"
									},
									"returnParameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2599:0:4"
									},
									"scope": 578,
									"src": "2513:225:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 314,
										"nodeType": "Block",
										"src": "3504:370:4",
										"statements": [
											{
												"id": 313,
												"nodeType": "UncheckedBlock",
												"src": "3514:354:4",
												"statements": [
													{
														"assignments": [
															284
														],
														"declarations": [
															{
																"constant": false,
																"id": 284,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "3546:16:4",
																"nodeType": "VariableDeclaration",
																"scope": 313,
																"src": "3538:24:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 283,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3538:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 293,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 289,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3589:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$578",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$578",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 288,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3581:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 287,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3581:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 290,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3581:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 291,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 278,
																	"src": "3596:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 285,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 276,
																	"src": "3565:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$167",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 286,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3571:9:4",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 144,
																"src": "3565:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 292,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3565:39:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3538:66:4"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 296,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 294,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 284,
																"src": "3622:16:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 295,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 280,
																"src": "3641:17:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3622:36:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 304,
														"nodeType": "IfStatement",
														"src": "3618:160:4",
														"trueBody": {
															"id": 303,
															"nodeType": "Block",
															"src": "3660:118:4",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 298,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 278,
																				"src": "3718:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 299,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 284,
																				"src": "3727:16:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 300,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 280,
																				"src": "3745:17:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 297,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 190,
																			"src": "3685:32:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																				"typeString": "function (address,uint256,uint256) pure"
																			}
																		},
																		"id": 301,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3685:78:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 302,
																	"nodeType": "RevertStatement",
																	"src": "3678:85:4"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 306,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 276,
																	"src": "3804:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$167",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 307,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 278,
																	"src": "3811:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 310,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 308,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 284,
																		"src": "3820:16:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 309,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 280,
																		"src": "3839:17:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3820:36:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$167",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 305,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 362,
																"src": "3791:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3791:66:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 312,
														"nodeType": "ExpressionStatement",
														"src": "3791:66:4"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 273,
										"nodeType": "StructuredDocumentation",
										"src": "2744:657:4",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 315,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "3415:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 276,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3444:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 315,
												"src": "3437:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 275,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 274,
														"name": "IERC20",
														"nameLocations": [
															"3437:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "3437:6:4"
													},
													"referencedDeclaration": 167,
													"src": "3437:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3459:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 315,
												"src": "3451:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 277,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3451:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 280,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "3476:17:4",
												"nodeType": "VariableDeclaration",
												"scope": 315,
												"src": "3468:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 279,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3468:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3436:58:4"
									},
									"returnParameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3504:0:4"
									},
									"scope": 578,
									"src": "3406:468:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 361,
										"nodeType": "Block",
										"src": "4528:303:4",
										"statements": [
											{
												"assignments": [
													327
												],
												"declarations": [
													{
														"constant": false,
														"id": 327,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "4551:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 361,
														"src": "4538:25:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 326,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4538:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 336,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 330,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 319,
																"src": "4581:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$167",
																	"typeString": "contract IERC20"
																}
															},
															"id": 331,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4587:7:4",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 154,
															"src": "4581:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 332,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 321,
																	"src": "4597:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 333,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 323,
																	"src": "4606:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 334,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "4596:16:4",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 328,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "4566:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 329,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "4570:10:4",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "4566:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4566:47:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4538:75:4"
											},
											{
												"condition": {
													"id": 341,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4628:45:4",
													"subExpression": {
														"arguments": [
															{
																"id": 338,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 319,
																"src": "4653:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$167",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 339,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 327,
																"src": "4660:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$167",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 337,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "4629:23:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 340,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4629:44:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 360,
												"nodeType": "IfStatement",
												"src": "4624:201:4",
												"trueBody": {
													"id": 359,
													"nodeType": "Block",
													"src": "4675:150:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 343,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 319,
																		"src": "4709:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 346,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 319,
																					"src": "4731:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$167",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 347,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4737:7:4",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 154,
																				"src": "4731:13:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 348,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 321,
																						"src": "4747:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 349,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "4756:1:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 350,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4746:12:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 344,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4716:3:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 345,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "4720:10:4",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "4716:14:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 351,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4716:43:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 342,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "4689:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 352,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4689:71:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 353,
															"nodeType": "ExpressionStatement",
															"src": "4689:71:4"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 355,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 319,
																		"src": "4794:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 356,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 327,
																		"src": "4801:12:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$167",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 354,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 536,
																	"src": "4774:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 357,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4774:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 358,
															"nodeType": "ExpressionStatement",
															"src": "4774:40:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 316,
										"nodeType": "StructuredDocumentation",
										"src": "3880:566:4",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT.\n NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n set here."
									},
									"id": 362,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "4460:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4480:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "4473:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 318,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 317,
														"name": "IERC20",
														"nameLocations": [
															"4473:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "4473:6:4"
													},
													"referencedDeclaration": 167,
													"src": "4473:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4495:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "4487:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 320,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4487:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 323,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4512:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 362,
												"src": "4504:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 322,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4504:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4472:46:4"
									},
									"returnParameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4528:0:4"
									},
									"scope": 578,
									"src": "4451:380:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 404,
										"nodeType": "Block",
										"src": "5278:219:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 375,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 368,
																"src": "5292:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 376,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5295:4:4",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "5292:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 377,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5300:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5292:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 378,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5310:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5292:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 393,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "5378:39:4",
														"subExpression": {
															"arguments": [
																{
																	"id": 389,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 368,
																	"src": "5401:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 390,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 370,
																	"src": "5405:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 391,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 372,
																	"src": "5412:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 387,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 366,
																	"src": "5379:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$81",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 388,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5385:15:4",
																"memberName": "transferAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 32,
																"src": "5379:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 392,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5379:38:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 402,
													"nodeType": "IfStatement",
													"src": "5374:117:4",
													"trueBody": {
														"id": 401,
														"nodeType": "Block",
														"src": "5419:72:4",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 397,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 366,
																					"src": "5473:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 396,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5465:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 395,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "5465:7:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 398,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5465:14:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 394,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 181,
																		"src": "5440:24:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																			"typeString": "function (address) pure"
																		}
																	},
																	"id": 399,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5440:40:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 400,
																"nodeType": "RevertStatement",
																"src": "5433:47:4"
															}
														]
													}
												},
												"id": 403,
												"nodeType": "IfStatement",
												"src": "5288:203:4",
												"trueBody": {
													"id": 386,
													"nodeType": "Block",
													"src": "5313:55:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 381,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 366,
																		"src": "5340:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 382,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 368,
																		"src": "5347:2:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 383,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 370,
																		"src": "5351:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 380,
																	"name": "safeTransfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 214,
																	"src": "5327:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 384,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5327:30:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 385,
															"nodeType": "ExpressionStatement",
															"src": "5327:30:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 363,
										"nodeType": "StructuredDocumentation",
										"src": "4837:333:4",
										"text": " @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 405,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCallRelaxed",
									"nameLocation": "5184:22:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5216:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "5207:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$81",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 365,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 364,
														"name": "IERC1363",
														"nameLocations": [
															"5207:8:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "5207:8:4"
													},
													"referencedDeclaration": 81,
													"src": "5207:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$81",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5231:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "5223:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5223:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5243:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "5235:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5235:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5263:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "5250:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 371,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5250:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5206:62:4"
									},
									"returnParameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5278:0:4"
									},
									"scope": 578,
									"src": "5175:322:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 451,
										"nodeType": "Block",
										"src": "6016:239:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 420,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 413,
																"src": "6030:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6033:4:4",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "6030:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6038:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6030:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 423,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6048:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6030:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 440,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "6126:49:4",
														"subExpression": {
															"arguments": [
																{
																	"id": 435,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 411,
																	"src": "6153:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 436,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 413,
																	"src": "6159:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 437,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 415,
																	"src": "6163:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 438,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 417,
																	"src": "6170:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 433,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 409,
																	"src": "6127:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$81",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 434,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6133:19:4",
																"memberName": "transferFromAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 58,
																"src": "6127:25:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6127:48:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 449,
													"nodeType": "IfStatement",
													"src": "6122:127:4",
													"trueBody": {
														"id": 448,
														"nodeType": "Block",
														"src": "6177:72:4",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 444,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 409,
																					"src": "6231:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 443,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6223:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 442,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6223:7:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 445,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6223:14:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 441,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 181,
																		"src": "6198:24:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																			"typeString": "function (address) pure"
																		}
																	},
																	"id": 446,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6198:40:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 447,
																"nodeType": "RevertStatement",
																"src": "6191:47:4"
															}
														]
													}
												},
												"id": 450,
												"nodeType": "IfStatement",
												"src": "6026:223:4",
												"trueBody": {
													"id": 432,
													"nodeType": "Block",
													"src": "6051:65:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 426,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 409,
																		"src": "6082:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 427,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 411,
																		"src": "6089:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 428,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 413,
																		"src": "6095:2:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 429,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 415,
																		"src": "6099:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 425,
																	"name": "safeTransferFrom",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 241,
																	"src": "6065:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 430,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6065:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 431,
															"nodeType": "ExpressionStatement",
															"src": "6065:40:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 406,
										"nodeType": "StructuredDocumentation",
										"src": "5503:341:4",
										"text": " @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 452,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCallRelaxed",
									"nameLocation": "5858:26:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5903:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "5894:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$81",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 408,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 407,
														"name": "IERC1363",
														"nameLocations": [
															"5894:8:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "5894:8:4"
													},
													"referencedDeclaration": 81,
													"src": "5894:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$81",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5926:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "5918:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5918:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5948:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "5940:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5940:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5968:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "5960:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5960:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5996:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "5983:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 416,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5983:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5884:122:4"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6016:0:4"
									},
									"scope": 578,
									"src": "5849:406:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 494,
										"nodeType": "Block",
										"src": "7022:218:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 465,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 458,
																"src": "7036:2:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 466,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7039:4:4",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "7036:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 467,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7044:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7036:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 468,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7054:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7036:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "7122:38:4",
														"subExpression": {
															"arguments": [
																{
																	"id": 479,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 458,
																	"src": "7144:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 480,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 460,
																	"src": "7148:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 481,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 462,
																	"src": "7155:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 477,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 456,
																	"src": "7123:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$81",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 478,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7129:14:4",
																"memberName": "approveAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 80,
																"src": "7123:20:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7123:37:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 492,
													"nodeType": "IfStatement",
													"src": "7118:116:4",
													"trueBody": {
														"id": 491,
														"nodeType": "Block",
														"src": "7162:72:4",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 487,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 456,
																					"src": "7216:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 486,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "7208:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 485,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "7208:7:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 488,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7208:14:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 484,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 181,
																		"src": "7183:24:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																			"typeString": "function (address) pure"
																		}
																	},
																	"id": 489,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7183:40:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 490,
																"nodeType": "RevertStatement",
																"src": "7176:47:4"
															}
														]
													}
												},
												"id": 493,
												"nodeType": "IfStatement",
												"src": "7032:202:4",
												"trueBody": {
													"id": 476,
													"nodeType": "Block",
													"src": "7057:55:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 471,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 456,
																		"src": "7084:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 472,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 458,
																		"src": "7091:2:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 473,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 460,
																		"src": "7095:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 470,
																	"name": "forceApprove",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 362,
																	"src": "7071:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$167_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 474,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7071:30:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 475,
															"nodeType": "ExpressionStatement",
															"src": "7071:30:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 453,
										"nodeType": "StructuredDocumentation",
										"src": "6261:654:4",
										"text": " @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n once without retrying, and relies on the returned value to be true.\n Reverts if the returned value is other than `true`."
									},
									"id": 495,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCallRelaxed",
									"nameLocation": "6929:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6960:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 495,
												"src": "6951:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$81",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 455,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 454,
														"name": "IERC1363",
														"nameLocations": [
															"6951:8:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "6951:8:4"
													},
													"referencedDeclaration": 81,
													"src": "6951:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$81",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6975:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 495,
												"src": "6967:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 457,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6967:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6987:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 495,
												"src": "6979:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 459,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6979:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7007:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 495,
												"src": "6994:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 461,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6994:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6950:62:4"
									},
									"returnParameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7022:0:4"
									},
									"scope": 578,
									"src": "6920:320:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 535,
										"nodeType": "Block",
										"src": "7807:650:4",
										"statements": [
											{
												"assignments": [
													505
												],
												"declarations": [
													{
														"constant": false,
														"id": 505,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "7825:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 535,
														"src": "7817:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 504,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7817:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 506,
												"nodeType": "VariableDeclarationStatement",
												"src": "7817:18:4"
											},
											{
												"assignments": [
													508
												],
												"declarations": [
													{
														"constant": false,
														"id": 508,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "7853:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 535,
														"src": "7845:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 507,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7845:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 509,
												"nodeType": "VariableDeclarationStatement",
												"src": "7845:19:4"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "7899:396:4",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7913:75:4",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nodeType": "YulIdentifier",
																			"src": "7933:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7933:5:4"
																	},
																	{
																		"name": "token",
																		"nodeType": "YulIdentifier",
																		"src": "7940:5:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7947:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "7954:4:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7960:4:4",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7950:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7950:15:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "7973:4:4"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "7967:5:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7967:11:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7980:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7983:4:4",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nodeType": "YulIdentifier",
																	"src": "7928:4:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "7928:60:4"
															},
															"variables": [
																{
																	"name": "success",
																	"nodeType": "YulTypedName",
																	"src": "7917:7:4",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8049:157:4",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8067:22:4",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8084:4:4",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8078:5:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8078:11:4"
																		},
																		"variables": [
																			{
																				"name": "ptr",
																				"nodeType": "YulTypedName",
																				"src": "8071:3:4",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nodeType": "YulIdentifier",
																					"src": "8121:3:4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8126:1:4",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nodeType": "YulIdentifier",
																						"src": "8129:14:4"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8129:16:4"
																				}
																			],
																			"functionName": {
																				"name": "returndatacopy",
																				"nodeType": "YulIdentifier",
																				"src": "8106:14:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8106:40:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8106:40:4"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nodeType": "YulIdentifier",
																					"src": "8170:3:4"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nodeType": "YulIdentifier",
																						"src": "8175:14:4"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8175:16:4"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8163:6:4"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8163:29:4"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8163:29:4"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "success",
																		"nodeType": "YulIdentifier",
																		"src": "8040:7:4"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8033:6:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "8033:15:4"
															},
															"nodeType": "YulIf",
															"src": "8030:176:4"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8219:30:4",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nodeType": "YulIdentifier",
																	"src": "8233:14:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "8233:16:4"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nodeType": "YulIdentifier",
																	"src": "8219:10:4"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8262:23:4",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8283:1:4",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8277:5:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "8277:8:4"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nodeType": "YulIdentifier",
																	"src": "8262:11:4"
																}
															]
														}
													]
												},
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 501,
														"isOffset": false,
														"isSlot": false,
														"src": "7954:4:4",
														"valueSize": 1
													},
													{
														"declaration": 501,
														"isOffset": false,
														"isSlot": false,
														"src": "7973:4:4",
														"valueSize": 1
													},
													{
														"declaration": 505,
														"isOffset": false,
														"isSlot": false,
														"src": "8219:10:4",
														"valueSize": 1
													},
													{
														"declaration": 508,
														"isOffset": false,
														"isSlot": false,
														"src": "8262:11:4",
														"valueSize": 1
													},
													{
														"declaration": 499,
														"isOffset": false,
														"isSlot": false,
														"src": "7940:5:4",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 510,
												"nodeType": "InlineAssembly",
												"src": "7874:421:4"
											},
											{
												"condition": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 513,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 511,
															"name": "returnSize",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 505,
															"src": "8309:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 512,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8323:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8309:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 524,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 522,
															"name": "returnValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 508,
															"src": "8361:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "31",
															"id": 523,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8376:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "8361:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "8309:68:4",
													"trueExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 521,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 516,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 499,
																			"src": "8335:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$167",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$167",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 515,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8327:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 514,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "8327:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 517,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8327:14:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 518,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8342:4:4",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "8327:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8347:6:4",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "8327:26:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 520,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8357:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8327:31:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 534,
												"nodeType": "IfStatement",
												"src": "8305:146:4",
												"trueBody": {
													"id": 533,
													"nodeType": "Block",
													"src": "8379:72:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 529,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 499,
																				"src": "8433:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$167",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$167",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 528,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8425:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 527,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8425:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 530,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8425:14:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 526,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 181,
																	"src": "8400:24:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 531,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8400:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 532,
															"nodeType": "RevertStatement",
															"src": "8393:47:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 496,
										"nodeType": "StructuredDocumentation",
										"src": "7246:486:4",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements."
									},
									"id": 536,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "7746:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7773:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "7766:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 498,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 497,
														"name": "IERC20",
														"nameLocations": [
															"7766:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "7766:6:4"
													},
													"referencedDeclaration": 167,
													"src": "7766:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7793:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 536,
												"src": "7780:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 500,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7780:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7765:33:4"
									},
									"returnParameters": {
										"id": 503,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7807:0:4"
									},
									"scope": 578,
									"src": "7737:720:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 576,
										"nodeType": "Block",
										"src": "9048:391:4",
										"statements": [
											{
												"assignments": [
													548
												],
												"declarations": [
													{
														"constant": false,
														"id": 548,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "9063:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 576,
														"src": "9058:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 547,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "9058:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 549,
												"nodeType": "VariableDeclarationStatement",
												"src": "9058:12:4"
											},
											{
												"assignments": [
													551
												],
												"declarations": [
													{
														"constant": false,
														"id": 551,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "9088:10:4",
														"nodeType": "VariableDeclaration",
														"scope": 576,
														"src": "9080:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 550,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9080:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 552,
												"nodeType": "VariableDeclarationStatement",
												"src": "9080:18:4"
											},
											{
												"assignments": [
													554
												],
												"declarations": [
													{
														"constant": false,
														"id": 554,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "9116:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 576,
														"src": "9108:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 553,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9108:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 555,
												"nodeType": "VariableDeclarationStatement",
												"src": "9108:19:4"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "9162:174:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9176:71:4",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nodeType": "YulIdentifier",
																			"src": "9192:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9192:5:4"
																	},
																	{
																		"name": "token",
																		"nodeType": "YulIdentifier",
																		"src": "9199:5:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9206:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "9213:4:4"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9219:4:4",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9209:3:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9209:15:4"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "9232:4:4"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "9226:5:4"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9226:11:4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9239:1:4",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9242:4:4",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nodeType": "YulIdentifier",
																	"src": "9187:4:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "9187:60:4"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nodeType": "YulIdentifier",
																	"src": "9176:7:4"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9260:30:4",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nodeType": "YulIdentifier",
																	"src": "9274:14:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "9274:16:4"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nodeType": "YulIdentifier",
																	"src": "9260:10:4"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9303:23:4",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9324:1:4",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9318:5:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "9318:8:4"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nodeType": "YulIdentifier",
																	"src": "9303:11:4"
																}
															]
														}
													]
												},
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 542,
														"isOffset": false,
														"isSlot": false,
														"src": "9213:4:4",
														"valueSize": 1
													},
													{
														"declaration": 542,
														"isOffset": false,
														"isSlot": false,
														"src": "9232:4:4",
														"valueSize": 1
													},
													{
														"declaration": 551,
														"isOffset": false,
														"isSlot": false,
														"src": "9260:10:4",
														"valueSize": 1
													},
													{
														"declaration": 554,
														"isOffset": false,
														"isSlot": false,
														"src": "9303:11:4",
														"valueSize": 1
													},
													{
														"declaration": 548,
														"isOffset": false,
														"isSlot": false,
														"src": "9176:7:4",
														"valueSize": 1
													},
													{
														"declaration": 540,
														"isOffset": false,
														"isSlot": false,
														"src": "9199:5:4",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 556,
												"nodeType": "InlineAssembly",
												"src": "9137:199:4"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 557,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 548,
														"src": "9352:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 560,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 558,
																		"name": "returnSize",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 551,
																		"src": "9364:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 559,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9378:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "9364:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 571,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 569,
																		"name": "returnValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 554,
																		"src": "9415:11:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 570,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9430:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "9415:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "9364:67:4",
																"trueExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 568,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 563,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 540,
																						"src": "9390:5:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$167",
																							"typeString": "contract IERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_IERC20_$167",
																							"typeString": "contract IERC20"
																						}
																					],
																					"id": 562,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "9382:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 561,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "9382:7:4",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 564,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "9382:14:4",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 565,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "9397:4:4",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "9382:19:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 566,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "9402:6:4",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "9382:26:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 567,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9411:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "9382:30:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 573,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9363:69:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9352:80:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 546,
												"id": 575,
												"nodeType": "Return",
												"src": "9345:87:4"
											}
										]
									},
									"documentation": {
										"id": 537,
										"nodeType": "StructuredDocumentation",
										"src": "8463:491:4",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead."
									},
									"id": 577,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "8968:23:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8999:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "8992:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$167",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 539,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 538,
														"name": "IERC20",
														"nameLocations": [
															"8992:6:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 167,
														"src": "8992:6:4"
													},
													"referencedDeclaration": 167,
													"src": "8992:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$167",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9019:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "9006:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 541,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9006:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8991:33:4"
									},
									"returnParameters": {
										"id": 546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "9042:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 544,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9042:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9041:6:4"
									},
									"scope": 578,
									"src": "8959:480:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 579,
							"src": "749:8692:4",
							"usedErrors": [
								181,
								190
							]
						}
					],
					"src": "115:9327:4"
				},
				"id": 4
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							837
						],
						"Errors": [
							859
						]
					},
					"id": 838,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 580,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:5"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Errors.sol",
							"file": "./Errors.sol",
							"id": 582,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 838,
							"sourceUnit": 860,
							"src": "126:36:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 581,
										"name": "Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 859,
										"src": "134:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 583,
								"nodeType": "StructuredDocumentation",
								"src": "164:67:5",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 837,
							"linearizedBaseContracts": [
								837
							],
							"name": "Address",
							"nameLocation": "240:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 584,
										"nodeType": "StructuredDocumentation",
										"src": "254:75:5",
										"text": " @dev There's no code at `target` (it is not a contract)."
									},
									"errorSelector": "9996b315",
									"id": 588,
									"name": "AddressEmptyCode",
									"nameLocation": "340:16:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "365:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 588,
												"src": "357:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 585,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "357:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "356:16:5"
									},
									"src": "334:39:5"
								},
								{
									"body": {
										"id": 634,
										"nodeType": "Block",
										"src": "1360:278:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 602,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 598,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1382:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$837",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$837",
																		"typeString": "library Address"
																	}
																],
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1374:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 596,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1374:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 599,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1374:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 600,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1388:7:5",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1374:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 601,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 593,
														"src": "1398:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1374:30:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 615,
												"nodeType": "IfStatement",
												"src": "1370:125:5",
												"trueBody": {
													"id": 614,
													"nodeType": "Block",
													"src": "1406:89:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 608,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "1462:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Address_$837",
																						"typeString": "library Address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Address_$837",
																						"typeString": "library Address"
																					}
																				],
																				"id": 607,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "1454:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 606,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "1454:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 609,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1454:13:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 610,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1468:7:5",
																		"memberName": "balance",
																		"nodeType": "MemberAccess",
																		"src": "1454:21:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 611,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 593,
																		"src": "1477:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 603,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 859,
																		"src": "1427:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$859_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 605,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1434:19:5",
																	"memberName": "InsufficientBalance",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 847,
																	"src": "1427:26:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,uint256) pure"
																	}
																},
																"id": 612,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1427:57:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 613,
															"nodeType": "RevertStatement",
															"src": "1420:64:5"
														}
													]
												}
											},
											{
												"assignments": [
													617,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 617,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1511:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 634,
														"src": "1506:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 616,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1506:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 624,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 622,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1554:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 618,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 591,
																"src": "1524:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 619,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1534:4:5",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "1524:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 621,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 620,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 593,
																"src": "1546:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "1524:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 623,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1524:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1505:52:5"
											},
											{
												"condition": {
													"id": 626,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1571:8:5",
													"subExpression": {
														"id": 625,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 617,
														"src": "1572:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 633,
												"nodeType": "IfStatement",
												"src": "1567:65:5",
												"trueBody": {
													"id": 632,
													"nodeType": "Block",
													"src": "1581:51:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 627,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 859,
																		"src": "1602:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$859_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 629,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1609:10:5",
																	"memberName": "FailedCall",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 850,
																	"src": "1602:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 630,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1602:19:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 631,
															"nodeType": "RevertStatement",
															"src": "1595:26:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 589,
										"nodeType": "StructuredDocumentation",
										"src": "379:905:5",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 635,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "1298:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 591,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1324:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "1308:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 590,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1308:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1343:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "1335:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1335:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1307:43:5"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1360:0:5"
									},
									"scope": 837,
									"src": "1289:349:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 651,
										"nodeType": "Block",
										"src": "2572:62:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 646,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 638,
															"src": "2611:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 647,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 640,
															"src": "2619:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 648,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2625:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 645,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 702,
														"src": "2589:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256) returns (bytes memory)"
														}
													},
													"id": 649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2589:38:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 644,
												"id": 650,
												"nodeType": "Return",
												"src": "2582:45:5"
											}
										]
									},
									"documentation": {
										"id": 636,
										"nodeType": "StructuredDocumentation",
										"src": "1644:834:5",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {Errors.FailedCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."
									},
									"id": 652,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "2492:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "2513:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "2505:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 637,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2505:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 640,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2534:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "2521:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 639,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2521:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2504:35:5"
									},
									"returnParameters": {
										"id": 644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 652,
												"src": "2558:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 642,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2558:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2557:14:5"
									},
									"scope": 837,
									"src": "2483:151:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 701,
										"nodeType": "Block",
										"src": "3071:294:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 666,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3093:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$837",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$837",
																		"typeString": "library Address"
																	}
																],
																"id": 665,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3085:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 664,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3085:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3085:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 668,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3099:7:5",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "3085:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 669,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 659,
														"src": "3109:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3085:29:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 683,
												"nodeType": "IfStatement",
												"src": "3081:123:5",
												"trueBody": {
													"id": 682,
													"nodeType": "Block",
													"src": "3116:88:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 676,
																					"name": "this",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967268,
																					"src": "3172:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_Address_$837",
																						"typeString": "library Address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_Address_$837",
																						"typeString": "library Address"
																					}
																				],
																				"id": 675,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "3164:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 674,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "3164:7:5",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 677,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3164:13:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 678,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "3178:7:5",
																		"memberName": "balance",
																		"nodeType": "MemberAccess",
																		"src": "3164:21:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 679,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 659,
																		"src": "3187:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 671,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 859,
																		"src": "3137:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$859_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 673,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3144:19:5",
																	"memberName": "InsufficientBalance",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 847,
																	"src": "3137:26:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,uint256) pure"
																	}
																},
																"id": 680,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3137:56:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 681,
															"nodeType": "RevertStatement",
															"src": "3130:63:5"
														}
													]
												}
											},
											{
												"assignments": [
													685,
													687
												],
												"declarations": [
													{
														"constant": false,
														"id": 685,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3219:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 701,
														"src": "3214:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 684,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3214:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 687,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3241:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 701,
														"src": "3228:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 686,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3228:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 694,
												"initialValue": {
													"arguments": [
														{
															"id": 692,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 657,
															"src": "3281:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 688,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 655,
																"src": "3255:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3262:4:5",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3255:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 691,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 690,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 659,
																"src": "3274:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3255:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3255:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3213:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 696,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 655,
															"src": "3330:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 697,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 685,
															"src": "3338:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 698,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 687,
															"src": "3347:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 695,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 794,
														"src": "3303:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 699,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3303:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 663,
												"id": 700,
												"nodeType": "Return",
												"src": "3296:62:5"
											}
										]
									},
									"documentation": {
										"id": 653,
										"nodeType": "StructuredDocumentation",
										"src": "2640:313:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."
									},
									"id": 702,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "2967:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 660,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "2997:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "2989:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 654,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2989:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3018:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "3005:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 656,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3005:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 659,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3032:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "3024:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 658,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3024:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2988:50:5"
									},
									"returnParameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 702,
												"src": "3057:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 661,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3057:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3056:14:5"
									},
									"scope": 837,
									"src": "2958:407:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 727,
										"nodeType": "Block",
										"src": "3604:154:5",
										"statements": [
											{
												"assignments": [
													713,
													715
												],
												"declarations": [
													{
														"constant": false,
														"id": 713,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3620:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 727,
														"src": "3615:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 712,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3615:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 715,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3642:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 727,
														"src": "3629:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 714,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3629:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 720,
												"initialValue": {
													"arguments": [
														{
															"id": 718,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 707,
															"src": "3674:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 716,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 705,
															"src": "3656:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 717,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3663:10:5",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "3656:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 719,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3656:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3614:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 722,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 705,
															"src": "3723:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 723,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 713,
															"src": "3731:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 724,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 715,
															"src": "3740:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 721,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 794,
														"src": "3696:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3696:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 711,
												"id": 726,
												"nodeType": "Return",
												"src": "3689:62:5"
											}
										]
									},
									"documentation": {
										"id": 703,
										"nodeType": "StructuredDocumentation",
										"src": "3371:128:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."
									},
									"id": 728,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "3513:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 708,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 705,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3540:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "3532:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 704,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3532:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 707,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3561:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "3548:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 706,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3548:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3531:35:5"
									},
									"returnParameters": {
										"id": 711,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 710,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "3590:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 709,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3590:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3589:14:5"
									},
									"scope": 837,
									"src": "3504:254:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 753,
										"nodeType": "Block",
										"src": "3996:156:5",
										"statements": [
											{
												"assignments": [
													739,
													741
												],
												"declarations": [
													{
														"constant": false,
														"id": 739,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4012:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 753,
														"src": "4007:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 738,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4007:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 741,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4034:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 753,
														"src": "4021:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 740,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4021:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 746,
												"initialValue": {
													"arguments": [
														{
															"id": 744,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 733,
															"src": "4068:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 742,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 731,
															"src": "4048:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 743,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4055:12:5",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "4048:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4048:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4006:67:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 748,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 731,
															"src": "4117:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 749,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 739,
															"src": "4125:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 750,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 741,
															"src": "4134:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 747,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 794,
														"src": "4090:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4090:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 737,
												"id": 752,
												"nodeType": "Return",
												"src": "4083:62:5"
											}
										]
									},
									"documentation": {
										"id": 729,
										"nodeType": "StructuredDocumentation",
										"src": "3764:130:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."
									},
									"id": 754,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "3908:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 734,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3937:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "3929:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 730,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3929:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 733,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3958:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "3945:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 732,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3945:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3928:35:5"
									},
									"returnParameters": {
										"id": 737,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 736,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "3982:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 735,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3982:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3981:14:5"
									},
									"scope": 837,
									"src": "3899:253:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 793,
										"nodeType": "Block",
										"src": "4578:424:5",
										"statements": [
											{
												"condition": {
													"id": 767,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4592:8:5",
													"subExpression": {
														"id": 766,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 759,
														"src": "4593:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 791,
													"nodeType": "Block",
													"src": "4652:344:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 782,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 776,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 773,
																			"name": "returndata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 761,
																			"src": "4840:10:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 774,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4851:6:5",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "4840:17:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 775,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4861:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "4840:22:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 781,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"id": 777,
																				"name": "target",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 757,
																				"src": "4866:6:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 778,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "4873:4:5",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "4866:11:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 779,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4878:6:5",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "4866:18:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 780,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4888:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "4866:23:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "4840:49:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 788,
															"nodeType": "IfStatement",
															"src": "4836:119:5",
															"trueBody": {
																"id": 787,
																"nodeType": "Block",
																"src": "4891:64:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 784,
																					"name": "target",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 757,
																					"src": "4933:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 783,
																				"name": "AddressEmptyCode",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 588,
																				"src": "4916:16:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																					"typeString": "function (address) pure"
																				}
																			},
																			"id": 785,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "4916:24:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 786,
																		"nodeType": "RevertStatement",
																		"src": "4909:31:5"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 789,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 761,
																"src": "4975:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 765,
															"id": 790,
															"nodeType": "Return",
															"src": "4968:17:5"
														}
													]
												},
												"id": 792,
												"nodeType": "IfStatement",
												"src": "4588:408:5",
												"trueBody": {
													"id": 772,
													"nodeType": "Block",
													"src": "4602:44:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 769,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 761,
																		"src": "4624:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 768,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 836,
																	"src": "4616:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 770,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4616:19:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 771,
															"nodeType": "ExpressionStatement",
															"src": "4616:19:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 755,
										"nodeType": "StructuredDocumentation",
										"src": "4158:257:5",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n of an unsuccessful call."
									},
									"id": 794,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "4429:26:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 757,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4473:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 794,
												"src": "4465:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 756,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4465:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "4494:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 794,
												"src": "4489:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 758,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4489:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "4524:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 794,
												"src": "4511:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 760,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4511:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4455:85:5"
									},
									"returnParameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 794,
												"src": "4564:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 763,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4564:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4563:14:5"
									},
									"scope": 837,
									"src": "4420:582:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 815,
										"nodeType": "Block",
										"src": "5306:122:5",
										"statements": [
											{
												"condition": {
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5320:8:5",
													"subExpression": {
														"id": 804,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 797,
														"src": "5321:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 813,
													"nodeType": "Block",
													"src": "5380:42:5",
													"statements": [
														{
															"expression": {
																"id": 811,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 799,
																"src": "5401:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 803,
															"id": 812,
															"nodeType": "Return",
															"src": "5394:17:5"
														}
													]
												},
												"id": 814,
												"nodeType": "IfStatement",
												"src": "5316:106:5",
												"trueBody": {
													"id": 810,
													"nodeType": "Block",
													"src": "5330:44:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 807,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 799,
																		"src": "5352:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 806,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 836,
																	"src": "5344:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 808,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5344:19:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 809,
															"nodeType": "ExpressionStatement",
															"src": "5344:19:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 795,
										"nodeType": "StructuredDocumentation",
										"src": "5008:191:5",
										"text": " @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {Errors.FailedCall} error."
									},
									"id": 816,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "5213:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 797,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "5235:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 816,
												"src": "5230:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 796,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5230:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5257:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 816,
												"src": "5244:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 798,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5244:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5229:39:5"
									},
									"returnParameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 802,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 816,
												"src": "5292:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 801,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5292:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5291:14:5"
									},
									"scope": 837,
									"src": "5204:224:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 835,
										"nodeType": "Block",
										"src": "5597:432:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 822,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 819,
															"src": "5673:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 823,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5684:6:5",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5673:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 824,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5693:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5673:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 833,
													"nodeType": "Block",
													"src": "5972:51:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 828,
																		"name": "Errors",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 859,
																		"src": "5993:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Errors_$859_$",
																			"typeString": "type(library Errors)"
																		}
																	},
																	"id": 830,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6000:10:5",
																	"memberName": "FailedCall",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 850,
																	"src": "5993:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 831,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5993:19:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 832,
															"nodeType": "RevertStatement",
															"src": "5986:26:5"
														}
													]
												},
												"id": 834,
												"nodeType": "IfStatement",
												"src": "5669:354:5",
												"trueBody": {
													"id": 827,
													"nodeType": "Block",
													"src": "5696:270:5",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "5823:133:5",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "5841:40:5",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "5870:10:5"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "5864:5:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5864:17:5"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "5845:15:5",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5909:2:5",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "5913:10:5"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "5905:3:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5905:19:5"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "5926:15:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5898:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5898:44:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5898:44:5"
																	}
																]
															},
															"evmVersion": "paris",
															"externalReferences": [
																{
																	"declaration": 819,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "5870:10:5",
																	"valueSize": 1
																},
																{
																	"declaration": 819,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "5913:10:5",
																	"valueSize": 1
																}
															],
															"flags": [
																"memory-safe"
															],
															"id": 826,
															"nodeType": "InlineAssembly",
															"src": "5798:158:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 817,
										"nodeType": "StructuredDocumentation",
										"src": "5434:103:5",
										"text": " @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}."
									},
									"id": 836,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "5551:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 819,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5572:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "5559:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 818,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5559:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5558:25:5"
									},
									"returnParameters": {
										"id": 821,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5597:0:5"
									},
									"scope": 837,
									"src": "5542:487:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 838,
							"src": "232:5799:5",
							"usedErrors": [
								588
							]
						}
					],
					"src": "101:5931:5"
				},
				"id": 5
			},
			"lib/openzeppelin-contracts/contracts/utils/Errors.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Errors.sol",
					"exportedSymbols": {
						"Errors": [
							859
						]
					},
					"id": 860,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 839,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Errors",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 840,
								"nodeType": "StructuredDocumentation",
								"src": "125:284:6",
								"text": " @dev Collection of common custom errors used in multiple contracts\n IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n It is recommended to avoid relying on the error API for critical functionality.\n _Available since v5.1._"
							},
							"fullyImplemented": true,
							"id": 859,
							"linearizedBaseContracts": [
								859
							],
							"name": "Errors",
							"nameLocation": "418:6:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 841,
										"nodeType": "StructuredDocumentation",
										"src": "431:94:6",
										"text": " @dev The ETH balance of the account is not enough to perform the operation."
									},
									"errorSelector": "cf479181",
									"id": 847,
									"name": "InsufficientBalance",
									"nameLocation": "536:19:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 843,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "564:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "556:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 842,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "556:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "581:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 847,
												"src": "573:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 844,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "573:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "555:33:6"
									},
									"src": "530:59:6"
								},
								{
									"documentation": {
										"id": 848,
										"nodeType": "StructuredDocumentation",
										"src": "595:89:6",
										"text": " @dev A call to an address target failed. The target may have reverted."
									},
									"errorSelector": "d6bda275",
									"id": 850,
									"name": "FailedCall",
									"nameLocation": "695:10:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 849,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "705:2:6"
									},
									"src": "689:19:6"
								},
								{
									"documentation": {
										"id": 851,
										"nodeType": "StructuredDocumentation",
										"src": "714:46:6",
										"text": " @dev The deployment failed."
									},
									"errorSelector": "b06ebf3d",
									"id": 853,
									"name": "FailedDeployment",
									"nameLocation": "771:16:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 852,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "787:2:6"
									},
									"src": "765:25:6"
								},
								{
									"documentation": {
										"id": 854,
										"nodeType": "StructuredDocumentation",
										"src": "796:58:6",
										"text": " @dev A necessary precompile is missing."
									},
									"errorSelector": "42b01bce",
									"id": 858,
									"name": "MissingPrecompile",
									"nameLocation": "865:17:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 858,
												"src": "883:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 855,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "883:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "882:9:6"
									},
									"src": "859:33:6"
								}
							],
							"scope": 860,
							"src": "410:484:6",
							"usedErrors": [
								847,
								850,
								853,
								858
							]
						}
					],
					"src": "100:795:6"
				},
				"id": 6
			},
			"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							871
						]
					},
					"id": 872,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 861,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 862,
								"nodeType": "StructuredDocumentation",
								"src": "140:280:7",
								"text": " @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 871,
							"linearizedBaseContracts": [
								871
							],
							"name": "IERC165",
							"nameLocation": "431:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 863,
										"nodeType": "StructuredDocumentation",
										"src": "445:340:7",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 870,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "799:17:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 866,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 865,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "824:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "817:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 864,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "817:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "816:20:7"
									},
									"returnParameters": {
										"id": 869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "860:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 867,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "860:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "859:6:7"
									},
									"scope": 871,
									"src": "790:76:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 872,
							"src": "421:447:7",
							"usedErrors": []
						}
					],
					"src": "115:754:7"
				},
				"id": 7
			}
		}
	}
}
{
	"id": "237ac9299b6c013bf7cd9d6108c86eeb",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\n\npragma solidity 0.8.19;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
				"Hashes": {
					"abi": [],
					"devdoc": {
						"details": "Library of standard hash functions. _Available since v5.1._",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":220:1033  library Hashes {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":220:1033  library Hashes {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a30dae582693c288c90354c0f3189db55e85acfc7d53c1bc5fddb7996aaaf28964736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a30dae582693c288c90354c0f3189db55e85acfc7d53c1bc5fddb7996aaaf28964736f6c63430008130033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xD 0xAE PC 0x26 SWAP4 0xC2 DUP9 0xC9 SUB SLOAD 0xC0 RETURN XOR SWAP14 0xB5 0x5E DUP6 0xAC 0xFC PUSH30 0x53C1BC5FDDB7996AAAF28964736F6C634300081300330000000000000000 ",
							"sourceMap": "220:813:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:813:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a30dae582693c288c90354c0f3189db55e85acfc7d53c1bc5fddb7996aaaf28964736f6c63430008130033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xD 0xAE PC 0x26 SWAP4 0xC2 DUP9 0xC9 SUB SLOAD 0xC0 RETURN XOR SWAP14 0xB5 0x5E DUP6 0xAC 0xFC PUSH30 0x53C1BC5FDDB7996AAAF28964736F6C634300081300330000000000000000 ",
							"sourceMap": "220:813:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_efficientKeccak256(bytes32,bytes32)": "infinite",
								"commutativeKeccak256(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 220,
									"end": 1033,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a30dae582693c288c90354c0f3189db55e85acfc7d53c1bc5fddb7996aaaf28964736f6c63430008130033",
									".code": [
										{
											"begin": 220,
											"end": 1033,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 220,
											"end": 1033,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 220,
											"end": 1033,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 220,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 220,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 220,
											"end": 1033,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 220,
											"end": 1033,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 220,
											"end": 1033,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 220,
											"end": 1033,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0xfaec0e1bcd941edd2583aee02deff2b0a67e3db774e1fa7c1e16516cac8be739\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6dc8f867ff4b17e2d70b9e29c60cf5ba79d127fc39f38472a7d27c45ce21ce0f\",\"dweb:/ipfs/QmWSdPtVCnN2cr4qPiJsF6mnm74cpGNHKbkeoBqd8dJDnS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
					"exportedSymbols": {
						"Hashes": [
							39
						]
					},
					"id": 40,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Hashes",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "138:81:0",
								"text": " @dev Library of standard hash functions.\n _Available since v5.1._"
							},
							"fullyImplemented": true,
							"id": 39,
							"linearizedBaseContracts": [
								39
							],
							"name": "Hashes",
							"nameLocation": "228:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "587:85:0",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 14,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 12,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5,
															"src": "604:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 13,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "608:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "604:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 20,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "660:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 21,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "663:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 19,
															"name": "_efficientKeccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 38,
															"src": "640:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
															}
														},
														"id": 22,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "640:25:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "604:61:0",
													"trueExpression": {
														"arguments": [
															{
																"id": 16,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 5,
																"src": "632:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 17,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "635:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 15,
															"name": "_efficientKeccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 38,
															"src": "612:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
															}
														},
														"id": 18,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "612:25:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 11,
												"id": 24,
												"nodeType": "Return",
												"src": "597:68:0"
											}
										]
									},
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "241:257:0",
										"text": " @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."
									},
									"id": 26,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "commutativeKeccak256",
									"nameLocation": "512:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "541:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "533:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "533:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "552:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "544:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 6,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "544:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "532:22:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "578:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 9,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "578:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "577:9:0"
									},
									"scope": 39,
									"src": "503:169:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 37,
										"nodeType": "Block",
										"src": "880:151:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "915:110:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "936:4:0",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"name": "a",
																		"nodeType": "YulIdentifier",
																		"src": "942:1:0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "929:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "929:15:0"
															},
															"nodeType": "YulExpressionStatement",
															"src": "929:15:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "964:4:0",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"name": "b",
																		"nodeType": "YulIdentifier",
																		"src": "970:1:0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "957:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "957:15:0"
															},
															"nodeType": "YulExpressionStatement",
															"src": "957:15:0"
														},
														{
															"nodeType": "YulAssignment",
															"src": "985:30:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1004:4:0",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1010:4:0",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "994:9:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "994:21:0"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "985:5:0"
																}
															]
														}
													]
												},
												"evmVersion": "paris",
												"externalReferences": [
													{
														"declaration": 29,
														"isOffset": false,
														"isSlot": false,
														"src": "942:1:0",
														"valueSize": 1
													},
													{
														"declaration": 31,
														"isOffset": false,
														"isSlot": false,
														"src": "970:1:0",
														"valueSize": 1
													},
													{
														"declaration": 34,
														"isOffset": false,
														"isSlot": false,
														"src": "985:5:0",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 36,
												"nodeType": "InlineAssembly",
												"src": "890:135:0"
											}
										]
									},
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "678:109:0",
										"text": " @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."
									},
									"id": 38,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_efficientKeccak256",
									"nameLocation": "801:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "829:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 38,
												"src": "821:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 28,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "821:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "840:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 38,
												"src": "832:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 30,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "832:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "820:22:0"
									},
									"returnParameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "873:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 38,
												"src": "865:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 33,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "865:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "864:15:0"
									},
									"scope": 39,
									"src": "792:239:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 40,
							"src": "220:813:0",
							"usedErrors": []
						}
					],
					"src": "113:921:0"
				},
				"id": 0
			}
		}
	}
}